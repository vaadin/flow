ifdef::env-github[:outfilesuffix: .asciidoc]
= Creating a Component Which Can Contain Other Components

There are multiple ways you can create a component. This tutorial describes how to create a `Component` container. For other component tutorials, see:

* <<tutorial-component-basic#,Creating A Simple Component Using the Element API>>.
* <<tutorial-component-many-elements#,Creating a Component Based on Many Elements>>.
* <<tutorial-component-composite#,Creating a Component Using Existing Components>>

A Component container is a Component to which you can add other components. Typically this is done through a generic public API.

The simplest possible component container looks like this:

[source,java]
----
@Tag("div")
public class MyComponentContainer extends Component {

  public MyComponentContainer() {
  }

  public void add(Component child) {
    getElement().appendChild(child.getElement());
  }
}
----

When adding a component as a child to another component the only thing a component container absolutely must do is to attach the element of the child component to the DOM. In simple cases like the above, the child element is attached directly to the root element of the component container.

Component hierarchy methods such as `getChildren` and `getParent` will work automatically for our component because they are implemented based on the element hierarchy.

To be able to remove components, you can add a similar method:

[source,java]
----
public void remove(Component child) {
  getElement().removeChild(child.getElement());
}
----

To make this even easier, there is a `HasComponents` interface in the framework with default implementations for `add(Component)` and `remove(Component)`. By using that, our `MyComponentContainer` can be reduced to:

[source,java]
----
@Tag("div")
public class MyComponentContainer extends Component implements HasComponents {
}
----

[NOTE]
You should not assume that a component is always removed using the remove method. A child element can be detached either manually through `Element.removeFromParent()` or by adding it to another component (`Element.appendChild` moves the element from the old parent if it is attached).
[TIP]
If you need to know when a child component is removed, add a detach listener to it using `Component.addDetachListener()`.
