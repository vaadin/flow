ifdef::env-github[:outfilesuffix: .asciidoc]
= Creating A Simple Component Using the Template API

There are multiple ways you can create a component. This tutorial uses the `Template` API with no additional elements or components. For other component tutorials, see:

* <<tutorial-component-many-elements#,Creating a Component Based on Many Elements>>
* <<tutorial-component-composite#,Creating a Component Using Existing Components>>
* <<tutorial-component-container#,Creating a Component Which Can Contain Other Components>>

For tutorials about how to use different template features, see:

* <<tutorial-template-bindings#,Binding Model Data in a Template>>
* <<tutorial-template-for#,Creating Template Contents Dynamically Based on a List of Items>>

[WARNING]
Implementation of the Template API has only just started. The current feature set is still cumbersome to use and very limiting.

You can use a template to create a simple greeting component in this way:

[source,html]
----
<div>
  Hello, <span class="greeting-name">{{name}}</span>
</div>
----

The template engine will replace `{{name}}` in the HTML with the value of the `name` property from the component's model.

[NOTE]
Updating the model property value will automatically update what is shown in the browser.
The template engine optimizes performance by updating only the changed parts.

[WARNING]
The model of a template component should not be confused with domain model objects defined for the application's business logic.
Data from the domain model might be used in the template model, but they are still separate concepts.

To use this template and set model values, you also need to create a class that extends `Template` and add an instance of the component to your view.

Each instance of a `Template` component has its own model instance that holds values used by different types of bindings in the template file (i.e. the `.html` file).

[source,java]
----
public class Greeting extends Template {
    // This API will be improved
    private ModelMap model = getElement().getNode().getFeature(ModelMap.class);

    public void setName(String name) {
        model.setValue("name", name);
    }

    public String getName() {
        return (String) model.getValue("name");
    }
}
----

The last thing you need to do is to make sure the name of the template file has the same name as the Java file, except that the file extension should be `.html` instead of `.java`.
The template file should also be in the same package as the corresponding class.

[TIP]
You can use the `@HtmlTemplate` annotation to specify any HTML file path in the classpath.
[TIP]
With Maven, the template files should by default be located in `src/main/resources`. So if the `Greeting` class is in the `com.example` package, then `Greeting.html` should be in `src/main/resources/com/example/`.

You can use `Greeting` like any other component.

[source,java]
----
Greeting greeting = new Greeting();
greeting.setName("John Doe");

Div layout = new Div();
layout.add(greeting);
----
