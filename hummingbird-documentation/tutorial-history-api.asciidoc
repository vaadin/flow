= History API
:toc:

The _History API_ allows you to access the browser navigation history from the server-side.
The history is always bound to the current browser window / frame, so you can access it
from your _UI_.

[source,java]
----
History history = UI.getCurrent().getPage().getHistory();
----

==== Traversing History

With the methods `forward()`, `back()` and `go(int)` you can programmatically
traverse between the browser's history entries. The methods correspond to the user actions
on the browser's back and forward buttons.

[source,java]
----
history.back(); // navigates back to previous entry

history.forward(); // navigates forward to the next entry

history.go(-2); // navigates back two entires
history.go(1); // equal to history.forward();
history.go(0); // will reload the current page
----
[NOTE]
Triggering the `forward`, `back` and `go` methods will asynchronously
trigger a _popState event_ if the history entries are for the same document.

==== Handling user navigation

You can set a handler for catching navigation events using the
`history.setHistoryStateChangeHandler(HistoryStateChangeHandler)`. This listener will be
notified when the user navigates back or forward using the browser buttons, or
when the navigation was done programmatically from server-side java code or
client-side javascript execution.

[source,java]
----
history.setHistoryStateChangeHandler(this::onHistoryStateChange);
...
private void onHistoryStateChange(HistoryStateChangeEvent event) {
    // site base url is www.abc.com/
    // user navigates back from abc.com/dashboard to abc.com/home
    event.getLocation(); // returns "home"

    // returns a optional json state object set for "home" page previously
    event.getState();
}
----

==== Changing history

You can update the history by either pushing new entries to the history, or by
replacing the current entry. You may optionally provide a json value as the _state_
parameter. This state value will be available via `LocationChangeEvent:getState()`
when the entry is being revisited the next time.
[source,java]
----
// adds a new history entry for location "home", no state
history.pushState(null, "home");

// replaces the current entry with location "document" and a state object
JsonValue state = Json.create("preview-mode");
history.replaceState(state, "document");
----
