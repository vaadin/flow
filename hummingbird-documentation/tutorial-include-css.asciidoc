ifdef::env-github[:outfilesuffix: .asciidoc]
= Including Style Sheets

For styling the application you typically need to include a style sheet. There
are two ways to do this.

[source,java]
----
@StyleSheet("styles.css") // Relative to Servlet URL
@StyleSheet("http://www.example.com/example.css") // Loaded from external location
public class MainLayout extends AngularTemplate {
  // implementation omitted
}
----

The above snippet uses the `@StyleSheet` annotation on a component. The value of
the annotation is a URL to load the style sheet from. The style sheet is loaded
when the component is shown for the first time in the browser. You can use the
annotation multiple times on the same component.

Another way of adding a style sheet is using the `addStyleSheet(String url)`
method from the `Page` class. It does exactly the same as the `@StyleSheet`
annotation.

[source,java]
----
public class MyCustomUI extends UI {

  @Override
  protected void init(VaadinRequest request) {
    // Loaded from "/root.css" regardless of how your application is deployed
    getPage().addStyleSheet("/root.css");
  }
}
----

You can place style sheets and other static resources in any folder inside your WAR file except for `/VAADIN` which is reserved for framework internal use.
`VaadinServlet` handles static resource requests if you have mapped it to `/*` .
Otherwise, the servlet container will take care of static resource requests.

By using relative URLs you are not dependent on whether the application is deployed in the root context (e.g.  `http://mysite.com/`) or in a sub context (e.g. `http://mysite.com/myapp/`).
Relative URLs are resolved using the page base URI, which is always set to match the servlet URL.

[TIP]
====
If you are using a servlet path for the servlet, e.g. `http://mysite.com/myapp/myservlet/` then you will need to take the servlet path into account when including resources.
This is needed because the base URI is `http://mysite.com/myapp/myservlet/` but static resources are deployed in `http://mysite.com/myapp/`.

You can use the special protocol `context://` with e.g. `Page.addStyleSheet` to ensure a URL relative to the context path but this is only supported when including resources.

When you configure an element, e.g setting the `src` attribute for an `<img>`, you cannot use the `context://` protocol. Your options are then:

* Cancel out the servlet path, e.g. `../images/logo.png`.
* Use an absolute URL, e.g. `/myapp/images/logo.png`
* Deploy your static resources in a directory matching the servlet path, e.g. `/myservlet/`.
====
