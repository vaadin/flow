ifdef::env-github[:outfilesuffix: .asciidoc]
== Using View Parameters

For a basic routing tutorial, see <<tutorial-routing#,Defining View Routes and Navigating>>.

For dynamic views you can map many URLs to the same view as follows:

[source,java]
----
@Override
public void configure(RouterConfiguration configuration) {
  configuration.setRoute("product/{id}", ProductView.class);
  configuration.setRoute("docs/*", DocsView.class);
}
----

All `product/something` URLs (but not `product/something/somethingelse`) are now mapped to the `ProductView`. The `id` parameter can be retrieved in `ProductView` by overriding the `onLocationChange(LocationChangeEvent)` method:

[source,java]
----
@Override
public void onLocationChange(LocationChangeEvent locationChangeEvent) {
  String productId = locationChangeEvent.getPathParameter("id");
}
----

The `DocsView` is used for all URLs starting with `docs/`, even if there are more slashes in the URL. The part after `docs/` can be retrieved similarly to path parameters:

[source,java]
----
@Override
public void onLocationChange(LocationChangeEvent locationChangeEvent) {
  String docsSubPage = locationChangeEvent.getPathWildcard();
}
----

== Navigating With Parameters

The `RouterLink` knows how to fill in parameter values based on the route set for a view.
You should provide values for all parameters defined in the route, starting from the left.
[source,java]
----
new RouterLink(product.getName(), ProductView.class, product.getId());
----

See also:

* <<tutorial-routing#,Defining View Routes and Navigating>>
* <<tutorial-routing-view-hierarchy#,View Hierarchy and Nested Views>>
* <<tutorial-routing-view-titles#,Updating Page Title on Navigation>>
