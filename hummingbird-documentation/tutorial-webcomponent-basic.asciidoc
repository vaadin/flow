ifdef::env-github[:outfilesuffix: .asciidoc]
= Basic Integration of a Polymer Web Component

This tutorial covers setting up a basic web component and importing needed resources. For related tutorials, see
* <<tutorial-webcomponent-attributes-and-properties#,Using Attributes and Properties with a Polymer Web Component>>
* <<tutorial-webcomponent-events#,Using Events with a Polymer Web Component>>


There is built in support for Polymer so in order to use a Polymer based element you only need to make sure the needed resources are loaded. The component class for an integration of (https://elements.polymer-project.org/elements/paper-slider)`<paper-slider>` can look as follows:

[source,java]
----
@Tag("paper-slider")
@HtmlImport("bower_components/paper-slider/paper-slider.html")
public class PaperSlider extends Component {
    public PaperSlider() {
    }
}
----

Using the `@Tag` annotation you specify the tag name for the element, just like you would with any built in element such as `<div>`. The actual implementation of the `<paper-slider>` element is in the `paper-slider.html` file, which you can  import using `@HtmlImport`. In this example it is assumed that you are using bower and have a `bower_components` folder in the root of you `WAR` file.

You can set up the `bower_components` folder by running
[source,sh]
----
bower init
bower install paper-slider --save
----
If you are using Maven, the command can be run in the `src/main/webapp` folder to make `bower_components` available as `/bower_components`. If you are using something else, make sure the files end up in the root of the `WAR` file.

With this basic integration, you can use add the `PaperSlider` class to a view to see that it works:
[source,java]
----
public class PaperSliderView extends Div implements View {
    public PaperSliderView() {
        add(new PaperSlider());
    }
}
----

For creating an API for attributes and properties, see
<<tutorial-webcomponent-attributes-and-properties#,Using Attributes and Properties with a Polymer Web Component>>.
For listening to events from a web component, see
<<tutorial-webcomponent-events#,Using Events with a Polymer Web Component>>.
