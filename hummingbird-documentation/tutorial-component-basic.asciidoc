ifdef::env-github[:outfilesuffix: .asciidoc]
= Creating A Simple Component Using the Element API

There are multiple ways you can create a component. This tutorial uses the `Element` API and a single DOM element. For other component tutorials, see:

* <<tutorial-component-many-elements#,Creating a Component Based on Many Elements>>.
* <<tutorial-component-composite#,Creating a Component Using Existing Components>>
* <<tutorial-component-container#,Creating a Component Which Can Contain Other Components>>

You can create a simple TextField component based on an `<input>` element as follows:

[source,java]
----
@Tag("input")
public class TextField extends Component {

  public TextField(String value) {
    getElement().setProperty("value",value);
    getElement().synchronizeProperty("value", "change");
  }
}
----

The Component class will automatically create its root element based on the `@Tag` annotation, which can then be accessed using `getElement()`. The root element in the text field is in this example used to set up synchronization of the value from the browser to the server when the user changes its value. It is also used to set the initial value of the field.
[TIP]
You can use predefined constants in the `@Tag` annotation. E.g. the annotation `@Tag("input")` is equivalent to `@Tag(Tag.INPUT)`. But those constants don't cover all possible tag names.  

To make the component easier to use, you can add an API for getting and setting the value:

[source,java]
----
  public String getValue() {
    return getElement().getProperty("value");
  }
  public void setValue(String value) {
    getElement().setProperty("value", value);
  }
----

[TIP]
For an easier way to address properties and attributes, see <<tutorial-component-property-descriptor#,Using API Helpers for Defining Component Properties>>
