ifdef::env-github[:outfilesuffix: .asciidoc]
= Creating Template Contents Dynamically Based on a List of Items

The Template API provides you a way to generate elements based on a list of items
by iterating them using a `*ngFor` for-loop.

[source,html]
----
<table>
  <tr>
    <th>Name</th><th>Title</th><th>Email</th>
  </tr>
  <tr *ngFor="let employee of employees">
    <td>{{employee.name}}</td>
    <td>{{employee.title}}</td>
    <td>{{employee.email}}</td>
  </tr>
</table>
----

The above template might look like this once populated with a list of employees:

[cols=">s,^m,e",options="header"]
|==========================
|Name   |Title     |Email
|John D |Developer | jd@foo.bar
|Jane D |Designer  | janed@foo.bar
|Mike D |Architect | mikey@foo.bar
|==========================

The `*ngFor` attribute marks the element that is generated for each item in a list.
In the above example the table's rows and everything inside the row element `<tr>...</tr>` is created for each item in the list.

The value of the `*ngFor` attribute declares the items to loop and the name of the loop variable:

* `let` precedes the name of the loop variable, e.g. _employee_.
This variable is available for <<tutorial-template-data-binding#,data binding>> inside
the element tags.
* `of` precedes the name of the list inside the template model to iterate, e.g. _employees_.

[NOTE]
You currently can't nest multiple `*ngFor` for-loops.

== Populating the List of Items

You should declare a method in the template's model interface for setting the list of beans that should be shown.
The name of the method should match the name in the `*ngFor` definition; data for `... of employees` is set by a method named `setEmployees`.

[source,java]
----
public class EmployeesTable extends Template {
  public interface EmployeesModel extends TemplateModel {
      public void setEmployees(List<Employee> employees);
  }

  @Override
  protected EmployeesModel getModel() {
      return (EmployeesModel) super.getModel();
  }

  public void setEmployees(List<Employee> employees) {
      getModel().setEmployees(employees);
  }
}
----

The `Employee` bean should have getters corresponding the properties used inside the `*ngFor` definition in the template, e.g. `getName()` for `employee.name`.

[source,java]
----
public class Employee {
    private String name;
    private String title;
    private String email;

    public Employee(String name, String title, String email) {
        this.name = name;
        this.title = title;
        this.email = email;
    }

    public String getName() {
        return name;
    }

    public String getTitle() {
        return title;
    }

    public String getEmail() {
        return email;
    }
}
----
