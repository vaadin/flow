{{#operations}}
/**
 {{#vaadinConnectClassDescription}}
 {{#multiplelines vaadinConnectClassDescription}}
 * {{{@line}}}
 {{/multiplelines}}
 *
 {{/vaadinConnectClassDescription}}
 * This module is generated from {{classname}}.java
 * All changes to this file are overridden. Please consider to make changes in the corresponding Java file if necessary.{{!
 }}{{#vaadinFilePath}}
 * @see {@link {{vaadinFilePath}}{{!}}}{{/vaadinFilePath}}
 * @module {{classname}}
 */

{{/operations}}{{!
}}{{!

TODO: Remove `// @ts-ignore` when changing the base starter to TypeScript

For now we expect that the app is written in JS. Therefore, when a custom
client import is used in the app, it is generally written in JavaScript and
lacks TypeScript type definitions. The `vaadin-connect-demo` is an example of
this case.

Missing definitions makes the TypeScript compiler unable to determine the type
of the imported `client` below, which results in an error during compilation of
the generated module.

So `// @ts-ignore` is used for now to mute this error. The consequences are:
- The imported `client` TypeScript type is assumed to be `any`, which is
  an unsafe type.
- But only the generated code is affected, so this is acceptable.
- Does not affect type checking in the user’s code that uses the generated
  TypeScript.
- We don’t export the `__client` from here, only use it in the implementation.

}}// @ts-ignore
import client from '{{vaadinConnectDefaultClientPath}}';
// @ts-ignore
import { Subscription } from '@hilla/frontend';

{{#each imports}}
import type {{~#importAs}} {{importAs}}{{/importAs}}{{~^importAs}} {{className}}{{/importAs}} from '{{importPath}}';
{{/each}}
{{#operations}}
{{#operation}}
{{#vendorExtensions.x-vaadin-connect-show-tsdoc}}

/**{{#notes}}{{#multiplelines notes}}
 * {{{@line}}}
 *{{/multiplelines}}{{/notes}}{{!
 }}{{#each bodyParam.vendorExtensions.x-vaadin-connect-parameters}}
 * @param {{name}}{{#description}} {{description}}{{/description}}{{!
 }}{{/each}}
 *{{#responses}}{{#message}} {{message}}{{/message}}{{/responses}}
 */{{/vendorExtensions.x-vaadin-connect-show-tsdoc}}
function _{{vendorExtensions.x-vaadin-connect-method-name}}({{!
 }}{{#each bodyParam.vendorExtensions.x-vaadin-connect-parameters}}
 {{name}}{{^required}}?{{/required}}: {{{getClassNameFromImports type ../../imports}}}{{#if @last}}{{! Append new line if it's the last param.}}
{{else}},{{! Used the `~` after if to remove extra empty line by the each loop}}{{/if~}}
{{/each}}): {{#vendorExtensions.x-vaadin-connect-subscribe}}
{{!
}}{{{getClassNameFromImports vendorExtensions.x-vaadin-connect-subscribe-return-type ../../../imports}}}{{!
}}
{{/vendorExtensions.x-vaadin-connect-subscribe}}
{{^vendorExtensions.x-vaadin-connect-subscribe}}
Promise<{{!
}}{{#responses}}{{#dataType}}{{{getClassNameFromImports dataType ../../../imports}}}{{/dataType}}{{^dataType}}void{{/dataType}}{{/responses}}{{!
}}>
{{/vendorExtensions.x-vaadin-connect-subscribe}}
{
{{=<% %>=}}
<%#vendorExtensions.x-vaadin-connect-subscribe%>
  return client.subscribe('<%vendorExtensions.x-vaadin-connect-endpoint-name%>', '<%vendorExtensions.x-vaadin-connect-method-name%>',{<%#each bodyParam.vendorExtensions.x-vaadin-connect-parameters%><%!
      %><%name%><%#if @last%><%else%>, <%/if%><%!
    %><%/each%>});
<%/vendorExtensions.x-vaadin-connect-subscribe%>
<%^vendorExtensions.x-vaadin-connect-subscribe%>
 return client.call(<%!
   %>'<%vendorExtensions.x-vaadin-connect-endpoint-name%>', <%!
   %>'<%vendorExtensions.x-vaadin-connect-method-name%>'<%!
   %><%^bodyParams%><%!
     %><%^authMethods%>, undefined<%/authMethods%><%!
   %><%/bodyParams%><%!
   %><%#bodyParams%>, {<%!
   %><%#each bodyParam.vendorExtensions.x-vaadin-connect-parameters%><%!
     %><%name%><%#if @last%><%else%>, <%/if%><%!
   %><%/each%><%!
   %>}<%/bodyParams%><%!
   %><%^authMethods%>, {requireCredentials: false}<%/authMethods%><%!
 %>);
<%/vendorExtensions.x-vaadin-connect-subscribe%>
}
<%={{ }}=%>
{{/operation}}
export {
  {{#operation}}
  _{{vendorExtensions.x-vaadin-connect-method-name}} as {{vendorExtensions.x-vaadin-connect-method-name}},
  {{/operation}}
};
{{/operations}}
