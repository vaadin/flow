<%
// The following events have a custom implementation below
events = events.filter((event) => 
    [
      'selected-items-changed',
      'sort-order-changed'
    ].indexOf(event.name) === -1);

// Disabling notify for `sortOrder`, because the 'sort-order-changed' event has a custom implmentation
publicProperties.find((property) => property.name === 'sortOrder').notify = false;

// The following properties have a custom implmentation below
publicProperties = publicProperties.filter((property) => 
    [
      'frozenColumns',
      'size'
    ].indexOf(property.name) === -1);


contentFor('imports', `
import java.util.ArrayList;
import java.util.List;
import elemental.json.impl.JreJsonFactory;
import elemental.json.impl.JreJsonObject;
`);


contentFor('classBodyStart', `
    // How the items dataSource function works:
    // - We only set the dataSource if items have not been set yet.
    // - when the grid needs more items, we save the request and the callback in the grid
    //   as grid.itemsParams and grid.itemsCallback
    // - we send a 'items-requested' event, so as the server can read grid.itemsParams
    //   compute the items to return, and execute the grid.itemsCallback
    // How reset grid works
    // - server can reset the grid calling the grid.reset function which calls the grid.refreshItems
    // How the _columns property works
    // - since server side cannot set functions, we make it send columns configuration to the '_columns'
    //   property instead of the real 'columns'
    // - _columns setter visit all the columns looking for a column.render object, and creates a custom
    //   column.renderer function
    // - column.render has 4 options: the initial html to add to the table.td, a css selector to get the
    //   content element, a \`js\` block exectuted to render the data, and a \`prejs\` block for configuring
    //   the element with events.

    private final static JreJsonFactory JRE_JSON_FACTORY = new JreJsonFactory();

    private JsonArray columns;

    public static class Column extends JreJsonObject {
        public Column() {
            super(JRE_JSON_FACTORY);
        }
        public Column setFlex(int v) {
            put("flex", v);
            return this;
        }
        public Column setMinWidth(int v) {
            put("minWidth", v);
            return this;
        }
        public Column setName(String v) {
            put("name", v);
            return this;
        }
        public Column setSortable(boolean v) {
            put("sortable", v);
            return this;
        }
        public Column setSortDirection(String v) {
            put("sortDirection", v);
            return this;
        }
        public Column setWidth(int v) {
            put("width", v);
            return this;
        }
        public Column setRenderer(Render v) {
            put("render", v);
            return this;
        }
    }

    public static class Render extends JreJsonObject {
        public Render() {
            super(JRE_JSON_FACTORY);
        }
        /**
         * The content HTML structure of the cell. If not provided you can use
         * the cell.element text.
         */
        public Render setHtml(String v) {
            put("html", v);
            return this;
        }
        /**
         * A custom JS block which will modify the cell when the data changes.
         * \`element\`, \`element.cell\` and \`grid\` variables are in its execution scope.
         * Example:  "element.textContent = '$' + element.cell.data"
         */
        public Render setDataJs(String v) {
            put("js", v);
            return this;
        }
        /**
         * A custom JS block which will be executed the cell when the data changes.
         * \`element\`, \`element.cell\`, and \`grid\` variables are in its execution scope.
         * Example:  element.addEventListener('click', function(e) {e.stopPropagation(); grid.fire('row-event', {index: element.cell.row.index})})"+
         */
        public Render setConfJs(String v) {
            put("prejs", v);
            return this;
        }
        /**
         * A css selector returning the element which will be passed to the JS block.
         * If not provided, it will be the cell.element.
         */
        public Render setSelector(String v) {
            put("selector", v);
            return this;
        }
    }

    public void setColumns(Column ...cols) {
        columns = Json.createArray();
        for (Column c : cols) {
            columns.set(columns.length(), c);
        }
        // Using _columns so as patched property configures renders
        getElement().setPropertyJson("_columns", columns);
    }

    private static PropertyDescriptor<Integer, Integer> FROZEN_COLUMNS = PropertyDescriptors
            .propertyWithDefault("frozenColumns", 0);
    public int getFrozenColumns() {
        return get(FROZEN_COLUMNS);
    }
    public void setFrozenColumns(int value) {
        set(FROZEN_COLUMNS, value);
    }

    public void setSize(int i) {
        getElement().setProperty("size", i);
    }
    public int getSize() {
        return this.getElement().getProperty("size", 0);
    }

    @DomEvent("items-requested")
    public static class ItemsRequestedEvent extends ComponentEvent<VaadinGrid> {
        public int index = 0;
        public int count = 0;
        private VaadinGrid grid;

        public ItemsRequestedEvent(VaadinGrid source, boolean fromClient,
                @EventData("element.itemsParams.index") int index,
                @EventData("element.itemsParams.count") int count ) {
            super(source, fromClient);
            this.grid = source;
            this.index = index;
            this.count = count;
        }

        public void callback(JsonArray items, int size) {
            UI.getCurrent().getPage().executeJavaScript("$0.itemsCallback($1, $2)", grid, items, size);
        }
    }
    public Registration addItemsRequestedListener(ComponentEventListener<ItemsRequestedEvent> listener) {
        return addListener(ItemsRequestedEvent.class, listener);
    }

    @DomEvent("selected-items-changed")
    public static class SelectedItemsChangedEvent extends ComponentEvent<VaadinGrid>  {
        public List<Integer> selected = new ArrayList<>();

        public SelectedItemsChangedEvent(VaadinGrid source, boolean fromClient,
                @EventData("element.selection.selected()")  JsonArray sel) {
            super(source, fromClient);

            for (int i = 0 ; i < sel.length(); i++) {
                selected.add((int)sel.getNumber(i));
            }
        }
    }
    public Registration addSelectedChangedListener(ComponentEventListener<SelectedItemsChangedEvent> listener) {
        return addListener(SelectedItemsChangedEvent.class, listener);
    }

    @DomEvent("sort-order-changed")
    public static class SortOrderChangedEvent extends ComponentEvent<VaadinGrid> {
        public int dir = 1;
        public int column = -1;

        public SortOrderChangedEvent(VaadinGrid source, boolean fromClient,
                @EventData("element.sortOrder[0].direction") String dir,
                @EventData("element.sortOrder[0].column") int column ) {
            super(source, fromClient);

            this.dir = "asc".equals(dir) ? 1 : -1;
            this.column = column;
        }
    }
    public Registration addSortOrderChangeListener(ComponentEventListener<SortOrderChangedEvent> listener) {
        return addListener(SortOrderChangedEvent.class, listener);
    }
`);


contentFor('jsMonkeyPatch', `
if (!$0.items) $0.items = function (params, callback) {
  if ($0.itemsCallback) return;
  $0.itemsParams = params;
  $0.itemsCallback = function(items, size) {
    callback(items, size);
    $0.itemsCallback = null;
  };
  $0.fire('items-requested');
};
var cols = $0._columns;
Object.defineProperty($0, '_columns', {
  set: function(arr) { 
    arr.forEach(function(o) {
      if(o.render) o.renderer = function(cell) {
        var first = !cell.element.hasChildNodes();
        if (first && o.render.html) cell.element.innerHTML = o.render.html;
        var elem = o.render.selector && cell.element.querySelector(o.render.selector) || cell.element;
        elem.cell = {index: cell.index, columnName: cell.columnName, data: cell.data, row: {index: cell.row.index, data: cell.row.data}};
        if (first && o.render.prejs) {window.eval.call(window,'(function (element, grid) {' + o.render.prejs + '})')(elem, $0);}
        if (o.render.js) window.eval.call(window,'(function (element, cell, grid) {' + o.render.js + '})')(elem, cell, $0);
      };
    });
    $0.columns = arr;
  }
});
$0._columns = cols;
$0.reset = function() {
  $0.refreshItems();
};
`);

-%>
<%- include('../element.java.ejs') -%>
