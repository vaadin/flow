<% event.supportedParams = (event.params || []).filter((param) => isTypeSupportedInProperties(param.type)) -%>
<% if (event.desc) { -%>
    /*
     * <%= indentLines(event.desc, '     * ') %>
     */
<% } -%>
    @DomEvent("<%= event.name %>")
    public static class <%= getJavaEventName(event.name) %> extends ComponentEvent<<%= name %>> {
<% event.supportedParams.forEach((param) => { -%>
        public <%= getJavaType(param.type) %> <%= _.camelCase(param.name) %>;
<% }) -%>
        public <%= getJavaEventName(event.name) %>(
                <%= name %> source,
                boolean fromClient<% 
event.supportedParams.forEach((param) => { %>,
                @EventData("<%= param.from || 'event' %>.<%= param.name %>") <%= getJavaType(param.type) %> <%= _.camelCase(param.name) -%>
<% }) %>
        ) {
            super(source, fromClient);
<% event.supportedParams.forEach((param) => { -%>
            this.<%= _.camelCase(param.name) %> = <%= _.camelCase(param.name) %>;
<% }) -%>
        }
<%
  // TODO: https://github.com/vaadin/hummingbird-polymer-components/issues/8
  event.supportedParams.forEach((param) => {
    if (param.name === 'value' && param.type === 'String') { -%>
        public Double asDouble() {
            return hasValue() ? Double.parseDouble(value) : null;
        }
        public Boolean asBoolean() {
            return hasValue() ? Boolean.parseBoolean(value) : null;
        }
        public Boolean hasValue() {
            return value != null && !value.isEmpty();
        }<%
    }
  })
-%>
    }
    <% if (isInterface) { %>default <% } %>public Registration add<%= getJavaEventName(event.name).replace(/Event$/, '') %>Listener(
            ComponentEventListener<<%= getJavaEventName(event.name) %>> listener) {
        return addListener(<%= getJavaEventName(event.name) %>.class, listener);
    }
