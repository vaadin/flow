/*
 * Copyright 2000-2018 Vaadin Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.vaadin.flow.component.polymertemplate;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.google.common.base.Predicates;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.ParserRunner;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.StaticSourceFile;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

import elemental.json.Json;
import elemental.json.JsonArray;
import elemental.json.JsonObject;
import elemental.json.JsonType;
import static elemental.json.JsonType.ARRAY;
import static elemental.json.JsonType.OBJECT;
import static elemental.json.JsonType.STRING;

/**
 * Parse statistics data provided by webpack.
 *
 * @see NpmTemplateParser
 *
 * @author Vaadin Ltd
 *
 */
public final class BundleParser {

    private static final String SOURCE = "source";
    private static final String NAME = "name";
    private static final String CHUNKS = "chunks";
    private static final String MODULES = "modules";

    private static final Pattern HASH_PATTERN = Pattern
            .compile("\"hash\"\\s*:\\s*\"([^\"]+)\"\\s*,");

    private static Config config = ParserRunner
            .createConfig(Config.LanguageMode.ECMASCRIPT6, null,
                    Config.StrictMode.STRICT);

    private static final String TEMPLATE_TAG_NAME = "template";

    private BundleParser() {
    }

    /**
     * Gets the hash from the string content of a webpack stats file.
     * It uses regex to avoid parsing the entire string into a json object.
     *
     * @param fileContents the content of the stats file
     * @return the hash
     */
    public static String getHashFromStatistics(String fileContents) {
        Matcher matcher = HASH_PATTERN.matcher(fileContents);
        return matcher.find() ? matcher.group(1) : "" + fileContents.length();
    }

    /**
     * Parses the content of the stats file to return a json object.
     *
     * @param fileContents the content of the stats file
     * @return a JsonObject with the stats
     */
    public static JsonObject parseJsonStatistics(String fileContents) {
        return Json.parse(fileContents);
    }

    /**
     * Get a module source from the statistics Json file generated by
     * webpack.
     *
     * @param fileName
     *            name of the file to get from the json
     * @param statistics
     *            statistics json as a JsonObject
     * @return JsonObject for the file statistic
     */
    public static String getSourceFromStatistics(String fileName,
            JsonObject statistics) {
        return getSourceFromObject(statistics, fileName);
    }

    /**
     * Get the template element for given statistics file object.
     *
     * @param name
     *            the file name of the template
     * @param statisticsJson
     *            webpack profile json object
     * @return template element for the sources of the given file sources
     */
    public static Element parseTemplateElement(String name, JsonObject statisticsJson) {
        return parseTemplateElement(name, statisticsJson.getString(SOURCE));
    }

    /**
     * Get the template element for the given polymer template source.
     *
     * @param fileName
     *         name of the handled file
     * @param source
     *         source js to get template element from
     * @return template element or {code null} if not found
     */
    public static Element parseTemplateElement(String fileName, String source) {

        ErrorReporter errorReporter = new SimpleErrorReporter();

        // parse a source file into an ast.
        SourceFile sourceFile = new SourceFile(fileName,
                StaticSourceFile.SourceKind.STRONG);

        ParserRunner.ParseResult parseResult = ParserRunner
                .parse(sourceFile, source, config, errorReporter);

        // run the visitor on the ast to extract the needed values.
        DependencyVisitor visitor = new DependencyVisitor();
        NodeUtil.visitPreOrder(parseResult.ast, visitor,
                Predicates.alwaysTrue());

        Document templateDocument;

        if(visitor.getterContent.containsKey(TEMPLATE_TAG_NAME)) {
            templateDocument = Jsoup.parse(visitor.getterContent.get(TEMPLATE_TAG_NAME));
        } else {
            templateDocument = new Document("");
        }

        Element template = templateDocument.createElement(TEMPLATE_TAG_NAME);

        templateDocument.body().getAllElements().stream()
                .filter(node -> !node.equals(templateDocument.body()))
                .forEach(template::appendChild);

        return template;
    }

    // From the statistics json eecursively go through all chunks and modules to
    // find the first module whose name matches the file name
    private static String getSourceFromObject(JsonObject module, String fileName) {
        String source = null;
        if (validKey(module, MODULES, ARRAY)) {
            source = getSourceFromArray(module.getArray(MODULES), fileName);
        }
        if (source == null && validKey(module, CHUNKS, ARRAY)) {
            source = getSourceFromArray(module.getArray(CHUNKS), fileName);
        }
        if (source == null && validKey(module, NAME, STRING) && validKey(module, SOURCE, STRING)) {
            String name = module.getString(NAME);

            // If the found module is
            if (name.endsWith("es5")) {
                return source;
            }

            // append `.js` extension if not yet as webpack does
            fileName = fileName.replaceFirst("(\\.js|)$", ".js");

            String alternativeName = fileName
                    // Replace frontend part since webpack entry-point is
                    // already in the frontend folder
                    .replaceFirst("^(./)frontend/", "$1")
                    // Replace the flow frontend protocol
                    .replaceFirst("^frontend://", ".");

            // Remove query-string used by webpack modules like babel (e.g ?babel-target=es6)
            name = name.replaceFirst("\\?.+$", "");

            // Do check on the original fileName and the alternative one
            if (name.endsWith(fileName) || name.endsWith(alternativeName)) {
                source = module.getString(SOURCE);
            }
        }
        return source;
    }

    // Visits all elements of a JsonArray and returns the first element with a valid source module
    private static String getSourceFromArray(JsonArray objects, String fileName) {
        String source = null;
        for (int i = 0; source == null && i < objects.length(); i++) {
            if (objects.get(i).getType().equals(OBJECT)) {
                source = getSourceFromObject(objects.get(i), fileName);
            }
        }
        return source;
    }

    private static boolean validKey(JsonObject o, String k, JsonType t) {
        boolean validKey = o != null && o.hasKey(k) && o.get(k).getType().equals(t);
        return validKey && (!t.equals(STRING) || !o.getString(k).isEmpty());
    }

    private static class DependencyVisitor implements NodeUtil.Visitor {

        private List<String> imports = new ArrayList<>();
        private List<String> getters = new ArrayList<>();

        Map<String, String> getterContent = new HashMap<>();

        @Override
        public void visit(Node node) {
            if (node != null) {
                switch (node.getToken()) {
                case IMPORT:
                    addImport(node);
                    break;
                case GETTER_DEF:
                    addGetter(node);
                    break;
                default:
                    break;
                }
            }
        }

        private void addGetter(Node node) {
            getters.add(node.getString());
            if (TEMPLATE_TAG_NAME.equals(node.getString())) {
                String content = getTextNode(node).getRawString();
                getterContent.put(node.getString(), content);
            }
        }

        private void addImport(Node node) {
            if (node.hasChildren()) {
                Node child = getTextNode(node);
                imports.add(child.getString());
            }
        }

        private Node getTextNode(Node node) {
            Node child = node.getFirstChild();
            while (child.getFirstChild() != null || child.getNext() != null) {
                if (child.getNext() == null) {
                    child = child.getFirstChild();
                } else {
                    child = child.getNext();
                }
            }
            return child;
        }
    }

}
