/**
 * NOTICE: this is an auto-generated file
 *
 * This file has been generated by the `flow:update-frontend` maven goal.
 * It's not overwritten when it already exists.
 */
const fs = require('fs');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const { BabelMultiTargetPlugin } = require('webpack-babel-multi-target-plugin');

const path = require('path');
const baseDir = path.resolve(__dirname);
// the folder of app resources (main.js and flow templates)
const frontendFolder = `${baseDir}/frontend`;
// the folder that java takes as webapp context
const webappFolder = `${baseDir}/{{OUTPUT_DIRECTORY}}`;

// public path for resources, must match flow that requests /build/index.js /build/stats.json
const build = 'build';
// folder for outputting stats.js, index.js bundle, etc.
const buildFolder = `${webappFolder}/${build}`;
// file which is used by flow to read templates for server `@Id` binding
const statsFile = `${buildFolder}/stats.json`;
// make sure that build folder exists before outputting anything
const mkdirp = require('mkdirp');
mkdirp(buildFolder);

module.exports = {
  mode: 'production',
  context: frontendFolder,
  entry: {
    index: '{{GENERATED_FLOW_IMPORTS}}'
  },

  output: {
    filename: `${build}/[name].js`,
    path: webappFolder
  },

  resolve: {
    alias: {
      Frontend: path.resolve(__dirname, 'frontend/')
    }
  },

  devServer: {
    // webpack-dev-server serves ./ ,  webpack-generated,  and java webapp
    contentBase: [webappFolder, 'src/main/webapp']
  },

  module: {
    rules: [
      { // Files that Babel has to transpile
        test: /\.js$/,
        use: [BabelMultiTargetPlugin.loader()]
      }
    ]
  },

  plugins: [
    // Transpile with babel, and produce different bundles per browser
    new BabelMultiTargetPlugin({
      babel: {
        presetOptions: {
          useBuiltIns: false // polyfills are provided from webcomponents-loader.js
        }
      },
      targets: {
        'es6': { // Evergreen browsers
          browsers: [
            // It guarantees that babel outputs pure es6 in bundle and in stats.json
            // In the case of browsers no supporting certain feature it will be
            // covered by the webcomponents-loader.js
            'last 1 Chrome major versions'
          ],
        },
        'es5': { // IE11
          browsers: [
            'ie 11'
          ],
          tagAssetsWithKey: true, // append a suffix to the file name
        }
      }
    }),

    // Generates the stats file for flow `@Id` binding.
    function (compiler) {
      compiler.plugin('after-emit', function (compilation, done) {
        console.log("Emitted " + statsFile)
        fs.writeFile(statsFile, JSON.stringify(compilation.getStats().toJson(), null, 1), done);
      });
    },

    // Copy webcomponents polyfills. They are not bundled because they
    // have its own loader based on browser quirks.
    new CopyWebpackPlugin([{
      from: `${baseDir}/node_modules/@webcomponents/webcomponentsjs`,
      to: `${build}/webcomponentsjs/`
    }]),
  ]
};
