{
  "name": "Vaadin.SplitLayoutElement",
  "tag": "vaadin-split-layout",
  "baseUrl": "vaadin-split-layout/vaadin-split-layout.html",
  "version": "3.0.0",
  "properties": [
    {
      "name": "vertical",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Change the split layout to vertical\n             "
    }
  ],
  "methods": [],
  "events": [
    {
      "name": "iron-resize",
      "description": "iron-resize",
      "properties": []
    }
  ],
  "slots": [
    "primary",
    "secondary"
  ],
  "behaviors": [],
  "mixins": [],
  "description": "`<vaadin-split-layout>` is a Polymer element implementing a split layout for two\ncontent elements with a draggable splitter between them.\n\n```html\n<vaadin-split-layout>\n  <div>First content element</div>\n  <div>Second content element</div>\n</vaadin-split-layout>\n```\n\n### Horizontal and Vertical Layouts\n\nBy default, the split is horizontal, meaning that the content elements are\npositioned side by side in a flex container with a horizontal layout.\n\nYou can change the split mode to vertical by adding the `vertical` attribute:\n\n```html\n<vaadin-split-layout vertical>\n  <div>Content on the top</div>\n  <div>Content on the bottom</div>\n</vaadin-split-layout>\n```\n\n### Layouts Combination\n\nFor the layout contents, we usually use `<div>` elements in the examples,\nalthough you can use any other elements as well.\n\nFor instance, in order to have a nested vertical split layout inside a\nhorizontal one, you can include `<vaadin-split-layout>` as a content element\ninside another split layout:\n\n```html\n<vaadin-split-layout>\n  <div>First content element</div>\n  <vaadin-split-layout vertical>\n    <div>Second content element</div>\n    <div>Third content element</div>\n  </vaadin-split-layout>\n</vaadin-split-layout>\n```\n\nYou can also trigger the vertical mode by setting the property:\n`splitLayout.vertical = true;`.\n\n### Split Layout Element Height\n\n`<vaadin-split-layout>` element itself is a flex container. It does not inherit\nthe parent height by default, but rather sets its height depending on the\ncontent.\n\nYou can use CSS to set the fixed height for the split layout, as usual with any\nblock element:\n\n```html\n<vaadin-split-layout style=\"height: 200px;\">\n  <div>First content element</div>\n  <div>Second content element</div>\n</vaadin-split-layout>\n```\n\nIt is possible to define percentage height as well. Note that you have to set\nthe parent height in order to make percentages work correctly. In the following\nexample, the `<body>` is resized to fill the entire viewport, and the\n`<vaadin-split-layout>` element is set to take 100% height of the `<body>`:\n\n```html\n<body style=\"height: 100vh; margin: 0;\">\n  <vaadin-split-layout style=\"height: 100%;\">\n    <div>First</div>\n    <div>Second</div>\n  </vaadin-split-layout>\n</body>\n```\n\nAlternatively, you can use a flexbox layout to make `<vaadin-split-layout>`\nfill up the parent:\n\n```html\n<body style=\"height: 100vh; margin: 0; display: flex;\">\n  <vaadin-split-layout style=\"flex: 1;\">\n    <div>First</div>\n    <div>Second</div>\n  </vaadin-split-layout>\n</body>\n```\n\n### Initial Splitter Position\n\nThe initial splitter position is determined from the sizes of the content elements\ninside the split layout. Therefore, changing `width` on the content elements\naffects the initial splitter position for the horizontal layouts, while `height`\naffects the vertical ones.\n\nNote that when the total size of the content elements does not fit the layout,\nthe content elements are scaled proportionally.\n\nWhen setting initial sizes with relative units, such as percentages, it is\nrecommended to assing the size for both content elements:\n\n```html\n<vaadin-split-layout>\n  <div style=\"width: 75%;\">Three fourths</div>\n  <div style=\"width: 25%;\">One fourth</div>\n</vaadin-split-layout>\n```\n\n### Size Limits\n\nThe `min-width`/`min-height`, and `max-width`/`max-height` CSS size values\nfor the content elements are respected and used to limit the splitter position\nwhen it is dragged.\n\nIt is preferred to set the limits only for a single content element, in order\nto avoid size conflicts:\n\n```html\n<vaadin-split-layout>\n  <div style=\"min-width: 50px; max-width: 150px;\">First</div>\n  <div>Second</div>\n</vaadin-split-layout>\n```\n\n### Resize Notification\n\nThis element implements `IronResizableBehavior` to notify the nested resizables\nwhen the splitter is dragged. In order to define a resizable and receive that\nnotification in a nested element, include `IronResizableBehavior` and listen\nfor the `iron-resize` event.\n\n### Styling\n\nThe following shadow DOM parts are available for styling:\n\nPart name | Description | Theme for Element\n----------------|----------------|----------------\n`splitter` | Split element | vaadin-split-layout\n`handle` | The handle of the splitter | vaadin-split-layout"
}
