{
  "name": "Vaadin.ComboBoxOverlayElement",
  "tag": "vaadin-combo-box-dropdown-wrapper",
  "baseUrl": "vaadin-combo-box/vaadin-combo-box-dropdown-wrapper.html",
  "version": "3.0.0",
  "properties": [
    {
      "name": "touchDevice",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the device supports touch events.\n           "
    },
    {
      "name": "opened",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "loading",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "`true` when new items are being loaded.\n           "
    },
    {
      "name": "verticalOffset",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "Vertical offset for the overlay position.\n           "
    }
  ],
  "methods": [
    {
      "name": "attributeChangedCallback",
      "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\nproperties.",
      "parameters": [
        {
          "name": "name",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Name of attribute."
        },
        {
          "name": "old",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Old value of attribute."
        },
        {
          "name": "value",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Current value of attribute."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "setProperties",
      "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
      "parameters": [
        {
          "name": "props",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
        },
        {
          "name": "setReadOnly",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "linkPaths",
      "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
      "parameters": [
        {
          "name": "to",
          "type": [
            "STRING",
            "OBJECT",
            "OBJECT"
          ],
          "objectType": [],
          "description": "Target path to link."
        },
        {
          "name": "from",
          "type": [
            "STRING",
            "OBJECT",
            "OBJECT"
          ],
          "objectType": [],
          "description": "Source path to link."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "unlinkPaths",
      "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
      "parameters": [
        {
          "name": "path",
          "type": [
            "STRING",
            "OBJECT",
            "OBJECT"
          ],
          "objectType": [],
          "description": "Target path to unlink."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "notifySplices",
      "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
      "parameters": [
        {
          "name": "path",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Path that should be notified."
        },
        {
          "name": "splices",
          "type": [
            "ARRAY"
          ],
          "objectType": [],
          "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "get",
      "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
      "parameters": [
        {
          "name": "path",
          "type": [
            "STRING",
            "OBJECT",
            "OBJECT"
          ],
          "objectType": [],
          "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
        },
        {
          "name": "root",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Root object from which the path is evaluated."
        }
      ],
      "returns": "OBJECT"
    },
    {
      "name": "set",
      "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
      "parameters": [
        {
          "name": "path",
          "type": [
            "STRING",
            "OBJECT",
            "OBJECT"
          ],
          "objectType": [],
          "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
        },
        {
          "name": "value",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Value to set at the specified path."
        },
        {
          "name": "root",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "push",
      "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
      "parameters": [
        {
          "name": "path",
          "type": [
            "STRING",
            "OBJECT",
            "OBJECT"
          ],
          "objectType": [],
          "description": "Path to array."
        },
        {
          "name": "...items",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "NUMBER"
    },
    {
      "name": "pop",
      "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
      "parameters": [
        {
          "name": "path",
          "type": [
            "STRING",
            "OBJECT",
            "OBJECT"
          ],
          "objectType": [],
          "description": "Path to array."
        }
      ],
      "returns": "OBJECT"
    },
    {
      "name": "splice",
      "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
      "parameters": [
        {
          "name": "path",
          "type": [
            "STRING",
            "OBJECT",
            "OBJECT"
          ],
          "objectType": [],
          "description": "Path to array."
        },
        {
          "name": "start",
          "type": [
            "NUMBER"
          ],
          "objectType": [],
          "description": "Index from which to start removing/inserting."
        },
        {
          "name": "deleteCount",
          "type": [
            "NUMBER"
          ],
          "objectType": [],
          "description": "Number of items to remove."
        },
        {
          "name": "...items",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "ARRAY"
    },
    {
      "name": "shift",
      "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
      "parameters": [
        {
          "name": "path",
          "type": [
            "STRING",
            "OBJECT",
            "OBJECT"
          ],
          "objectType": [],
          "description": "Path to array."
        }
      ],
      "returns": "OBJECT"
    },
    {
      "name": "unshift",
      "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
      "parameters": [
        {
          "name": "path",
          "type": [
            "STRING",
            "OBJECT",
            "OBJECT"
          ],
          "objectType": [],
          "description": "Path to array."
        },
        {
          "name": "...items",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "NUMBER"
    },
    {
      "name": "notifyPath",
      "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
      "parameters": [
        {
          "name": "path",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Path that should be notified."
        },
        {
          "name": "value",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Value at the path (optional)."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "connectedCallback",
      "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "disconnectedCallback",
      "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.\n       ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "updateStyles",
      "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
      "parameters": [
        {
          "name": "properties",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Bag of custom property key/values to\n  apply to this element."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "resolveUrl",
      "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
      "parameters": [
        {
          "name": "url",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "URL to resolve."
        },
        {
          "name": "base",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
        }
      ],
      "returns": "STRING"
    },
    {
      "name": "indexOfLabel",
      "description": "Gets the index of the item with the provided label.",
      "parameters": [
        {
          "name": "label",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "NUMBER"
    },
    {
      "name": "getItemLabel",
      "description": "Gets the label string for the item based on the `_itemLabelPath`.",
      "parameters": [
        {
          "name": "item",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "STRING"
    },
    {
      "name": "ensureItemsRendered",
      "description": "",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "adjustScrollPosition",
      "description": "",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "updateViewportBoundaries",
      "description": "",
      "parameters": [],
      "returns": "UNDEFINED"
    }
  ],
  "events": [],
  "slots": [],
  "behaviors": [],
  "mixins": [],
  "description": "Element for internal use only."
}
