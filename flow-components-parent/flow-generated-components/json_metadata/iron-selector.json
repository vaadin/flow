{
  "name": "iron-selector",
  "tag": "iron-selector",
  "baseUrl": "iron-selector/iron-selector.html",
  "version": "2.0.0",
  "properties": [
    {
      "name": "attrForSelected",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "If you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)\n       "
    },
    {
      "name": "selected",
      "type": [
        "STRING",
        "NUMBER"
      ],
      "objectType": [],
      "description": "Gets or sets the selected element. The default is to use the index of the item."
    },
    {
      "name": "selectedItem",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "Returns the currently selected item.",
      "readOnly": true
    },
    {
      "name": "activateEvent",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The event that fires from items when they are selected. Selectable\nwill listen for this event from items and update the selection state.\nSet to empty string to listen to no events.\n       "
    },
    {
      "name": "selectable",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "This is a CSS selector string.  If this is set, only items that match the CSS selector\nare selectable.\n       "
    },
    {
      "name": "selectedClass",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The class to set on elements when selected.\n       "
    },
    {
      "name": "selectedAttribute",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The attribute to set on elements when selected.\n       "
    },
    {
      "name": "fallbackSelection",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Default fallback if the selection based on selected with `attrForSelected`\nis not found.\n       "
    },
    {
      "name": "items",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "The list of items from which a selection can be made.\n       ",
      "readOnly": true
    },
    {
      "name": "multi",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, multiple selections are allowed.\n       "
    },
    {
      "name": "selectedValues",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "Gets or sets the selected elements. This is used instead of `selected` when `multi`\nis true.\n       "
    },
    {
      "name": "selectedItems",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "Returns an array of currently selected items.\n       ",
      "readOnly": true
    }
  ],
  "methods": [
    {
      "name": "indexOf",
      "description": "Returns the index of the given item.",
      "parameters": [
        {
          "name": "item",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "OBJECT"
    },
    {
      "name": "select",
      "description": "Selects the given value. If the `multi` property is true, then the selected state of the\n`value` will be toggled; otherwise the `value` will be selected.",
      "parameters": [
        {
          "name": "value",
          "type": [
            "STRING",
            "NUMBER"
          ],
          "objectType": [],
          "description": "the value to select."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "selectPrevious",
      "description": "Selects the previous item.",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "selectNext",
      "description": "Selects the next item.",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "selectIndex",
      "description": "Selects the item at the given index.",
      "parameters": [
        {
          "name": "index",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "forceSynchronousItemUpdate",
      "description": "Force a synchronous update of the `items` property.\n\nNOTE: Consider listening for the `iron-items-changed` event to respond to\nupdates to the set of selectable items after updates to the DOM list and\nselection state have been made.\n\nWARNING: If you are using this method, you should probably consider an\nalternate approach. Synchronously querying for items is potentially\nslow for many use cases. The `items` property will update asynchronously\non its own to reflect selectable items in the DOM.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "multiChanged",
      "description": "",
      "parameters": [
        {
          "name": "multi",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    }
  ],
  "events": [
    {
      "name": "iron-activate",
      "description": "iron-activate",
      "properties": []
    },
    {
      "name": "iron-deselect",
      "description": "iron-deselect",
      "properties": []
    },
    {
      "name": "iron-items-changed",
      "description": "iron-items-changed",
      "properties": []
    },
    {
      "name": "iron-select",
      "description": "iron-select",
      "properties": []
    },
    {
      "name": "selected-changed",
      "description": "Fired when the `selected` property changes.",
      "properties": []
    },
    {
      "name": "selected-item-changed",
      "description": "Fired when the `selectedItem` property changes.",
      "properties": []
    },
    {
      "name": "items-changed",
      "description": "Fired when the `items` property changes.",
      "properties": []
    },
    {
      "name": "selected-values-changed",
      "description": "Fired when the `selectedValues` property changes.",
      "properties": []
    },
    {
      "name": "selected-items-changed",
      "description": "Fired when the `selectedItems` property changes.",
      "properties": []
    }
  ],
  "slots": [],
  "behaviors": [
    "Polymer.IronMultiSelectableBehavior"
  ],
  "mixins": [],
  "description": "  `iron-selector` is an element which can be used to manage a list of elements\n  that can be selected.  Tapping on the item will make the item selected.  The `selected` indicates\n  which item is being selected.  The default is to use the index of the item.\n\n  Example:\n\n      <iron-selector selected=\"0\">\n        <div>Item 1</div>\n        <div>Item 2</div>\n        <div>Item 3</div>\n      </iron-selector>\n\n  If you want to use the attribute value of an element for `selected` instead of the index,\n  set `attrForSelected` to the name of the attribute.  For example, if you want to select item by\n  `name`, set `attrForSelected` to `name`.\n\n  Example:\n\n      <iron-selector attr-for-selected=\"name\" selected=\"foo\">\n        <div name=\"foo\">Foo</div>\n        <div name=\"bar\">Bar</div>\n        <div name=\"zot\">Zot</div>\n      </iron-selector>\n\n  You can specify a default fallback with `fallbackSelection` in case the `selected` attribute does\n  not match the `attrForSelected` attribute of any elements.\n\n  Example:\n\n        <iron-selector attr-for-selected=\"name\" selected=\"non-existing\"\n                       fallback-selection=\"default\">\n          <div name=\"foo\">Foo</div>\n          <div name=\"bar\">Bar</div>\n          <div name=\"default\">Default</div>\n        </iron-selector>\n\n  Note: When the selector is multi, the selection will set to `fallbackSelection` iff\n  the number of matching elements is zero.\n\n  `iron-selector` is not styled. Use the `iron-selected` CSS class to style the selected element.\n\n  Example:\n\n      <style>\n        .iron-selected {\n          background: #eee;\n        }\n      </style>\n\n      ...\n\n      <iron-selector selected=\"0\">\n        <div>Item 1</div>\n        <div>Item 2</div>\n        <div>Item 3</div>\n      </iron-selector>\n\n  "
}
