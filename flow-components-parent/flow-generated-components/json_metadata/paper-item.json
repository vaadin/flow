{
  "name": "paper-item",
  "tag": "paper-item",
  "baseUrl": "paper-item/paper-item.html",
  "version": "2.0.0",
  "properties": [
    {
      "name": "keyEventTarget",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
    },
    {
      "name": "stopKeyboardEventPropagation",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
    },
    {
      "name": "keyBindings",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "pressed",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the user is currently holding down the button.\n       ",
      "readOnly": true
    },
    {
      "name": "toggles",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.\n       "
    },
    {
      "name": "active",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the button is a toggle and is currently in the active state.\n       "
    },
    {
      "name": "pointerDown",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       ",
      "readOnly": true
    },
    {
      "name": "receivedFocusFromKeyboard",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the input device that caused the element to receive focus\nwas a keyboard.\n       ",
      "readOnly": true
    },
    {
      "name": "ariaActiveAttribute",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.\n       "
    },
    {
      "name": "focused",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the element currently has focus.\n       ",
      "readOnly": true
    },
    {
      "name": "disabled",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the user cannot interact with this element.\n       "
    }
  ],
  "methods": [
    {
      "name": "addOwnKeyBinding",
      "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
      "parameters": [
        {
          "name": "eventString",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "handlerName",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "removeOwnKeyBindings",
      "description": "When called, will remove all imperatively-added key bindings.\n       ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "keyboardEventMatchesKeys",
      "description": "Returns true if a keyboard event matches `eventString`.",
      "parameters": [
        {
          "name": "event",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "eventString",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "BOOLEAN"
    }
  ],
  "events": [
    {
      "name": "active-changed",
      "description": "Fired when the `active` property changes.",
      "properties": []
    },
    {
      "name": "focused-changed",
      "description": "Fired when the `focused` property changes.",
      "properties": []
    },
    {
      "name": "disabled-changed",
      "description": "Fired when the `disabled` property changes.",
      "properties": []
    }
  ],
  "slots": [
    ""
  ],
  "behaviors": [
    "Polymer.PaperItemBehavior"
  ],
  "mixins": [],
  "description": "Material design: [Lists](https://www.google.com/design/spec/components/lists.html)\n\n`<paper-item>` is an interactive list item. By default, it is a horizontal flexbox.\n\n    <paper-item>Item</paper-item>\n\nUse this element with `<paper-item-body>` to make Material Design styled two-line and three-line\nitems.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n      <iron-icon icon=\"warning\"></iron-icon>\n    </paper-item>\n\nTo use `paper-item` as a link, wrap it in an anchor tag. Since `paper-item` will\nalready receive focus, you may want to prevent the anchor tag from receiving\nfocus as well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org/\" tabindex=\"-1\">\n      <paper-item raised>Polymer Project</paper-item>\n    </a>\n\nIf you are concerned about performance and want to use `paper-item` in a `paper-listbox`\nwith many items, you can just use a native `button` with the `paper-item` class\napplied (provided you have correctly included the shared styles):\n\n    <style is=\"custom-style\" include=\"paper-item-shared-styles\"></style>\n\n    <paper-listbox>\n      <button class=\"paper-item\" role=\"option\">Inbox</button>\n      <button class=\"paper-item\" role=\"option\">Starred</button>\n      <button class=\"paper-item\" role=\"option\">Sent mail</button>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property               | Description                                  | Default\n------------------------------|----------------------------------------------|----------\n`--paper-item-min-height`     | Minimum height of the item                   | `48px`\n`--paper-item`                | Mixin applied to the item                    | `{}`\n`--paper-item-selected-weight`| The font weight of a selected item           | `bold`\n`--paper-item-selected`       | Mixin applied to selected paper-items        | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items           | `--disabled-text-color`\n`--paper-item-disabled`       | Mixin applied to disabled paper-items        | `{}`\n`--paper-item-focused`        | Mixin applied to focused paper-items         | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n### Accessibility\n\nThis element has `role=\"listitem\"` by default. Depending on usage, it may be more appropriate to set\n`role=\"menuitem\"`, `role=\"menuitemcheckbox\"` or `role=\"menuitemradio\"`.\n\n    <paper-item role=\"menuitemcheckbox\">\n      <paper-item-body>\n        Show your status\n      </paper-item-body>\n      <paper-checkbox></paper-checkbox>\n    </paper-item>"
}
