{
  "name": "iron-dropdown",
  "tag": "iron-dropdown",
  "baseUrl": "iron-dropdown/iron-dropdown.html",
  "version": "2.0.0",
  "properties": [
    {
      "name": "focused",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the element currently has focus.\n       ",
      "readOnly": true
    },
    {
      "name": "disabled",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the user cannot interact with this element.\n       "
    },
    {
      "name": "keyEventTarget",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
    },
    {
      "name": "stopKeyboardEventPropagation",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
    },
    {
      "name": "keyBindings",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
    },
    {
      "name": "sizingTarget",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The element that will receive a `max-height`/`width`. By default it is the same as `this`,\nbut it can be set to a child element. This is useful, for example, for implementing a\nscrolling region inside the element."
    },
    {
      "name": "fitInto",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The element to fit `this` into.\n       "
    },
    {
      "name": "noOverlap",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Will position the element around the positionTarget without overlapping it.\n       "
    },
    {
      "name": "positionTarget",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The element that should be used to position the element. If not set, it will\ndefault to the parent node."
    },
    {
      "name": "horizontalAlign",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The orientation against which to align the dropdown content\nhorizontally relative to the dropdown trigger.\nOverridden from `Polymer.IronFitBehavior`.\n           "
    },
    {
      "name": "verticalAlign",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The orientation against which to align the dropdown content\nvertically relative to the dropdown trigger.\nOverridden from `Polymer.IronFitBehavior`.\n           "
    },
    {
      "name": "dynamicAlign",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as preferred alignment\nand if there's not enough space, it will pick the values which minimize the cropping.\n       "
    },
    {
      "name": "horizontalOffset",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\", this offset will increase or decrease\nthe distance to the left side of the screen: a negative offset will\nmove the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.\n       "
    },
    {
      "name": "verticalOffset",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\", this offset will increase or decrease\nthe distance to the top side of the screen: a negative offset will\nmove the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.\n       "
    },
    {
      "name": "autoFitOnAttach",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to auto-fit on attach.\n       "
    },
    {
      "name": "opened",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the overlay is currently displayed.\n       "
    },
    {
      "name": "canceled",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the overlay was canceled when it was last closed.\n       ",
      "readOnly": true
    },
    {
      "name": "withBackdrop",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.\n       "
    },
    {
      "name": "noAutoFocus",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable auto-focusing the overlay or child nodes with\nthe `autofocus` attribute` when the overlay is opened.\n       "
    },
    {
      "name": "noCancelOnEscKey",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable canceling the overlay with the ESC key.\n       "
    },
    {
      "name": "noCancelOnOutsideClick",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable canceling the overlay by clicking outside it.\n       "
    },
    {
      "name": "closingReason",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "Contains the reason(s) this overlay was last closed (see `iron-overlay-closed`).\n`IronOverlayBehavior` provides the `canceled` reason; implementers of the\nbehavior can provide other reasons in addition to `canceled`.\n       "
    },
    {
      "name": "restoreFocusOnClose",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to enable restoring of focus when overlay is closed.\n       "
    },
    {
      "name": "alwaysOnTop",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to keep overlay always on top.\n       "
    },
    {
      "name": "animationConfig",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "Animation configuration. See README for more info.\n       "
    },
    {
      "name": "entryAnimation",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Convenience property for setting an 'entry' animation. Do not set `animationConfig.entry`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
    },
    {
      "name": "exitAnimation",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Convenience property for setting an 'exit' animation. Do not set `animationConfig.exit`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
    },
    {
      "name": "openAnimationConfig",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "An animation config. If provided, this will be used to animate the\nopening of the dropdown. Pass an Array for multiple animations.\nSee `neon-animation` documentation for more animation configuration\ndetails.\n           "
    },
    {
      "name": "closeAnimationConfig",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "An animation config. If provided, this will be used to animate the\nclosing of the dropdown. Pass an Array for multiple animations.\nSee `neon-animation` documentation for more animation configuration\ndetails.\n           "
    },
    {
      "name": "focusTarget",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "If provided, this will be the element that will be focused when\nthe dropdown opens.\n           "
    },
    {
      "name": "noAnimations",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable animations when opening and closing the\ndropdown.\n           "
    },
    {
      "name": "allowOutsideScroll",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.\n           "
    },
    {
      "name": "containedElement",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The element that is contained by the dropdown, if any.\n         "
    }
  ],
  "methods": [
    {
      "name": "addOwnKeyBinding",
      "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
      "parameters": [
        {
          "name": "eventString",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "handlerName",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "removeOwnKeyBindings",
      "description": "When called, will remove all imperatively-added key bindings.\n       ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "keyboardEventMatchesKeys",
      "description": "Returns true if a keyboard event matches `eventString`.",
      "parameters": [
        {
          "name": "event",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "eventString",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "BOOLEAN"
    },
    {
      "name": "fit",
      "description": "Positions and fits the element into the `fitInto` element.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "resetFit",
      "description": "Resets the target element's position and size constraints, and clear\nthe memoized data.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "refit",
      "description": "Equivalent to calling `resetFit()` and `fit()`. Useful to call this after\nthe element or the `fitInto` element has been resized, or if any of the\npositioning properties (e.g. `horizontalAlign, verticalAlign`) is updated.\nIt preserves the scroll position of the sizingTarget.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "position",
      "description": "Positions the element according to `horizontalAlign, verticalAlign`.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "constrain",
      "description": "Constrains the size of the element to `fitInto` by setting `max-height`\nand/or `max-width`.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "center",
      "description": "Centers horizontally and vertically if not already positioned. This also sets\n`position:fixed`.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "notifyResize",
      "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "assignParentResizable",
      "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     ",
      "parameters": [
        {
          "name": "parentResizable",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "stopResizeNotificationsFor",
      "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     ",
      "parameters": [
        {
          "name": "target",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "resizerShouldNotify",
      "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
      "parameters": [
        {
          "name": "element",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
        }
      ],
      "returns": "BOOLEAN"
    },
    {
      "name": "backdropElement",
      "description": "The backdrop element.",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "toggle",
      "description": "Toggle the opened state of the overlay.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "open",
      "description": "Open the overlay.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "close",
      "description": "Close the overlay.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "cancel",
      "description": "Cancels the overlay.",
      "parameters": [
        {
          "name": "event",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "The original event"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "invalidateTabbables",
      "description": "Invalidates the cached tabbable nodes. To be called when any of the focusable\ncontent changes (e.g. a button is disabled).\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "getAnimationConfig",
      "description": "An element implementing `Polymer.NeonAnimationRunnerBehavior` calls this method to configure\nan animation with an optional type. Elements implementing `Polymer.NeonAnimatableBehavior`\nshould define the property `animationConfig`, which is either a configuration object\nor a map of animation type to array of configuration objects.\n     ",
      "parameters": [
        {
          "name": "type",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "playAnimation",
      "description": "Plays an animation with an optional `type`.",
      "parameters": [
        {
          "name": "type",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "cookie",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "cancelAnimation",
      "description": "Cancels the currently running animations.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    }
  ],
  "events": [
    {
      "name": "focused-changed",
      "description": "Fired when the `focused` property changes.",
      "properties": []
    },
    {
      "name": "disabled-changed",
      "description": "Fired when the `disabled` property changes.",
      "properties": []
    },
    {
      "name": "horizontal-offset-changed",
      "description": "Fired when the `horizontalOffset` property changes.",
      "properties": []
    },
    {
      "name": "vertical-offset-changed",
      "description": "Fired when the `verticalOffset` property changes.",
      "properties": []
    },
    {
      "name": "opened-changed",
      "description": "Fired when the `opened` property changes.",
      "properties": []
    },
    {
      "name": "iron-overlay-canceled",
      "description": "iron-overlay-canceled",
      "properties": []
    },
    {
      "name": "iron-overlay-closed",
      "description": "iron-overlay-closed",
      "properties": []
    },
    {
      "name": "iron-overlay-opened",
      "description": "iron-overlay-opened",
      "properties": []
    }
  ],
  "slots": [
    "dropdown-content"
  ],
  "behaviors": [
    "Polymer.IronControlState",
    "Polymer.IronA11yKeysBehavior",
    "Polymer.IronOverlayBehavior",
    "Polymer.NeonAnimationRunnerBehavior"
  ],
  "mixins": [],
  "description": "`<iron-dropdown>` is a generalized element that is useful when you have\nhidden content (`dropdown-content`) that is revealed due to some change in\nstate that should cause it to do so.\n\nNote that this is a low-level element intended to be used as part of other\ncomposite elements that cause dropdowns to be revealed.\n\nExamples of elements that might be implemented using an `iron-dropdown`\ninclude comboboxes, menubuttons, selects. The list goes on.\n\nThe `<iron-dropdown>` element exposes attributes that allow the position\nof the `dropdown-content` relative to the `dropdown-trigger` to be\nconfigured.\n\n    <iron-dropdown horizontal-align=\"right\" vertical-align=\"top\">\n      <div slot=\"dropdown-content\">Hello!</div>\n    </iron-dropdown>\n\nIn the above example, the `<div>` assigned to the `dropdown-content` slot will be\nhidden until the dropdown element has `opened` set to true, or when the `open`\nmethod is called on the element."
}
