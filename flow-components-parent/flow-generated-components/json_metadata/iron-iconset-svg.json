{
  "name": "iron-iconset-svg",
  "tag": "iron-iconset-svg",
  "baseUrl": "iron-iconset-svg/iron-iconset-svg.html",
  "version": "2.0.1",
  "properties": [
    {
      "name": "name",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The name of the iconset.\n       "
    },
    {
      "name": "size",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "The size of an individual icon. Note that icons must be square.\n       "
    },
    {
      "name": "rtlMirroring",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to enable mirroring of icons where specified when they are\nstamped. Icons that should be mirrored should be decorated with a\n`mirror-in-rtl` attribute.\n\nNOTE: For performance reasons, direction will be resolved once per\ndocument per iconset, so moving icons in and out of RTL subtrees will\nnot cause their mirrored state to change.\n       "
    }
  ],
  "methods": [
    {
      "name": "getIconNames",
      "description": "Construct an array of all icon names in this iconset.",
      "parameters": [],
      "returns": "OBJECT"
    },
    {
      "name": "applyIcon",
      "description": "Applies an icon to the given element.\n\nAn svg icon is prepended to the element's shadowRoot if it exists,\notherwise to the element itself.\n\nIf RTL mirroring is enabled, and the icon is marked to be mirrored in\nRTL, the element will be tested (once and only once ever for each\niconset) to determine the direction of the subtree the element is in.\nThis direction will apply to all future icon applications, although only\nicons marked to be mirrored will be affected.",
      "parameters": [
        {
          "name": "element",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Element to which the icon is applied."
        },
        {
          "name": "iconName",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Name of the icon to apply."
        }
      ],
      "returns": "OBJECT"
    },
    {
      "name": "removeIcon",
      "description": "Remove an icon from the given element by undoing the changes effected\nby `applyIcon`.",
      "parameters": [
        {
          "name": "element",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "The element from which the icon is removed."
        }
      ],
      "returns": "UNDEFINED"
    }
  ],
  "events": [],
  "slots": [],
  "behaviors": [],
  "mixins": [],
  "description": "The `iron-iconset-svg` element allows users to define their own icon sets\nthat contain svg icons. The svg icon elements should be children of the\n`iron-iconset-svg` element. Multiple icons should be given distinct id's.\n\nUsing svg elements to create icons has a few advantages over traditional\nbitmap graphics like jpg or png. Icons that use svg are vector based so\nthey are resolution independent and should look good on any device. They\nare stylable via css. Icons can be themed, colorized, and even animated.\n\nExample:\n\n    <iron-iconset-svg name=\"my-svg-icons\" size=\"24\">\n      <svg>\n        <defs>\n          <g id=\"shape\">\n            <rect x=\"12\" y=\"0\" width=\"12\" height=\"24\" />\n            <circle cx=\"12\" cy=\"12\" r=\"12\" />\n          </g>\n        </defs>\n      </svg>\n    </iron-iconset-svg>\n\nThis will automatically register the icon set \"my-svg-icons\" to the iconset\ndatabase.  To use these icons from within another element, make a\n`iron-iconset` element and call the `byId` method\nto retrieve a given iconset. To apply a particular icon inside an\nelement use the `applyIcon` method. For example:\n\n    iconset.applyIcon(iconNode, 'car');"
}
