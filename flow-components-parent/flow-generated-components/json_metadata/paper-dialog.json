{
  "name": "paper-dialog",
  "tag": "paper-dialog",
  "baseUrl": "paper-dialog/paper-dialog.html",
  "version": "2.0.0",
  "properties": [
    {
      "name": "sizingTarget",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The element that will receive a `max-height`/`width`. By default it is the same as `this`,\nbut it can be set to a child element. This is useful, for example, for implementing a\nscrolling region inside the element."
    },
    {
      "name": "fitInto",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The element to fit `this` into.\n       "
    },
    {
      "name": "noOverlap",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Will position the element around the positionTarget without overlapping it.\n       "
    },
    {
      "name": "positionTarget",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The element that should be used to position the element. If not set, it will\ndefault to the parent node."
    },
    {
      "name": "horizontalAlign",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\", \"auto\".\n       "
    },
    {
      "name": "verticalAlign",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\", \"auto\".\n       "
    },
    {
      "name": "dynamicAlign",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as preferred alignment\nand if there's not enough space, it will pick the values which minimize the cropping.\n       "
    },
    {
      "name": "horizontalOffset",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\", this offset will increase or decrease\nthe distance to the left side of the screen: a negative offset will\nmove the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.\n       "
    },
    {
      "name": "verticalOffset",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\", this offset will increase or decrease\nthe distance to the top side of the screen: a negative offset will\nmove the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.\n       "
    },
    {
      "name": "autoFitOnAttach",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to auto-fit on attach.\n       "
    },
    {
      "name": "opened",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the overlay is currently displayed.\n       "
    },
    {
      "name": "canceled",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the overlay was canceled when it was last closed.\n       ",
      "readOnly": true
    },
    {
      "name": "withBackdrop",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.\n       "
    },
    {
      "name": "noAutoFocus",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable auto-focusing the overlay or child nodes with\nthe `autofocus` attribute` when the overlay is opened.\n       "
    },
    {
      "name": "noCancelOnEscKey",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable canceling the overlay with the ESC key.\n       "
    },
    {
      "name": "noCancelOnOutsideClick",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable canceling the overlay by clicking outside it.\n       "
    },
    {
      "name": "closingReason",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "Contains the reason(s) this overlay was last closed (see `iron-overlay-closed`).\n`IronOverlayBehavior` provides the `canceled` reason; implementers of the\nbehavior can provide other reasons in addition to `canceled`.\n       "
    },
    {
      "name": "restoreFocusOnClose",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to enable restoring of focus when overlay is closed.\n       "
    },
    {
      "name": "allowClickThrough",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to allow clicks to go through overlays. \nWhen the user clicks outside this overlay, the click may\nclose the overlay below.\n       "
    },
    {
      "name": "alwaysOnTop",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to keep overlay always on top.\n       "
    },
    {
      "name": "modal",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If `modal` is true, this implies `no-cancel-on-outside-click`, `no-cancel-on-esc-key` and `with-backdrop`.\n       "
    },
    {
      "name": "animationConfig",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "Animation configuration. See README for more info.\n       "
    },
    {
      "name": "entryAnimation",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Convenience property for setting an 'entry' animation. Do not set `animationConfig.entry`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
    },
    {
      "name": "exitAnimation",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Convenience property for setting an 'exit' animation. Do not set `animationConfig.exit`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
    }
  ],
  "methods": [
    {
      "name": "fit",
      "description": "Positions and fits the element into the `fitInto` element.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "resetFit",
      "description": "Resets the target element's position and size constraints, and clear\nthe memoized data.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "refit",
      "description": "Equivalent to calling `resetFit()` and `fit()`. Useful to call this after\nthe element or the `fitInto` element has been resized, or if any of the\npositioning properties (e.g. `horizontalAlign, verticalAlign`) is updated.\nIt preserves the scroll position of the sizingTarget.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "position",
      "description": "Positions the element according to `horizontalAlign, verticalAlign`.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "constrain",
      "description": "Constrains the size of the element to `fitInto` by setting `max-height`\nand/or `max-width`.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "center",
      "description": "Centers horizontally and vertically if not already positioned. This also sets\n`position:fixed`.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "notifyResize",
      "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "assignParentResizable",
      "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     ",
      "parameters": [
        {
          "name": "parentResizable",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "stopResizeNotificationsFor",
      "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     ",
      "parameters": [
        {
          "name": "target",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "resizerShouldNotify",
      "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
      "parameters": [
        {
          "name": "element",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
        }
      ],
      "returns": "BOOLEAN"
    },
    {
      "name": "backdropElement",
      "description": "The backdrop element.",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "toggle",
      "description": "Toggle the opened state of the overlay.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "open",
      "description": "Open the overlay.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "close",
      "description": "Close the overlay.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "cancel",
      "description": "Cancels the overlay.",
      "parameters": [
        {
          "name": "event",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "The original event"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "invalidateTabbables",
      "description": "Invalidates the cached tabbable nodes. To be called when any of the focusable\ncontent changes (e.g. a button is disabled).\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "getAnimationConfig",
      "description": "An element implementing `Polymer.NeonAnimationRunnerBehavior` calls this method to configure\nan animation with an optional type. Elements implementing `Polymer.NeonAnimatableBehavior`\nshould define the property `animationConfig`, which is either a configuration object\nor a map of animation type to array of configuration objects.\n     ",
      "parameters": [
        {
          "name": "type",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "playAnimation",
      "description": "Plays an animation with an optional `type`.",
      "parameters": [
        {
          "name": "type",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "cookie",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "cancelAnimation",
      "description": "Cancels the currently running animations.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    }
  ],
  "events": [
    {
      "name": "horizontal-offset-changed",
      "description": "Fired when the `horizontalOffset` property changes.",
      "properties": []
    },
    {
      "name": "vertical-offset-changed",
      "description": "Fired when the `verticalOffset` property changes.",
      "properties": []
    },
    {
      "name": "opened-changed",
      "description": "Fired when the `opened` property changes.",
      "properties": []
    },
    {
      "name": "iron-overlay-canceled",
      "description": "iron-overlay-canceled",
      "properties": []
    },
    {
      "name": "iron-overlay-closed",
      "description": "iron-overlay-closed",
      "properties": []
    },
    {
      "name": "iron-overlay-opened",
      "description": "iron-overlay-opened",
      "properties": []
    }
  ],
  "slots": [
    ""
  ],
  "behaviors": [
    "Polymer.PaperDialogBehavior",
    "Polymer.NeonAnimationRunnerBehavior",
    "Polymer.IronOverlayBehavior",
    "Polymer.IronFitBehavior",
    "Polymer.IronResizableBehavior",
    "Polymer.IronOverlayBehaviorImpl",
    "Polymer.NeonAnimatableBehavior"
  ],
  "mixins": [],
  "description": "Material design: [Dialogs](https://www.google.com/design/spec/components/dialogs.html)\n\n`<paper-dialog>` is a dialog with Material Design styling and optional animations when it is\nopened or closed. It provides styles for a header, content area, and an action area for buttons.\nYou can use the `<paper-dialog-scrollable>` element (in its own repository) if you need a scrolling\ncontent area. To autofocus a specific child element after opening the dialog, give it the `autofocus`\nattribute. See `Polymer.PaperDialogBehavior` and `Polymer.IronOverlayBehavior` for specifics.\n\nFor example, the following code implements a dialog with a header, scrolling content area and\nbuttons. Focus will be given to the `dialog-confirm` button when the dialog is opened.\n\n    <paper-dialog>\n      <h2>Header</h2>\n      <paper-dialog-scrollable>\n        Lorem ipsum...\n      </paper-dialog-scrollable>\n      <div class=\"buttons\">\n        <paper-button dialog-dismiss>Cancel</paper-button>\n        <paper-button dialog-confirm autofocus>Accept</paper-button>\n      </div>\n    </paper-dialog>\n\n### Styling\n\nSee the docs for `Polymer.PaperDialogBehavior` for the custom properties available for styling\nthis element.\n\n### Animations\n\nSet the `entry-animation` and/or `exit-animation` attributes to add an animation when the dialog\nis opened or closed. See the documentation in\n[PolymerElements/neon-animation](https://github.com/PolymerElements/neon-animation) for more info.\n\nFor example:\n\n    <link rel=\"import\" href=\"components/neon-animation/animations/scale-up-animation.html\">\n    <link rel=\"import\" href=\"components/neon-animation/animations/fade-out-animation.html\">\n\n    <paper-dialog entry-animation=\"scale-up-animation\"\n                  exit-animation=\"fade-out-animation\">\n      <h2>Header</h2>\n      <div>Dialog body</div>\n    </paper-dialog>\n\n### Accessibility\n\nSee the docs for `Polymer.PaperDialogBehavior` for accessibility features implemented by this\nelement."
}
