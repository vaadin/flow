{
  "name": "Vaadin.GridElement",
  "tag": "vaadin-grid",
  "baseUrl": "vaadin-grid/src/vaadin-grid.html",
  "version": "5.1.0-alpha3",
  "properties": [
    {
      "name": "pageSize",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "Number of items fetched at a time from the dataprovider.\n         "
    },
    {
      "name": "dataProvider",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "Function that provides items lazily. Receives arguments `params`, `callback`\n\n`params.page` Requested page index\n\n`params.pageSize` Current page size\n\n`params.filters` Currently applied filters\n\n`params.sortOrders` Currently applied sorting orders\n\n`params.parentItem` When tree is used, and sublevel items\nare requested, reference to parent item of the requested sublevel.\nOtherwise `undefined`.\n\n`callback(items, size)` Callback function with arguments:\n  - `items` Current page of items\n  - `size` Total number of items. When tree sublevel items\n    are requested, total number of items in the requested sublevel.\n    Optional when tree is not used, required for tree.\n         ",
      "notify": true
    },
    {
      "name": "loading",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "`true` while data is being requested from the data provider.\n         ",
      "readOnly": true,
      "notify": true
    },
    {
      "name": "itemIdPath",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Path to an item sub-property that identifies the item.\n         "
    },
    {
      "name": "expandedItems",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "An array that contains the expanded items.\n         ",
      "notify": true
    },
    {
      "name": "activeItem",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The item user has last interacted with. Turns to `null` after user deactivates\nthe item by re-interacting with the currently active item.\n         ",
      "notify": true
    },
    {
      "name": "items",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "An array containing the items which will be stamped to the column template\ninstances.\n         "
    },
    {
      "name": "detailsOpenedItems",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "An array containing references to items with open row details.\n         "
    },
    {
      "name": "multiSort",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "When `true`, all `<vaadin-grid-sorter>` are applied for sorting.\n         "
    },
    {
      "name": "selectedItems",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "An array that contains the selected items.\n         ",
      "notify": true
    },
    {
      "name": "columnReorderingAllowed",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to allow column reordering.\n         "
    },
    {
      "name": "heightByRows",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the grid's height is defined by the number of its rows.\n           "
    }
  ],
  "methods": [
    {
      "name": "updateStyles",
      "description": "",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "getItemId",
      "description": "Returns a value that identifies the item. Uses `itemIdPath` if available.\nCan be customized by overriding.\n     ",
      "parameters": [
        {
          "name": "item",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "expandItem",
      "description": "Expands the given item tree.\n     ",
      "parameters": [
        {
          "name": "item",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "collapseItem",
      "description": "Collapses the given item tree.\n     ",
      "parameters": [
        {
          "name": "item",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "clearCache",
      "description": "Clears the cached pages and reloads data from dataprovider when needed.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "openItemDetails",
      "description": "Open the details row of a given item.\n     ",
      "parameters": [
        {
          "name": "item",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "closeItemDetails",
      "description": "Close the details row of a given item.\n     ",
      "parameters": [
        {
          "name": "item",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "selectItem",
      "description": "Selects the given item.",
      "parameters": [
        {
          "name": "item",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "The item object"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "deselectItem",
      "description": "Deselects the given item if it is already selected.",
      "parameters": [
        {
          "name": "item",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "The item object"
        }
      ],
      "returns": "UNDEFINED"
    }
  ],
  "events": [],
  "slots": [
    "nodistribute"
  ],
  "behaviors": [],
  "mixins": [
    "Vaadin.ThemableMixin",
    "Vaadin.Grid.DataProviderMixin",
    "Vaadin.Grid.ScrollMixin",
    "Vaadin.Grid.KeyboardNavigationMixin",
    "Vaadin.Grid.CombinedMixin",
    "Vaadin.Grid.ColumnReorderingMixin"
  ],
  "variants": {
    "lumo": [
      "no-border",
      "no-row-borders",
      "column-borders",
      "row-stripes",
      "compact",
      "wrap-cell-content"
    ],
    "material": [
      "column-dividers"
    ]
  },
  "description": "`<vaadin-grid>` is a free, high quality data grid / data table Polymer element.\n\n### Quick Start\n\nUse the [`<vaadin-grid-column>`](#/elements/vaadin-grid-column) element to configure the grid columns.\n\nThen assign an array to the [`items`](#/elements/vaadin-grid#property-items) property to visualize your data.\n\n#### Example:\n```html\n<vaadin-grid items='[{\"name\": \"John\", \"surname\": \"Lennon\", \"role\": \"singer\"},\n{\"name\": \"Ringo\", \"surname\": \"Starr\", \"role\": \"drums\"}]'>\n  <vaadin-grid-column>\n    <template class=\"header\">Name</template>\n    <template>[[item.name]]</template>\n  </vaadin-grid-column>\n  <vaadin-grid-column>\n    <template class=\"header\">Surname</template>\n    <template>[[item.surname]]</template>\n  </vaadin-grid-column>\n  <vaadin-grid-column>\n    <template class=\"header\">Role</template>\n    <template>[[item.role]]</template>\n  </vaadin-grid-column>\n</vaadin-grid>\n```\n\nThe following helper elements can be used for further customization:\n- [`<vaadin-grid-column-group>`](#/elements/vaadin-grid-column-group)\n- [`<vaadin-grid-filter>`](#/elements/vaadin-grid-filter)\n- [`<vaadin-grid-sorter>`](#/elements/vaadin-grid-sorter)\n- [`<vaadin-grid-selection-column>`](#/elements/vaadin-grid-selection-column)\n- [`<vaadin-grid-tree-toggle>`](#/elements/vaadin-grid-tree-toggle)\n\n__Note that the helper elements must be explicitly imported.__\nIf you want to import everything at once you can use the `all-imports.html` bundle.\n\nA column template can be decorated with one the following class names to specify its purpose\n- `header`: Marks a header template\n- `footer`: Marks a footer template\n- `row-details`: Marks a row details template\n\nThe following built-in template variables can be bound to inside the column templates:\n- `[[index]]`: Number representing the row index\n- `[[item]]` and it's sub-properties: Data object (provided by a data provider / items array)\n- `{{selected}}`: True if the item is selected (can be two-way bound)\n- `{{detailsOpened}}`: True if the item has row details opened (can be two-way bound)\n- `{{expanded}}`: True if the item has tree sublevel expanded (can be two-way bound)\n- `[[level]]`: Number of the tree sublevel of the item, first level-items have 0\n\n### Lazy Loading with Function Data Provider\n\nIn addition to assigning an array to the items property, you can alternatively\nprovide the `<vaadin-grid>` data through the\n[`dataProvider`](#/elements/vaadin-grid#property-dataProvider) function property.\nThe `<vaadin-grid>` calls this function lazily, only when it needs more data\nto be displayed.\n\nSee the [`dataProvider`](#/elements/vaadin-grid#property-dataProvider) in\nthe API reference below for the detailed data provider arguments description,\nand the “Assigning Data” page in the demos.\n\n__Note that expanding the tree grid's item will trigger a call to the `dataProvider`.__\n\n__Also, note that when using function data providers, the total number of items\nneeds to be set manually. The total number of items can be returned\nin the second argument of the data provider callback:__\n\n```javascript\ngrid.dataProvider = function(params, callback) {\n  var url = 'https://api.example/data' +\n      '?page=' + params.page +        // the requested page index\n      '&per_page=' + params.pageSize; // number of items on the page\n  var xhr = new XMLHttpRequest();\n  xhr.onload = function() {\n    var response = JSON.parse(xhr.responseText);\n    callback(\n      response.employees, // requested page of items\n      response.totalSize  // total number of items\n    );\n  };\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n```\n\n__Alternatively, you can use the `size` property to set the total number of items:__\n\n```javascript\ngrid.size = 200; // The total number of items\ngrid.dataProvider = function(params, callback) {\n  var url = 'https://api.example/data' +\n      '?page=' + params.page +        // the requested page index\n      '&per_page=' + params.pageSize; // number of items on the page\n  var xhr = new XMLHttpRequest();\n  xhr.onload = function() {\n    var response = JSON.parse(xhr.responseText);\n    callback(response.employees);\n  };\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n```\n\n### Styling\n\nThe following shadow DOM parts are available for styling:\n\nPart name | Description\n----------------|----------------\n`row` | Row in the internal table\n`cell` | Cell in the internal table\n`header-cell` | Header cell in the internal table\n`body-cell` | Body cell in the internal table\n`footer-cell` | Footer cell in the internal table\n`details-cell` | Row details cell in the internal table\n`resize-handle` | Handle for resizing the columns\n`reorder-ghost` | Ghost element of the header cell being dragged\n\nThe following state attributes are available for styling:\n\nAttribute    | Description | Part name\n-------------|-------------|------------\n`loading` | Set when the grid is loading data from data provider | :host\n`interacting` | Keyboard navigation in interaction mode | :host\n`navigating` | Keyboard navigation in navigation mode | :host\n`overflow` | Set when rows are overflowing the grid viewport. Possible values: `top`, `bottom`, `left`, `right` | :host\n`reordering` | Set when the grid's columns are being reordered | :host\n`reorder-status` | Reflects the status of a cell while columns are being reordered | cell\n`frozen` | Frozen cell | cell\n`last-frozen` | Last frozen cell | cell\n`last-column` | Last visible cell on a row | cell\n`selected` | Selected row | row\n`expanded` | Expanded row | row\n`loading` | Row that is waiting for data from data provider | row\n`odd` | Odd row | row\n`first` | The first body row | row\n\nSee [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)"
}
