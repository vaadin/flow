{
  "name": "paper-listbox",
  "tag": "paper-listbox",
  "baseUrl": "paper-listbox/paper-listbox.html",
  "version": "2.0.0",
  "properties": [
    {
      "name": "attrForSelected",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "If you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)\n       "
    },
    {
      "name": "selected",
      "type": [
        "STRING",
        "NUMBER"
      ],
      "objectType": [],
      "description": "Gets or sets the selected element. The default is to use the index of the item."
    },
    {
      "name": "selectedItem",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "Returns the currently selected item.",
      "readOnly": true
    },
    {
      "name": "activateEvent",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The event that fires from items when they are selected. Selectable\nwill listen for this event from items and update the selection state.\nSet to empty string to listen to no events.\n       "
    },
    {
      "name": "selectable",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "This is a CSS selector string.  If this is set, only items that match the CSS selector\nare selectable.\n       "
    },
    {
      "name": "selectedClass",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The class to set on elements when selected.\n       "
    },
    {
      "name": "selectedAttribute",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The attribute to set on elements when selected.\n       "
    },
    {
      "name": "fallbackSelection",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Default fallback if the selection based on selected with `attrForSelected`\nis not found.\n       "
    },
    {
      "name": "items",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "The list of items from which a selection can be made.\n       ",
      "readOnly": true
    },
    {
      "name": "multi",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, multiple selections are allowed.\n       "
    },
    {
      "name": "selectedValues",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "Gets or sets the selected elements. This is used instead of `selected` when `multi`\nis true.\n       "
    },
    {
      "name": "selectedItems",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "Returns an array of currently selected items.\n       ",
      "readOnly": true
    },
    {
      "name": "keyEventTarget",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
    },
    {
      "name": "stopKeyboardEventPropagation",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
    },
    {
      "name": "keyBindings",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "focusedItem",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "Returns the currently focused item.",
      "readOnly": true
    },
    {
      "name": "attrForItemTitle",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The attribute to use on menu items to look up the item title. Typing the first\nletter of an item when the menu is open focuses that item. If unset, `textContent`\nwill be used.\n       "
    },
    {
      "name": "disabled",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": ""
    }
  ],
  "methods": [
    {
      "name": "indexOf",
      "description": "Returns the index of the given item.",
      "parameters": [
        {
          "name": "item",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "OBJECT"
    },
    {
      "name": "select",
      "description": "Selects the given value. If the `multi` property is true, then the selected state of the\n`value` will be toggled; otherwise the `value` will be selected.",
      "parameters": [
        {
          "name": "value",
          "type": [
            "STRING",
            "NUMBER"
          ],
          "objectType": [],
          "description": "the value to select."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "selectPrevious",
      "description": "Selects the previous item.",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "selectNext",
      "description": "Selects the next item.",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "selectIndex",
      "description": "Selects the item at the given index.",
      "parameters": [
        {
          "name": "index",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "forceSynchronousItemUpdate",
      "description": "Force a synchronous update of the `items` property.\n\nNOTE: Consider listening for the `iron-items-changed` event to respond to\nupdates to the set of selectable items after updates to the DOM list and\nselection state have been made.\n\nWARNING: If you are using this method, you should probably consider an\nalternate approach. Synchronously querying for items is potentially\nslow for many use cases. The `items` property will update asynchronously\non its own to reflect selectable items in the DOM.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "multiChanged",
      "description": "",
      "parameters": [
        {
          "name": "multi",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "addOwnKeyBinding",
      "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
      "parameters": [
        {
          "name": "eventString",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "handlerName",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "removeOwnKeyBindings",
      "description": "When called, will remove all imperatively-added key bindings.\n       ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "keyboardEventMatchesKeys",
      "description": "Returns true if a keyboard event matches `eventString`.",
      "parameters": [
        {
          "name": "event",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "eventString",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "BOOLEAN"
    }
  ],
  "events": [
    {
      "name": "iron-activate",
      "description": "iron-activate",
      "properties": []
    },
    {
      "name": "iron-deselect",
      "description": "iron-deselect",
      "properties": []
    },
    {
      "name": "iron-items-changed",
      "description": "iron-items-changed",
      "properties": []
    },
    {
      "name": "iron-select",
      "description": "iron-select",
      "properties": []
    },
    {
      "name": "selected-changed",
      "description": "Fired when the `selected` property changes.",
      "properties": []
    },
    {
      "name": "selected-item-changed",
      "description": "Fired when the `selectedItem` property changes.",
      "properties": []
    },
    {
      "name": "items-changed",
      "description": "Fired when the `items` property changes.",
      "properties": []
    },
    {
      "name": "selected-values-changed",
      "description": "Fired when the `selectedValues` property changes.",
      "properties": []
    },
    {
      "name": "selected-items-changed",
      "description": "Fired when the `selectedItems` property changes.",
      "properties": []
    }
  ],
  "slots": [
    ""
  ],
  "behaviors": [
    "Polymer.IronMenuBehavior"
  ],
  "mixins": [],
  "description": "Material design: [Menus](https://www.google.com/design/spec/components/menus.html)\n\n`<paper-listbox>` implements an accessible listbox control with Material Design styling. The focused item\nis highlighted, and the selected item has bolded text.\n\n    <paper-listbox>\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\nAn initial selection can be specified with the `selected` attribute.\n\n    <paper-listbox selected=\"0\">\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\nMake a multi-select listbox with the `multi` attribute. Items in a multi-select listbox can be deselected,\nand multiple item can be selected.\n\n    <paper-listbox multi>\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-listbox-background-color`   | Menu background color                                            | `--primary-background-color`\n`--paper-listbox-color`              | Menu foreground color                                            | `--primary-text-color`\n`--paper-listbox`                    | Mixin applied to the listbox                                        | `{}`\n\n### Accessibility\n\n`<paper-listbox>` has `role=\"listbox\"` by default. A multi-select listbox will also have\n`aria-multiselectable` set. It implements key bindings to navigate through the listbox with the up and\ndown arrow keys, esc to exit the listbox, and enter to activate a listbox item. Typing the first letter\nof a listbox item will also focus it."
}
