{
  "name": "Vaadin.ComboBoxLightElement",
  "tag": "vaadin-combo-box-light",
  "baseUrl": "vaadin-combo-box/vaadin-combo-box-light.html",
  "version": "3.0.0",
  "properties": [
    {
      "name": "opened",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the dropdown is open, false otherwise.\n         "
    },
    {
      "name": "disabled",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable this element.\n         "
    },
    {
      "name": "readonly",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "When present, it specifies that the element field is read-only.\n         "
    },
    {
      "name": "items",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "A full set of items to filter the visible options from.\nThe items can be of either `String` or `Object` type.\n         "
    },
    {
      "name": "allowCustomValue",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If `true`, the user can input a value that is not present in the items list.\n`value` property will be set to the input value in this case.\nAlso, when `value` is set programmatically, the input value will be set\nto reflect that value.\n         "
    },
    {
      "name": "filteredItems",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "A subset of items, filtered based on the user input. Filtered items\ncan be assigned directly to omit the internal filtering functionality.\nThe items can be of either `String` or `Object` type.\n         "
    },
    {
      "name": "value",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The `String` value for the selected item of the combo box. Provides\nthe value for `iron-form`.\n\nWhen thereâ€™s no item selected, the value is an empty string.\n\nUse `selectedItem` property to get the raw selected item from\nthe `items` array.\n         "
    },
    {
      "name": "hasValue",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "A read-only property indicating whether this combo box has a value\nselected or not. It can be used for example in styling of the component.\n         ",
      "readOnly": true
    },
    {
      "name": "loading",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "When set to `true`, \"loading\" attibute is added to host and the overlay element.\n         "
    },
    {
      "name": "filter",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Filtering string the user has typed into the input field.\n         "
    },
    {
      "name": "selectedItem",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The selected item from the `items` array.\n         "
    },
    {
      "name": "itemLabelPath",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Path for label of the item. If `items` is an array of objects, the\n`itemLabelPath` is used to fetch the displayed string label for each\nitem.\n\nThe item label is also used for matching items when processing user\ninput, i.e., for filtering and selecting items.\n\nWhen using item templates, the property is still needed because it is used\nfor filtering, and for displaying the selected item value in the input box.\n         "
    },
    {
      "name": "itemValuePath",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Path for the value of the item. If `items` is an array of objects, the\n`itemValuePath:` is used to fetch the string value for the selected\nitem.\n\nThe item value is used in the `value` property of the combo box,\nto provide the form value.\n         "
    },
    {
      "name": "required",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to mark the input as required.\n         "
    },
    {
      "name": "name",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The name of this element.\n         "
    },
    {
      "name": "invalid",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true if the value is invalid.\n         "
    },
    {
      "name": "attrForValue",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Name of the two-way data-bindable property representing the\nvalue of the custom input field.\n           "
    },
    {
      "name": "overlayVerticalOffset",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "Number of pixels used as the vertical offset in positioning of\nthe dropdown.\n           "
    },
    {
      "name": "inputElement",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "",
      "readOnly": true
    }
  ],
  "methods": [
    {
      "name": "open",
      "description": "Opens the dropdown list.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "close",
      "description": "Closes the dropdown list.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "cancel",
      "description": "Reverts back to original value.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "validate",
      "description": "Returns true if `value` is valid, and sets the `invalid` flag appropriatelly.",
      "parameters": [
        {
          "name": "value",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "BOOLEAN"
    },
    {
      "name": "checkValidity",
      "description": "Returns true if the current input value satisfies all constraints (if any)\n\nYou can override the `checkValidity` method for custom validations.\n     ",
      "parameters": [
        {
          "name": "value",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "connectedCallback",
      "description": "",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "disconnectedCallback",
      "description": "",
      "parameters": [],
      "returns": "UNDEFINED"
    }
  ],
  "events": [
    {
      "name": "change",
      "description": "change",
      "properties": []
    },
    {
      "name": "custom-value-set",
      "description": "custom-value-set",
      "properties": [
        {
          "name": "detail",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "the custom value"
        }
      ]
    },
    {
      "name": "selected-item-changed",
      "description": "selected-item-changed",
      "properties": [
        {
          "name": "detail",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "detail.value",
          "type": [
            "OBJECT",
            "STRING"
          ],
          "objectType": [],
          "description": "the selected item. Type is the same as the type of `items`."
        }
      ]
    },
    {
      "name": "value-changed",
      "description": "value-changed",
      "properties": [
        {
          "name": "detail",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "detail.value",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "the combobox value"
        }
      ]
    }
  ],
  "slots": [
    ""
  ],
  "behaviors": [],
  "mixins": [
    "Vaadin.ComboBoxMixin",
    "Vaadin.ThemableMixin",
    "Vaadin.ComboBoxDropdownMixin"
  ],
  "description": "`<vaadin-combo-box-light>` is a customizable version of the `<vaadin-combo-box>` providing\nonly the dropdown functionality and leaving the input field definition to the user.\n\nThe element has the same API as `<vaadin-combo-box>`.\n\nTo create a custom input field, you need to add a child element which has a two-way\ndata-bindable property representing the input value. The property name is expected\nto be `value` by default. See the example below for a simplest possible example\nusing a `<vaadin-text-field>` element.\n\n```html\n<vaadin-combo-box-light>\n  <vaadin-text-field>\n  </vaadin-text-field>\n</vaadin-combo-box-light>\n```\n\nIf you are using other custom input fields like `<iron-input>`, you\nneed to define the name of the bindable property with the `attrForValue` attribute.\n\n```html\n<vaadin-combo-box-light attr-for-value=\"bind-value\">\n  <iron-input>\n    <input>\n  </iron-input>\n</vaadin-combo-box-light>\n```\n\nIn the next example you can see how to create a custom input field based\non a `<paper-input>` decorated with a custom `<iron-icon>` and\ntwo `<paper-button>`s to act as the clear and toggle controls.\n\n```html\n<vaadin-combo-box-light>\n  <paper-input label=\"Elements\" class=\"input\">\n    <iron-icon icon=\"toll\" prefix></iron-icon>\n    <paper-button slot=\"suffix\" class=\"clear-button\">Clear</paper-button>\n    <paper-button slot=\"suffix\" class=\"toggle-button\">Toggle</paper-button>\n  </paper-input>\n</vaadin-combo-box-light>\n```"
}
