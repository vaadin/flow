{
  "name": "Vaadin.ComboBoxElement",
  "tag": "vaadin-combo-box",
  "baseUrl": "vaadin-combo-box/vaadin-combo-box.html",
  "version": "3.0.0",
  "properties": [
    {
      "name": "opened",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the dropdown is open, false otherwise.\n         "
    },
    {
      "name": "disabled",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable this input.\n             "
    },
    {
      "name": "readonly",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "items",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "A full set of items to filter the visible options from.\nThe items can be of either `String` or `Object` type.\n         "
    },
    {
      "name": "allowCustomValue",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If `true`, the user can input a value that is not present in the items list.\n`value` property will be set to the input value in this case.\nAlso, when `value` is set programmatically, the input value will be set\nto reflect that value.\n         "
    },
    {
      "name": "filteredItems",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "A subset of items, filtered based on the user input. Filtered items\ncan be assigned directly to omit the internal filtering functionality.\nThe items can be of either `String` or `Object` type.\n         "
    },
    {
      "name": "value",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The `String` value for the selected item of the combo box. Provides\nthe value for `iron-form`.\n\nWhen thereâ€™s no item selected, the value is an empty string.\n\nUse `selectedItem` property to get the raw selected item from\nthe `items` array.\n         "
    },
    {
      "name": "hasValue",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "A read-only property indicating whether this combo box has a value\nselected or not. It can be used for example in styling of the component.\n         ",
      "readOnly": true
    },
    {
      "name": "loading",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "When set to `true`, \"loading\" attibute is added to host and the overlay element.\n         "
    },
    {
      "name": "filter",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Filtering string the user has typed into the input field.\n         "
    },
    {
      "name": "selectedItem",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The selected item from the `items` array.\n         "
    },
    {
      "name": "itemLabelPath",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Path for label of the item. If `items` is an array of objects, the\n`itemLabelPath` is used to fetch the displayed string label for each\nitem.\n\nThe item label is also used for matching items when processing user\ninput, i.e., for filtering and selecting items.\n\nWhen using item templates, the property is still needed because it is used\nfor filtering, and for displaying the selected item value in the input box.\n         "
    },
    {
      "name": "itemValuePath",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Path for the value of the item. If `items` is an array of objects, the\n`itemValuePath:` is used to fetch the string value for the selected\nitem.\n\nThe item value is used in the `value` property of the combo box,\nto provide the form value.\n         "
    },
    {
      "name": "required",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to mark the input as required.\n         "
    },
    {
      "name": "name",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The name of this element.\n         "
    },
    {
      "name": "invalid",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true if the value is invalid.\n         "
    },
    {
      "name": "label",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The label for this element.\n             "
    },
    {
      "name": "noLabelFloat",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable the floating label.\n             "
    },
    {
      "name": "alwaysFloatLabel",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to always float the label.\n             "
    },
    {
      "name": "preventInvalidInput",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to prevent the user from entering invalid input.\n             "
    },
    {
      "name": "allowedPattern",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Set this to specify the pattern allowed by `preventInvalidInput`.\n             "
    },
    {
      "name": "pattern",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "A pattern to validate the `input` with.\n             "
    },
    {
      "name": "errorMessage",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The error message to display when the input is invalid.\n             "
    },
    {
      "name": "autofocus",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "inputmode",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "placeholder",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "A placeholder string in addition to the label. If this is set, the label will always float.\n             "
    },
    {
      "name": "size",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": ""
    }
  ],
  "methods": [
    {
      "name": "open",
      "description": "Opens the dropdown list.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "close",
      "description": "Closes the dropdown list.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "cancel",
      "description": "Reverts back to original value.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "validate",
      "description": "Returns true if `value` is valid, and sets the `invalid` flag appropriatelly.",
      "parameters": [
        {
          "name": "value",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "BOOLEAN"
    },
    {
      "name": "checkValidity",
      "description": "Returns true if the current input value satisfies all constraints (if any)\n\nYou can override the `checkValidity` method for custom validations.\n     ",
      "parameters": [
        {
          "name": "value",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "connectedCallback",
      "description": "",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "disconnectedCallback",
      "description": "",
      "parameters": [],
      "returns": "UNDEFINED"
    }
  ],
  "events": [
    {
      "name": "change",
      "description": "change",
      "properties": []
    },
    {
      "name": "custom-value-set",
      "description": "custom-value-set",
      "properties": [
        {
          "name": "detail",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "the custom value"
        }
      ]
    },
    {
      "name": "selected-item-changed",
      "description": "selected-item-changed",
      "properties": [
        {
          "name": "detail",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "detail.value",
          "type": [
            "OBJECT",
            "STRING"
          ],
          "objectType": [],
          "description": "the selected item. Type is the same as the type of `items`."
        }
      ]
    },
    {
      "name": "value-changed",
      "description": "value-changed",
      "properties": [
        {
          "name": "detail",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "detail.value",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "the combobox value"
        }
      ]
    }
  ],
  "slots": [
    "prefix"
  ],
  "behaviors": [],
  "mixins": [
    "Vaadin.ComboBoxMixin",
    "Vaadin.ThemableMixin",
    "Vaadin.ComboBoxDropdownMixin"
  ],
  "description": "`<vaadin-combo-box>` is a combo box element combining a dropdown list with an\ninput field for filtering the list of items. If you want to replace the default\ninput field with a custom implementation, you should use the\n[`<vaadin-combo-box-light>`](#/elements/vaadin-combo-box-light) element.\n\nItems in the dropdown list must be provided as a list of `String` values.\nDefining the items is done using the `items` property, which can be assigned\nwith data-binding, using an attribute or directly with the JavaScript property.\n\n```html\n<vaadin-combo-box\n    label=\"Fruit\"\n    items=\"[[data]]\">\n</vaadin-combo-box>\n```\n\n```js\ncombobox.items = ['apple', 'orange', 'banana'];\n```\n\nWhen the selected `value` is changed, a `value-changed` event is triggered.\n\nThis element can be used within an `iron-form`.\n\n### Item Template\n\n`<vaadin-combo-box>` supports using custom item template provided in the light\nDOM:\n\n```html\n<vaadin-combo-box items='[{\"label\": \"Hydrogen\", \"value\": \"H\"}]'>\n  <template>\n    [[index]]: [[item.label]] <b>[[item.value]</b>\n  </template>\n</vaadin-combo-box>\n```\n\nThe following properties are available for item template bindings:\n\nProperty name | Type | Description\n--------------|------|------------\n`index`| Number | Index of the item in the `items` array\n`item` | String or Object | The item reference\n`selected` | Boolean | True when item is selected\n`focused` | Boolean | True when item is focused\n\n### Styling\n\n[Generic styling/theming documentation](https://cdn.vaadin.com/vaadin-valo-theme/0.3.1/demo/customization.html)\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|-------------\n`--vaadin-combo-box-overlay-max-height` | Property that determines the max height of overlay | `65vh`\n\nThe following shadow DOM parts are available for styling:\n\nPart name | Description\n----------------|----------------\n`text-field` | The text field\n`clear-button` | The clear button\n`toggle-button` | The toggle button\n\nSee [`<vaadin-overlay>` documentation](https://github.com/vaadin/vaadin-overlay/blob/master/vaadin-overlay.html)\nfor `<vaadin-combo-box-overlay>` parts.\n\nSee [`<vaadin-text-field>` documentation](https://vaadin.com/elements/vaadin-text-field/html-api/elements/Vaadin.TextFieldElement)\nfor the text field parts.\n\nThe following state attributes are available for styling:\n\nAttribute    | Description | Part name\n-------------|-------------|------------\n`opened` | Set when the combo box dropdown is open | :host\n`disabled` | Set to a disabled combo box | :host\n`readonly` | Set to a read only combo box | :host\n`has-value` | Set when the element has a value | :host\n`invalid` | Set when the element is invalid | :host\n`focused` | Set when the element is focused | :host\n`focus-ring` | Set when the element is keyboard focused | :host\n`loading` | Set when new items are expected | :host"
}
