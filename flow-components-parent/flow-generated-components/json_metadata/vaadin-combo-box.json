{
  "name": "vaadin-combo-box",
  "tag": "vaadin-combo-box",
  "baseUrl": "vaadin-combo-box/vaadin-combo-box.html",
  "properties": [
    {
      "name": "validator",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Name of the validator to use.\n       "
    },
    {
      "name": "invalid",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the last call to `validate` is invalid.\n       "
    },
    {
      "name": "name",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "value",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The `String` value for the selected item of the combo box. Provides\nthe value for `iron-form`.\n\nWhen thereâ€™s no item selected, the value is an empty string.\n\nUse `selectedItem` property to get the raw selected item from\nthe `items` array.\n       "
    },
    {
      "name": "required",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to mark the input as required.\n       "
    },
    {
      "name": "opened",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the dropdown is open, false otherwise.\n       "
    },
    {
      "name": "disabled",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable this input.\n       "
    },
    {
      "name": "readonly",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "items",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "A full set of items to filter the visible options from.\nThe items can be of either `String` or `Object` type.\n       "
    },
    {
      "name": "allowCustomValue",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If `true`, the user can input a value that is not present in the items list.\n`value` property will be set to the input value in this case.\nAlso, when `value` is set programmatically, the input value will be set\nto reflect that value.\n       "
    },
    {
      "name": "filteredItems",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "A subset of items, filtered based on the user input. Filtered items\ncan be assigned directly to omit the internal filtering functionality.\nThe items can be of either `String` or `Object` type.\n       "
    },
    {
      "name": "hasValue",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "A read-only property indicating whether this combo box has a value\nselected or not. It can be used for example in styling of the component.\n       ",
      "readOnly": true
    },
    {
      "name": "loading",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "When set to `true`, a loading spinner is displayed on top of the list of options.\n       "
    },
    {
      "name": "filter",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Filtering string the user has typed into the input field.\n       "
    },
    {
      "name": "selectedItem",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The selected item from the `items` array.\n       "
    },
    {
      "name": "itemLabelPath",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Path for label of the item. If `items` is an array of objects, the\n`itemLabelPath` is used to fetch the displayed string label for each\nitem.\n\nThe item label is also used for matching items when processing user\ninput, i.e., for filtering and selecting items.\n\nWhen using item templates, the property is still needed because it is used\nfor filtering, and for displaying the selected item value in the input box.\n       "
    },
    {
      "name": "itemValuePath",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Path for the value of the item. If `items` is an array of objects, the\n`itemValuePath:` is used to fetch the string value for the selected\nitem.\n\nThe item value is used in the `value` property of the combo box,\nto provide the form value.\n       "
    },
    {
      "name": "inputElement",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "Returns a reference to the native input element.",
      "readOnly": true
    },
    {
      "name": "label",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The label for this element.\n       "
    },
    {
      "name": "noLabelFloat",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable the floating label.\n       "
    },
    {
      "name": "alwaysFloatLabel",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to always float the label.\n       "
    },
    {
      "name": "autoValidate",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to auto-validate the input value.\n       "
    },
    {
      "name": "preventInvalidInput",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to prevent the user from entering invalid input.\n       "
    },
    {
      "name": "allowedPattern",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Set this to specify the pattern allowed by `preventInvalidInput`.\n       "
    },
    {
      "name": "pattern",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "A pattern to validate the `input` with.\n       "
    },
    {
      "name": "errorMessage",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The error message to display when the input is invalid.\n       "
    },
    {
      "name": "autofocus",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "inputmode",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "placeholder",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "A placeholder string in addition to the label. If this is set, the label will always float.\n       "
    },
    {
      "name": "size",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "focused",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True when the input field has focus.\n       ",
      "readOnly": true
    }
  ],
  "methods": [
    {
      "name": "hasValidator",
      "description": "",
      "parameters": [],
      "returns": "BOOLEAN"
    },
    {
      "name": "validate",
      "description": "Returns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.",
      "parameters": [
        {
          "name": "value",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Deprecated: The value to be validated. By default,\nit is passed to the validator's `validate()` function, if a validator is set.\nIf this argument is not specified, then the element's `value` property\nis used, if it exists."
        }
      ],
      "returns": "BOOLEAN"
    },
    {
      "name": "templatize",
      "description": "Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\nfor the provided template.  This method should be called once per\ntemplate to prepare an element for stamping the template, followed\nby `stamp` to create new instances of the template.",
      "parameters": [
        {
          "name": "template",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Template to prepare"
        },
        {
          "name": "mutableData",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "When `true`, the generated class will skip\n  strict dirty-checking for objects and arrays (always consider them to\n  be \"dirty\"). Defaults to false."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "stamp",
      "description": "Creates an instance of the template prepared by `templatize`.  The object\nreturned is an instance of the anonymous class generated by `templatize`\nwhose `root` property is a document fragment containing newly cloned\ntemplate content, and which has property accessors corresponding to\nproperties referenced in template bindings.",
      "parameters": [
        {
          "name": "model",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Object containing initial property values to\n  populate into the template bindings."
        }
      ],
      "returns": "OBJECT"
    },
    {
      "name": "modelForElement",
      "description": "Returns the template \"model\" (`TemplateInstance`) associated with\na given element, which serves as the binding scope for the template\ninstance the element is contained in.  A template model should be used\nto manipulate data associated with this template instance.",
      "parameters": [
        {
          "name": "el",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Element for which to return a template model."
        }
      ],
      "returns": "OBJECT"
    },
    {
      "name": "open",
      "description": "Opens the dropdown list.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "close",
      "description": "Closes the dropdown list.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "cancel",
      "description": "Reverts back to original value.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "focus",
      "description": "Sets focus on the input field.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "blur",
      "description": "Removes focus from the input field.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    }
  ],
  "events": [
    {
      "name": "invalid-changed",
      "description": "Fired when the `invalid` property changes.",
      "properties": []
    },
    {
      "name": "iron-form-element-register",
      "description": "iron-form-element-register",
      "properties": []
    },
    {
      "name": "iron-form-element-unregister",
      "description": "iron-form-element-unregister",
      "properties": []
    },
    {
      "name": "value-changed",
      "description": "value-changed",
      "properties": [
        {
          "name": "detail",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "detail.value",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "the combobox value"
        }
      ]
    },
    {
      "name": "vaadin-dropdown-closed",
      "description": "vaadin-dropdown-closed",
      "properties": []
    },
    {
      "name": "vaadin-dropdown-opened",
      "description": "vaadin-dropdown-opened",
      "properties": []
    },
    {
      "name": "opened-changed",
      "description": "Fired when the `opened` property changes.",
      "properties": []
    },
    {
      "name": "filter-changed",
      "description": "Fired when the `filter` property changes.",
      "properties": []
    },
    {
      "name": "selected-item-changed",
      "description": "selected-item-changed",
      "properties": [
        {
          "name": "detail",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "detail.value",
          "type": [
            "OBJECT",
            "STRING"
          ],
          "objectType": [],
          "description": "the selected item. Type is the same as the type of `items`."
        }
      ]
    },
    {
      "name": "change",
      "description": "change",
      "properties": []
    },
    {
      "name": "custom-value-set",
      "description": "custom-value-set",
      "properties": [
        {
          "name": "detail",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "the custom value"
        }
      ]
    },
    {
      "name": "focused-changed",
      "description": "Fired when the `focused` property changes.",
      "properties": []
    }
  ],
  "slots": [
    "prefix",
    "suffix",
    "clear-button",
    "toggle-button"
  ],
  "behaviors": [
    "Polymer.IronValidatableBehavior",
    "vaadin.elements.combobox.ComboBoxBehavior"
  ],
  "mixins": [],
  "description": "`<vaadin-combo-box>` is a combo box element combining a dropdown list with an\ninput field for filtering the list of items. If you want to replace the default\ninput field with a custom implementation, you should use the\n[`<vaadin-combo-box-light>`](#vaadin-combo-box-light) element.\n\nItems in the dropdown list must be provided as a list of `String` values.\nDefining the items is done using the `items` property, which can be assigned\nwith data-binding, using an attribute or directly with the JavaScript property.\n\n```html\n<vaadin-combo-box\n    label=\"Fruit\"\n    items=\"[[data]]\">\n</vaadin-combo-box>\n```\n\n```js\ncombobox.items = ['apple', 'orange', 'banana'];\n```\n\nWhen the selected `value` is changed, a `value-changed` event is triggered.\n\nThis element is also extended with the `IronFormElementBehavior` to\nenable usage within an `iron-form`.\n\n### Item Template\n\n`<vaadin-combo-box>` supports using custom item template provided in the light\nDOM:\n\n```html\n<vaadin-combo-box items='[{\"label\": \"Hydrogen\", \"value\": \"H\"}]'>\n  <template>\n    [[index]]: [[item.label]] <b>[[item.value]</b>\n  </template>\n</vaadin-combo-box>\n```\n\nThe following properties are available for item template bindings:\n\nProperty name | Type | Description\n--------------|------|------------\n`index`| Number | Index of the item in the `items` array\n`item` | String or Object | The item reference\n`selected` | Boolean | True when item is selected\n`focused` | Boolean | True when item is focused\n\nSee the [Item Template Live Demos](demo/item-template.html) for more examples.\n\n### Styling\nThere are custom properties and mixins you can use to style the component:\n\nCustom property | Description | Default\n----------------|-------------|-------------\n`--vaadin-combo-box-overlay-max-height` | Property that determines the max height of overlay | `65vh`"
}
