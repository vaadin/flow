{
  "name": "paper-textarea",
  "tag": "paper-textarea",
  "baseUrl": "paper-input/paper-textarea.html",
  "version": "2.0.1",
  "properties": [
    {
      "name": "focused",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the element currently has focus.\n       ",
      "readOnly": true
    },
    {
      "name": "disabled",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property.\n       "
    },
    {
      "name": "keyEventTarget",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
    },
    {
      "name": "stopKeyboardEventPropagation",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
    },
    {
      "name": "keyBindings",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "label",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`\n       "
    },
    {
      "name": "value",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The value for this element.\n       "
    },
    {
      "name": "invalid",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Returns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.\n       "
    },
    {
      "name": "allowedPattern",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty.\n       "
    },
    {
      "name": "type",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The type of the input. The supported types are `text`, `number` and `password`.\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<input is=\"iron-input\">`'s `type` property.\n       "
    },
    {
      "name": "list",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The datalist of the input (if any). This should match the id of an existing `<datalist>`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `list` property.\n       "
    },
    {
      "name": "pattern",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "A pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `pattern` property.\n       "
    },
    {
      "name": "required",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.\n       "
    },
    {
      "name": "errorMessage",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using.\n       "
    },
    {
      "name": "charCounter",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to show a character counter.\n       "
    },
    {
      "name": "noLabelFloat",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `noLabelFloat` property.\n       "
    },
    {
      "name": "alwaysFloatLabel",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `alwaysFloatLabel` property.\n       "
    },
    {
      "name": "autoValidate",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<paper-input-container>`'s `autoValidate` property.\n       "
    },
    {
      "name": "validator",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property.\n       "
    },
    {
      "name": "autocomplete",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete` property.\n       "
    },
    {
      "name": "autofocus",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus` property.\n       "
    },
    {
      "name": "inputmode",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode` property.\n       "
    },
    {
      "name": "minlength",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength` property.\n       "
    },
    {
      "name": "maxlength",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength` property.\n       "
    },
    {
      "name": "min",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property.\n       "
    },
    {
      "name": "max",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property.\n       "
    },
    {
      "name": "step",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property.\n       "
    },
    {
      "name": "name",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The name of this element.\n       "
    },
    {
      "name": "placeholder",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "A placeholder string in addition to the label. If this is set, the label will always float.\n       "
    },
    {
      "name": "readonly",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly` property.\n       "
    },
    {
      "name": "size",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property.\n       "
    },
    {
      "name": "autocapitalize",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize` property.\n       "
    },
    {
      "name": "autocorrect",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect` property.\n       "
    },
    {
      "name": "autosave",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave` property,\nused with type=search.\n       "
    },
    {
      "name": "results",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search.\n       "
    },
    {
      "name": "accept",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file.\n       "
    },
    {
      "name": "multiple",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file.\n       "
    },
    {
      "name": "rows",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "The initial number of rows."
    },
    {
      "name": "maxRows",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "The maximum number of rows this element can grow to until it\nscrolls. 0 means no maximum."
    }
  ],
  "methods": [
    {
      "name": "addOwnKeyBinding",
      "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
      "parameters": [
        {
          "name": "eventString",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "handlerName",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "removeOwnKeyBindings",
      "description": "When called, will remove all imperatively-added key bindings.\n       ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "keyboardEventMatchesKeys",
      "description": "Returns true if a keyboard event matches `eventString`.",
      "parameters": [
        {
          "name": "event",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "eventString",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "BOOLEAN"
    },
    {
      "name": "inputElement",
      "description": "Returns a reference to the input element.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "validate",
      "description": "Validates the input element and sets an error style if needed.",
      "parameters": [],
      "returns": "BOOLEAN"
    },
    {
      "name": "updateValueAndPreserveCaret",
      "description": "Restores the cursor to its original position after updating the value.",
      "parameters": [
        {
          "name": "newValue",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "The value that should be saved."
        }
      ],
      "returns": "UNDEFINED"
    }
  ],
  "events": [
    {
      "name": "focused-changed",
      "description": "Fired when the `focused` property changes.",
      "properties": []
    },
    {
      "name": "disabled-changed",
      "description": "Fired when the `disabled` property changes.",
      "properties": []
    },
    {
      "name": "change",
      "description": "change",
      "properties": []
    },
    {
      "name": "value-changed",
      "description": "Fired when the `value` property changes.",
      "properties": []
    },
    {
      "name": "invalid-changed",
      "description": "Fired when the `invalid` property changes.",
      "properties": []
    },
    {
      "name": "iron-form-element-register",
      "description": "iron-form-element-register",
      "properties": []
    },
    {
      "name": "iron-form-element-unregister",
      "description": "iron-form-element-unregister",
      "properties": []
    }
  ],
  "slots": [],
  "behaviors": [
    "Polymer.PaperInputBehavior",
    "Polymer.IronFormElementBehavior"
  ],
  "mixins": [],
  "description": "`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element."
}
