{
  "name": "paper-icon-button",
  "tag": "paper-icon-button",
  "baseUrl": "paper-icon-button/paper-icon-button.html",
  "version": "2.0.1",
  "properties": [
    {
      "name": "keyEventTarget",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
    },
    {
      "name": "stopKeyboardEventPropagation",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
    },
    {
      "name": "keyBindings",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "pressed",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the user is currently holding down the button.\n       ",
      "readOnly": true
    },
    {
      "name": "toggles",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the button toggles the active state with each tap or press\nof the spacebar.\n       "
    },
    {
      "name": "active",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the button is a toggle and is currently in the active state.\n       "
    },
    {
      "name": "pointerDown",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       ",
      "readOnly": true
    },
    {
      "name": "receivedFocusFromKeyboard",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the input device that caused the element to receive focus\nwas a keyboard.\n       ",
      "readOnly": true
    },
    {
      "name": "ariaActiveAttribute",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The aria attribute to be set if the button is a toggle and in the\nactive state.\n       "
    },
    {
      "name": "focused",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the element currently has focus.\n       ",
      "readOnly": true
    },
    {
      "name": "disabled",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the user cannot interact with this element.\n       "
    },
    {
      "name": "noink",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the element will not produce a ripple effect when interacted\nwith via the pointer.\n       "
    },
    {
      "name": "src",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The URL of an image for the icon. If the src property is specified,\nthe icon property should not be.\n         "
    },
    {
      "name": "icon",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Specifies the icon name or index in the set of icons available in\nthe icon's icon set. If the icon property is specified,\nthe src property should not be.\n         "
    },
    {
      "name": "alt",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Specifies the alternate text for the button, for accessibility.\n         "
    }
  ],
  "methods": [
    {
      "name": "addOwnKeyBinding",
      "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
      "parameters": [
        {
          "name": "eventString",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "handlerName",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "removeOwnKeyBindings",
      "description": "When called, will remove all imperatively-added key bindings.\n       ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "keyboardEventMatchesKeys",
      "description": "Returns true if a keyboard event matches `eventString`.",
      "parameters": [
        {
          "name": "event",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "eventString",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "BOOLEAN"
    },
    {
      "name": "ensureRipple",
      "description": "Ensures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.",
      "parameters": [
        {
          "name": "optTriggeringEvent",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "(optional) event that triggered the\nripple."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "getRipple",
      "description": "Returns the `<paper-ripple>` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "hasRipple",
      "description": "Returns true if this element currently contains a ripple effect.",
      "parameters": [],
      "returns": "BOOLEAN"
    }
  ],
  "events": [
    {
      "name": "active-changed",
      "description": "Fired when the `active` property changes.",
      "properties": []
    },
    {
      "name": "focused-changed",
      "description": "Fired when the `focused` property changes.",
      "properties": []
    },
    {
      "name": "disabled-changed",
      "description": "Fired when the `disabled` property changes.",
      "properties": []
    }
  ],
  "slots": [],
  "behaviors": [
    "Polymer.PaperInkyFocusBehavior",
    "Polymer.IronButtonState",
    "Polymer.IronControlState",
    "Polymer.PaperRippleBehavior",
    "Polymer.IronA11yKeysBehavior"
  ],
  "mixins": [],
  "description": ""
}
