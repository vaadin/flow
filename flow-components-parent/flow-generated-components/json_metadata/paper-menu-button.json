{
  "name": "PaperMenuButton",
  "tag": "paper-menu-button",
  "baseUrl": "paper-menu-button/paper-menu-button.html",
  "version": "2.0.0",
  "properties": [
    {
      "name": "keyEventTarget",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners."
    },
    {
      "name": "stopKeyboardEventPropagation",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
    },
    {
      "name": "keyBindings",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "To be used to express what combination of keys  will trigger the relative\ncallback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`"
    },
    {
      "name": "focused",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the element currently has focus.\n       ",
      "readOnly": true
    },
    {
      "name": "disabled",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the user cannot interact with this element.\n       "
    },
    {
      "name": "opened",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "True if the content is currently displayed.\n           "
    },
    {
      "name": "horizontalAlign",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The orientation against which to align the menu dropdown\nhorizontally relative to the dropdown trigger.\n           "
    },
    {
      "name": "verticalAlign",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The orientation against which to align the menu dropdown\nvertically relative to the dropdown trigger.\n           "
    },
    {
      "name": "dynamicAlign",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the `horizontalAlign` and `verticalAlign` properties will\nbe considered preferences instead of strict requirements when\npositioning the dropdown and may be changed if doing so reduces\nthe area of the dropdown falling outside of `fitInto`.\n           "
    },
    {
      "name": "horizontalOffset",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`. Use a negative value to offset to the\nleft, or a positive value to offset to the right.\n           "
    },
    {
      "name": "verticalOffset",
      "type": [
        "NUMBER"
      ],
      "objectType": [],
      "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`. Use a negative value to offset towards the\ntop, or a positive value to offset towards the bottom.\n           "
    },
    {
      "name": "noOverlap",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "If true, the dropdown will be positioned so that it doesn't overlap\nthe button.\n           "
    },
    {
      "name": "noAnimations",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable animations when opening and closing the\ndropdown.\n           "
    },
    {
      "name": "ignoreSelect",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to disable automatically closing the dropdown after\na selection has been made.\n           "
    },
    {
      "name": "closeOnActivate",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Set to true to enable automatically closing the dropdown after an\nitem has been activated, even if the selection did not change.\n           "
    },
    {
      "name": "openAnimationConfig",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "An animation config. If provided, this will be used to animate the\nopening of the dropdown.\n           "
    },
    {
      "name": "closeAnimationConfig",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "An animation config. If provided, this will be used to animate the\nclosing of the dropdown.\n           "
    },
    {
      "name": "allowOutsideScroll",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.\n           "
    },
    {
      "name": "restoreFocusOnClose",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": "Whether focus should be restored to the button when the menu closes.\n           "
    },
    {
      "name": "contentElement",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "The content element that is contained by the menu button, if any.\n         "
    }
  ],
  "methods": [
    {
      "name": "addOwnKeyBinding",
      "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
      "parameters": [
        {
          "name": "eventString",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "handlerName",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "removeOwnKeyBindings",
      "description": "When called, will remove all imperatively-added key bindings.\n       ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "keyboardEventMatchesKeys",
      "description": "Returns true if a keyboard event matches `eventString`.",
      "parameters": [
        {
          "name": "event",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "eventString",
          "type": [
            "STRING"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "BOOLEAN"
    },
    {
      "name": "toggle",
      "description": "Toggles the drowpdown content between opened and closed.\n         ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "open",
      "description": "Make the dropdown content appear as an overlay positioned relative\nto the dropdown trigger.\n         ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "close",
      "description": "Hide the dropdown content.\n         ",
      "parameters": [],
      "returns": "UNDEFINED"
    }
  ],
  "events": [
    {
      "name": "focused-changed",
      "description": "Fired when the `focused` property changes.",
      "properties": []
    },
    {
      "name": "disabled-changed",
      "description": "Fired when the `disabled` property changes.",
      "properties": []
    },
    {
      "name": "paper-dropdown-close",
      "description": "paper-dropdown-close",
      "properties": []
    },
    {
      "name": "paper-dropdown-open",
      "description": "paper-dropdown-open",
      "properties": []
    },
    {
      "name": "opened-changed",
      "description": "Fired when the `opened` property changes.",
      "properties": []
    },
    {
      "name": "horizontal-offset-changed",
      "description": "Fired when the `horizontalOffset` property changes.",
      "properties": []
    },
    {
      "name": "vertical-offset-changed",
      "description": "Fired when the `verticalOffset` property changes.",
      "properties": []
    }
  ],
  "slots": [
    "dropdown-trigger",
    "dropdown-content"
  ],
  "behaviors": [
    "Polymer.IronA11yKeysBehavior",
    "Polymer.IronControlState"
  ],
  "mixins": [],
  "description": "Material design: [Dropdown buttons](https://www.google.com/design/spec/components/buttons.html#buttons-dropdown-buttons)\n\n`paper-menu-button` allows one to compose a designated \"trigger\" element with\nanother element that represents \"content\", to create a dropdown menu that\ndisplays the \"content\" when the \"trigger\" is clicked.\n\nThe child element assigned to the `dropdown-trigger` slot will be used as the\n\"trigger\" element. The child element assigned to the `dropdown-content` slot will be\nused as the \"content\" element.\n\nThe `paper-menu-button` is sensitive to its content's `iron-select` events. If\nthe \"content\" element triggers an `iron-select` event, the `paper-menu-button`\nwill close automatically.\n\nExample:\n\n    <paper-menu-button>\n      <paper-icon-button icon=\"menu\" slot=\"dropdown-trigger\"></paper-icon-button>\n      <paper-listbox slot=\"dropdown-content\">\n        <paper-item>Share</paper-item>\n        <paper-item>Settings</paper-item>\n        <paper-item>Help</paper-item>\n      </paper-listbox>\n    </paper-menu-button>\n\n### Styling\n\nThe following custom properties and mixins are also available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-menu-button-dropdown-background` | Background color of the paper-menu-button dropdown | `--primary-background-color`\n`--paper-menu-button` | Mixin applied to the paper-menu-button | `{}`\n`--paper-menu-button-disabled` | Mixin applied to the paper-menu-button when disabled | `{}`\n`--paper-menu-button-dropdown` | Mixin applied to the paper-menu-button dropdown | `{}`\n`--paper-menu-button-content` | Mixin applied to the paper-menu-button content | `{}`"
}
