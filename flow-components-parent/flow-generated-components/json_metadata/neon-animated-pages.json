{
  "name": "neon-animated-pages",
  "tag": "neon-animated-pages",
  "baseUrl": "neon-animation/neon-animated-pages.html",
  "version": "2.0.1",
  "properties": [
    {
      "name": "attrForSelected",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "If you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)\n       "
    },
    {
      "name": "selected",
      "type": [
        "STRING",
        "NUMBER"
      ],
      "objectType": [],
      "description": "Gets or sets the selected element. The default is to use the index of the item."
    },
    {
      "name": "selectedItem",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "Returns the currently selected item.",
      "readOnly": true
    },
    {
      "name": "activateEvent",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": ""
    },
    {
      "name": "selectable",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "This is a CSS selector string.  If this is set, only items that match the CSS selector\nare selectable.\n       "
    },
    {
      "name": "selectedClass",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The class to set on elements when selected.\n       "
    },
    {
      "name": "selectedAttribute",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "The attribute to set on elements when selected.\n       "
    },
    {
      "name": "fallbackSelection",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Default fallback if the selection based on selected with `attrForSelected`\nis not found.\n       "
    },
    {
      "name": "items",
      "type": [
        "ARRAY"
      ],
      "objectType": [],
      "description": "The list of items from which a selection can be made.\n       ",
      "readOnly": true
    },
    {
      "name": "animationConfig",
      "type": [
        "OBJECT"
      ],
      "objectType": [],
      "description": "Animation configuration. See README for more info.\n       "
    },
    {
      "name": "entryAnimation",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Convenience property for setting an 'entry' animation. Do not set `animationConfig.entry`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
    },
    {
      "name": "exitAnimation",
      "type": [
        "STRING"
      ],
      "objectType": [],
      "description": "Convenience property for setting an 'exit' animation. Do not set `animationConfig.exit`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
    },
    {
      "name": "animateInitialSelection",
      "type": [
        "BOOLEAN"
      ],
      "objectType": [],
      "description": " if true, the initial page selection will also be animated according to its animation config."
    }
  ],
  "methods": [
    {
      "name": "notifyResize",
      "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "assignParentResizable",
      "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     ",
      "parameters": [
        {
          "name": "parentResizable",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "stopResizeNotificationsFor",
      "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     ",
      "parameters": [
        {
          "name": "target",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "resizerShouldNotify",
      "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
      "parameters": [
        {
          "name": "element",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
        }
      ],
      "returns": "BOOLEAN"
    },
    {
      "name": "indexOf",
      "description": "Returns the index of the given item.",
      "parameters": [
        {
          "name": "item",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "OBJECT"
    },
    {
      "name": "select",
      "description": "Selects the given value.",
      "parameters": [
        {
          "name": "value",
          "type": [
            "STRING",
            "NUMBER"
          ],
          "objectType": [],
          "description": "the value to select."
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "selectPrevious",
      "description": "Selects the previous item.",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "selectNext",
      "description": "Selects the next item.",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "selectIndex",
      "description": "Selects the item at the given index.",
      "parameters": [
        {
          "name": "index",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "forceSynchronousItemUpdate",
      "description": "Force a synchronous update of the `items` property.\n\nNOTE: Consider listening for the `iron-items-changed` event to respond to\nupdates to the set of selectable items after updates to the DOM list and\nselection state have been made.\n\nWARNING: If you are using this method, you should probably consider an\nalternate approach. Synchronously querying for items is potentially\nslow for many use cases. The `items` property will update asynchronously\non its own to reflect selectable items in the DOM.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    },
    {
      "name": "getAnimationConfig",
      "description": "An element implementing `Polymer.NeonAnimationRunnerBehavior` calls this method to configure\nan animation with an optional type. Elements implementing `Polymer.NeonAnimatableBehavior`\nshould define the property `animationConfig`, which is either a configuration object\nor a map of animation type to array of configuration objects.\n     ",
      "parameters": [
        {
          "name": "type",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "playAnimation",
      "description": "Plays an animation with an optional `type`.",
      "parameters": [
        {
          "name": "type",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        },
        {
          "name": "cookie",
          "type": [
            "OBJECT"
          ],
          "objectType": [],
          "description": "Missing documentation!"
        }
      ],
      "returns": "UNDEFINED"
    },
    {
      "name": "cancelAnimation",
      "description": "Cancels the currently running animations.\n     ",
      "parameters": [],
      "returns": "UNDEFINED"
    }
  ],
  "events": [
    {
      "name": "iron-activate",
      "description": "iron-activate",
      "properties": []
    },
    {
      "name": "iron-deselect",
      "description": "iron-deselect",
      "properties": []
    },
    {
      "name": "iron-items-changed",
      "description": "iron-items-changed",
      "properties": []
    },
    {
      "name": "iron-select",
      "description": "iron-select",
      "properties": []
    },
    {
      "name": "selected-changed",
      "description": "Fired when the `selected` property changes.",
      "properties": []
    },
    {
      "name": "selected-item-changed",
      "description": "Fired when the `selectedItem` property changes.",
      "properties": []
    },
    {
      "name": "items-changed",
      "description": "Fired when the `items` property changes.",
      "properties": []
    }
  ],
  "slots": [
    ""
  ],
  "behaviors": [
    "Polymer.IronResizableBehavior",
    "Polymer.IronSelectableBehavior",
    "Polymer.NeonAnimationRunnerBehavior"
  ],
  "mixins": [],
  "description": "Material design: [Meaningful transitions](https://www.google.com/design/spec/animation/meaningful-transitions.html)\n\n`neon-animated-pages` manages a set of pages and runs an animation when switching between them. Its\nchildren pages should implement `Polymer.NeonAnimatableBehavior` and define `entry` and `exit`\nanimations to be run when switching to or switching out of the page."
}
