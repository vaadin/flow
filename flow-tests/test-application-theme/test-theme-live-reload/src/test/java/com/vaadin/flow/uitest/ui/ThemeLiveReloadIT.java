/*
 * Copyright 2000-2020 Vaadin Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package com.vaadin.flow.uitest.ui;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

import net.jcip.annotations.NotThreadSafe;
import org.apache.commons.io.FileUtils;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebElement;

import com.vaadin.flow.component.html.testbench.DivElement;
import com.vaadin.flow.testutil.ChromeBrowserTest;
import com.vaadin.testbench.TestBenchElement;

import static com.vaadin.flow.uitest.ui.ThemeLiveReloadView.ATTACH_IDENTIFIER;
import static com.vaadin.flow.uitest.ui.ThemeLiveReloadView.THEMED_COMPONENT_ID;

@NotThreadSafe
public class ThemeLiveReloadIT extends ChromeBrowserTest {

    private static final String RED_COLOR = "rgba(255, 0, 0, 1)";
    private static final String BORDER_RADIUS = "3px";
    private static final String OTHER_BORDER_RADIUS = "6px";
    private static final String THEME_FOLDER = "frontend/themes/app-theme/";

    private File baseDir;
    private File testStylesCSSFile;
    private File stylesCSSFile;
    private File fontFile;
    private File componentCSSFile;

    @Before
    public void init() {
        baseDir = new File(System.getProperty("user.dir", "."));
        final File themeFolder = new File(baseDir, THEME_FOLDER);

        File fontsDir = new File(themeFolder, "fonts");
        createDirectoryIfAbsent(fontsDir);

        File componentsDir = new File(themeFolder, "components");
        createDirectoryIfAbsent(componentsDir);

        stylesCSSFile = new File(themeFolder, "styles.css");
        testStylesCSSFile = new File(themeFolder, "test-styles.css");
        fontFile = new File(themeFolder, "fonts/ostrich-sans-regular.ttf");
        componentCSSFile = new File(new File(themeFolder, "components"),
                "vaadin-text-field.css");
    }

    @After
    public void cleanUp() throws IOException {
        if (needsCleanUp()) {
            doActionAndWaitUntilLiveReloadComplete(this::removeGeneratedFiles);
        }
    }

    private void removeGeneratedFiles() {
        try {
            deleteBackgroundAndFontStyles();
            deleteFile(componentCSSFile);
        } catch (Exception e) {
            throw new RuntimeException("Couldn't cleanup test files", e);
        }
    }

    @Test
    public void webpackLiveReload_newCssAndFontCreatedAndDeleted_stylesUpdatedOnFly() {
        open();
        Assert.assertFalse(
                "Red background is not expected before applying the styles",
                isCustomBackGroundColor());
        Assert.assertTrue(
                "Expected styles.css file to be auto-generated by flow",
                stylesCSSFile.exists());
        Assert.assertFalse("Expected no test-styles.css file exists before "
                + "applying the styles", testStylesCSSFile.exists());
        Assert.assertFalse("Expected no font file in the theme folder before "
                + "applying the font styles", fontFile.exists());

        // Cannot split those tests into two separate methods, because, for
        // some reason, even though the @NotThreadSafe is present on the
        // class, seems they are running in parallel. Thus, since they can
        // change a single 'styles.css' simultaneously, they can erase the
        // styles of each other, and the expected condition fails.

        // Live reload upon adding a custom background styles
        doActionAndWaitUntilLiveReloadComplete(this::createCustomBackground);
        waitUntilCustomBackgroundColor();

        // Live reload upon adding a new font styles
        doActionAndWaitUntilLiveReloadComplete(() -> {
            copyFontFile();
            createCustomFontStyles();
        });
        waitUntilCustomFont();

        // Live reload upon file deletion
        doActionAndWaitUntilLiveReloadComplete(
                this::deleteBackgroundAndFontStyles);
        waitUntilInitialStyles();
    }

    @Test
    public void webpackLiveReload_newComponentCssCreatedAndDeleted_stylesUpdatedOnFly() {
        open();
        Assert.assertFalse(
                "Border radius for themed component is not expected before "
                        + "applying the styles",
                isComponentCustomStyle(BORDER_RADIUS));

        // Live reload upon adding a new component styles file
        doActionAndWaitUntilLiveReloadComplete(
                () -> createOrUpdateComponentCSSFile(BORDER_RADIUS));
        waitUntilComponentCustomStyle(BORDER_RADIUS);

        // Live reload upon updating component styles file
        doActionAndWaitUntilLiveReloadComplete(
                () -> createOrUpdateComponentCSSFile(OTHER_BORDER_RADIUS));
        waitUntilComponentCustomStyle(OTHER_BORDER_RADIUS);

        // Live reload upon file deletion
        doActionAndWaitUntilLiveReloadComplete(this::deleteComponentStyles);
        waitUntilInitialBorderRadius();
    }

    private void waitUntilCustomBackgroundColor() {
        waitUntil(driver -> isCustomBackGroundColor());
    }

    private void waitUntilInitialStyles() {
        waitUntil(driver -> !isCustomBackGroundColor() && !isCustomFont());
    }

    private void waitUntilInitialBorderRadius() {
        waitUntil(driver -> !isComponentCustomStyle(BORDER_RADIUS)
                && !isComponentCustomStyle(OTHER_BORDER_RADIUS));
    }

    private void waitUntilCustomFont() {
        waitUntil(driver -> isCustomFont());
    }

    private void waitUntilComponentCustomStyle(String borderRadius) {
        waitUntil(driver -> isComponentCustomStyle(borderRadius));
    }

    private boolean isCustomBackGroundColor() {
        try {
            final WebElement html = findElement(By.tagName("html"));
            return RED_COLOR.equals(html.getCssValue("background-color"));
        } catch (StaleElementReferenceException e) {
            return false;
        }
    }

    private boolean isComponentCustomStyle(String borderRadius) {
        try {
            TestBenchElement themedTextField = $(TestBenchElement.class)
                    .id(THEMED_COMPONENT_ID);
            TestBenchElement input = themedTextField.$(DivElement.class)
                    .attribute("class", "vaadin-text-field-container").first()
                    .$(DivElement.class).attribute("part", "input-field")
                    .first();
            return borderRadius.equals(input.getCssValue("border-radius"));
        } catch (StaleElementReferenceException e) {
            return false;
        }
    }

    private boolean isCustomFont() {
        try {
            final WebElement body = findElement(By.tagName("html"));
            return "Ostrich".equals(body.getCssValue("font-family"));
        } catch (StaleElementReferenceException e) {
            return false;
        }
    }

    private void createCustomBackground() {
        // @formatter:off
        final String backgroundStyle =
                "html {" +
                "    background-color: " + RED_COLOR  + ";" +
                "}";
        // @formatter:on
        createTestStylesCSS(backgroundStyle);
    }

    private void createCustomFontStyles() {
        // @formatter:off
        final String fontStyle =
                "@font-face {" +
                "    font-family: \"Ostrich\";" +
                "    src: url(\"./fonts/" + fontFile.getName() + "\") format(\"TrueType\");" +
                "}" +
                "html {" +
                "    font-family: \"Ostrich\";" +
                "}";
        // @formatter:on
        createTestStylesCSS(fontStyle);
    }

    private void createTestStylesCSS(String styles) {
        try {
            final String stylesCssContent = "@Import \"./test-styles.css\";";
            FileUtils.write(testStylesCSSFile, styles,
                    StandardCharsets.UTF_8.name());
            FileUtils.write(stylesCSSFile, stylesCssContent,
                    StandardCharsets.UTF_8.name());
            waitUntil(driver -> testStylesCSSFile.exists());
        } catch (IOException e) {
            throw new RuntimeException(
                    "Failed to apply custom styles:\n" + styles, e);
        }
    }

    private void copyFontFile() {
        try {
            File copyFontFrom = new File(baseDir,
                    "frontend/fonts/ostrich-sans-regular.ttf");
            FileUtils.copyFile(copyFontFrom, fontFile);
            waitUntil(driver -> fontFile.exists());
        } catch (IOException e) {
            throw new RuntimeException("Failed to copy font file", e);
        }
    }

    private void createOrUpdateComponentCSSFile(String borderRadius) {
        try {
            // @formatter:off
            final String componentStyles =
                    "[part=\"input-field\"] {\n" +
                    "    border-radius: " + borderRadius + ";\n" +
                    "}";
            // @formatter:on
            FileUtils.write(componentCSSFile, componentStyles,
                    StandardCharsets.UTF_8.name());
            waitUntil(driver -> componentCSSFile.exists());
        } catch (IOException e) {
            throw new RuntimeException("Failed to apply component styles", e);
        }
    }

    private void deleteBackgroundAndFontStyles() {
        cleanStylesCss();
        deleteFile(testStylesCSSFile);
        deleteFile(fontFile);
    }

    private void deleteComponentStyles() {
        deleteFile(componentCSSFile);
    }

    private void cleanStylesCss() {
        try {
            FileUtils.write(stylesCSSFile, "", StandardCharsets.UTF_8.name());
        } catch (IOException e) {
            throw new RuntimeException("Failed to clean-up 'styles.css'", e);
        }
    }

    private void deleteFile(File fileToDelete) {
        if (fileToDelete != null && fileToDelete.exists()
                && !fileToDelete.delete()) {
            Assert.fail("Unable to delete " + fileToDelete);
        }
    }

    private boolean needsCleanUp() throws IOException {
        return testStylesCSSFile.exists() || fontFile.exists()
                || componentCSSFile.exists()
                || !FileUtils
                        .readFileToString(stylesCSSFile, StandardCharsets.UTF_8)
                        .isEmpty();
    }

    private void doActionAndWaitUntilLiveReloadComplete(Runnable action) {
        final String initialAttachId = getAttachIdentifier();
        action.run();
        waitForLiveReload(initialAttachId);
    }

    private String getAttachIdentifier() {
        int attempts = 0;
        while (attempts < 10) {
            try {
                waitForElementPresent(By.id(ATTACH_IDENTIFIER));
                return findElement(By.id(ATTACH_IDENTIFIER)).getText();
            } catch (StaleElementReferenceException
                    | NoSuchElementException e) {
                // go to next attempt
                attempts++;
            }
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                Assert.fail(
                        "Test interrupted while waiting for attach identifier");
            }
        }
        Assert.fail("Attach Identifier Element waiting timeout");
        return null;
    }

    private void createDirectoryIfAbsent(File dir) {
        if (!dir.exists() && !dir.mkdir()) {
            Assert.fail("Unable to create folder " + dir);
        }
    }

    private void waitForLiveReload(final String initialAttachId) {
        waitUntil(d -> {
            try {
                final String newViewId = getAttachIdentifier();
                return !initialAttachId.equals(newViewId);
            } catch (StaleElementReferenceException e) {
                return false;
            }
        });
    }
}
