/*
 * Copyright 2000-2016 Vaadin Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.vaadin.hummingbird.template;

import com.vaadin.hummingbird.StateNode;
import com.vaadin.hummingbird.dom.Element;
import com.vaadin.hummingbird.dom.ElementStateProvider;

/**
 * A template node that generates child elements based on state node contents.
 * This node does not contribute an element of its own, but the generated
 * elements are instead represented as siblings of the DOM elements defined by
 * siblings of this template node.
 *
 * @author Vaadin Ltd
 */
public abstract class GeneratorTemplateNode extends TemplateNode {

    /**
     * Creates a new generator node.
     *
     * @param parent
     *            the parent of the new template node, not null
     */
    public GeneratorTemplateNode(TemplateNode parent) {
        super(parent);
        assert parent != null : "A generator can't be the root of a template";
    }

    @Override
    protected ElementStateProvider createStateProvider() {
        // Generator is not an element in itself
        return null;
    }

    /**
     * Gets the number of child elements generated by this node.
     *
     * @param templateStateNode
     *            the state node of the template for which elements are
     *            generated
     * @return the number of child elements to generate
     */
    public abstract int getGeneratedElementCount(StateNode templateStateNode);

    /**
     * Gets a generated element by index.
     *
     * @param index
     *            the index of the element to generate
     * @param templateStateNode
     *            the state node of the template for which the element is
     *            generated
     * @return a generated element instance, not <code>null</code>
     */
    public abstract Element getElement(int index, StateNode templateStateNode);

    /**
     * Gets the parent of an element generated by this generator.
     *
     * @param node
     *            the state node of the generated element, not <code>null</code>
     * @return the parent element, not <code>null</code>
     */
    public abstract Element getParent(StateNode node);

}
