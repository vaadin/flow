name: Flow Validation
on:
  push:
    branches: [main, '24.9', '24.8', '24.7', '23.6']
  workflow_dispatch:
  pull_request_target:
    types: [opened, synchronize, reopened, edited]
permissions:
  contents: write
  pull-requests: write
  issues: write
concurrency:
  group: ${{ github.head_ref }} || ${{ github.ref_name }}
  cancel-in-progress: true
env:
  HEAD_REF: ${{ github.head_ref }}
  REF_NAME: ${{ github.ref_name }}
  HEAD_SHA: ${{ github.event.pull_request.head.sha }}
  USE_FORMATTED_CODE: false
jobs:
  check-permissions:
    uses: ./.github/workflows/check-permissions.yml

  formatter:
    needs: check-permissions
    if: github.event_name == 'pull_request_target'
    name: Format and auto-commit
    runs-on: ubuntu-latest
    timeout-minutes: 120
    outputs:
      changes_committed: ${{ steps.commit-changes.outputs.changes_committed }}

    steps:
      - name: Check for required token
        run: |
          if [ -z "${{ secrets.VAADIN_BOT_TOKEN }}" ]; then
            echo "::error::VAADIN_BOT_TOKEN secret is required for formatter to trigger workflows after committing changes"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.VAADIN_BOT_TOKEN }}
          fetch-depth: 2

      - name: Check if last commit was from formatter bot
        id: check-loop
        run: |
          last_commit_author=$(git log -1 --pretty=format:'%an')
          echo "Last commit author: $last_commit_author"

          if [ "$last_commit_author" = "github-actions[bot]" ]; then
            echo "Last commit was from formatter bot - formatting verification passed"
            echo "loop_detected=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "loop_detected=false" >> $GITHUB_OUTPUT

      - name: Set up JDK 21
        if: steps.check-loop.outputs.loop_detected == 'false'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run formatter
        if: steps.check-loop.outputs.loop_detected == 'false'
        id: formatter
        run: |
          echo "Running formatter..."
          mvn -B -q spotless:apply -P benchmark 2>&1 | grep -v null || true

          # Check for modified files
          files=$(git status --porcelain | awk '{print $2}')
          modified=$(echo "$files" | wc -w | xargs)

          echo "modified=$modified" >> $GITHUB_OUTPUT

          if [ "$modified" -gt 0 ]; then
            echo "Modified files:"
            echo "$files"
            echo "files<<EOF" >> $GITHUB_OUTPUT
            echo "$files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        id: commit-changes
        if: steps.check-loop.outputs.loop_detected == 'false' && steps.formatter.outputs.modified != '0'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add only the files modified by the formatter
          git add -u
          git commit -m "chore: apply code formatting with spotless"

          git push

          echo "changes_committed=true" >> $GITHUB_OUTPUT
          echo "âœ… Formatting changes committed and pushed. Workflow will retrigger automatically." >> $GITHUB_STEP_SUMMARY

      - name: Generate diff for artifact
        if: steps.formatter.outputs.modified != '0'
        run: |
          git diff HEAD~1 > formatter-diff.txt

      - name: Upload formatter diff
        if: steps.formatter.outputs.modified != '0'
        uses: actions/upload-artifact@v4
        with:
          name: formatter-diff
          path: formatter-diff.txt
          retention-days: 30

      - name: Find existing comment
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '<!-- tc-formatter -->'

      - name: Create or update comment for committed changes
        if: steps.formatter.outputs.modified != '0'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            <!-- tc-formatter -->
            ### âœ… Formatter Auto-Applied

            Formatting issues were detected and **automatically fixed**. Changes have been committed to this PR.

            The formatting changes affected **${{ steps.formatter.outputs.modified }} files**.

            Files modified:
            ```
            ${{ steps.formatter.outputs.files }}
            ```

            Please pull the latest changes before continuing work on this branch.

      - name: Delete comment if formatting is correct
        if: steps.formatter.outputs.modified == '0' && steps.find-comment.outputs.comment-id != ''
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.find-comment.outputs.comment-id }}
            })

      - name: Stop workflow if changes were committed
        if: steps.commit-changes.outputs.changes_committed == 'true'
        run: |
          echo "::notice::Formatting changes committed. Stopping this workflow run. A new workflow will be triggered automatically."
          exit 1

  build:
    needs: [check-permissions, formatter]
    if: always() && needs.check-permissions.result == 'success' && needs.formatter.result == 'success'
    timeout-minutes: 30
    runs-on: ubuntu-24.04
    outputs:
      matrix-unit: ${{ steps.set-matrix.outputs.matrix-unit }}
      matrix-it: ${{ steps.set-matrix.outputs.matrix-it }}
    steps:
      - run: echo "Concurrency Group = ${HEAD_REF:-$REF_NAME}"
      - name: Check secrets
        run: |
          [ -z "${{secrets.TB_LICENSE}}" ] \
            && echo "ðŸš« **TB_LICENSE** is not defined, check that **${{github.repository}}** repo has a valid secret" \
            | tee -a $GITHUB_STEP_SUMMARY && exit 1 || exit 0
      - uses: actions/checkout@v4
        with:
          ref: ${{env.HEAD_SHA}}
      - uses: actions/setup-node@v4
        with:
          node-version: '24.9.0'
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.7
      - name: Set flow version to 999.99-SNAPSHOT
        run: |
          ./scripts/computeMatrix.js set-version --version=999.99-SNAPSHOT
      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Generate matrices
        id: set-matrix
        run: |
          echo "matrix-it=$(./scripts/computeMatrix.js it-tests --parallel=13 current module args)" >> $GITHUB_OUTPUT
          echo "matrix-unit=$(./scripts/computeMatrix.js unit-tests --parallel=2 current module args)" >> $GITHUB_OUTPUT
      - name: Compile and Install Flow
        run: |
          cmd="mvn install -B -ntp -DskipTests  -pl \!flow-plugins/flow-gradle-plugin"
          eval $cmd -T 2C -q || eval $cmd
      - name: Save workspace
        run: |
          tar cf workspace.tar -C ~/ $(cd ~/ && echo .m2/repository/com/vaadin/*/999.99-SNAPSHOT)
          tar rf workspace.tar $(find . -d -name target)
      - uses: actions/upload-artifact@v4
        with:
          name: saved-workspace
          path: workspace.tar
  unit-tests:
    needs: build
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.build.outputs.matrix-unit)}}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{env.HEAD_SHA}}
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.7
      - name: Set flow version to 999.99-SNAPSHOT
        run: |
          ./scripts/computeMatrix.js set-version --version=999.99-SNAPSHOT
      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - uses: actions/download-artifact@v4
        if: ${{ github.run_attempt == 1 }}
        with:
          name: saved-workspace
      - name: Restore Workspace
        if: ${{ github.run_attempt == 1 }}
        run: |
          set -x
          tar xf workspace.tar
          tar cf - .m2 | (cd ~ && tar xf -)
      - name: Compile and Install Flow
        if: ${{ github.run_attempt > 1 }}
        run: |
          ./scripts/computeMatrix.js set-version --version=999.99-SNAPSHOT
          cmd="mvn install -B -ntp -DskipTests  -pl \!flow-plugins/flow-gradle-plugin"
          eval $cmd -T 2C -q || eval $cmd
      - name: Set TB License
        run: |
          TB_LICENSE=${{secrets.TB_LICENSE}}
          mkdir -p ~/.vaadin/
          echo '{"username":"'`echo $TB_LICENSE | cut -d / -f1`'","proKey":"'`echo $TB_LICENSE | cut -d / -f2`'"}' > ~/.vaadin/proKey
      - name: Unit Test
        run: |
          echo Running TESTS: ${{ strategy.job-index }} ${{matrix.module}} ${{ matrix.args }}
          [ -n "${{matrix.module}}" ] && \
            ARGS="-pl ${{matrix.module}} -Dtest=${{matrix.args}}" || \
            ARGS="-pl ${{matrix.args}}"
          cmd="mvn -B -ntp -T 1C $ARGS"
          set -x -e -o pipefail
          $cmd verify -Dmaven.javadoc.skip=false | tee mvn-unit-tests-${{matrix.current}}.out
      - name: Package test-report files
        if: ${{ failure() || success() }}
        run: find . -name surefire-reports -o -name failsafe-reports -o -name error-screenshots -o -name "mvn-*.out" | tar -czf tests-report-unit-${{matrix.current}}.tgz -T -
      - uses: actions/upload-artifact@v4
        if: ${{ failure() || success() }}
        with:
          name: tests-output-unit-${{ matrix.current }}
          path: tests-report-*.tgz
  it-tests:
    needs: build
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.build.outputs.matrix-it)}}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{env.HEAD_SHA}}
      - uses: actions/setup-node@v4
        with:
          node-version: '24.9.0'
      - uses: pnpm/action-setup@v3
        with:
          version: '8.6.11'
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.7
      - name: Set flow version to 999.99-SNAPSHOT
        run: |
          ./scripts/computeMatrix.js set-version --version=999.99-SNAPSHOT
      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - uses: actions/download-artifact@v4
        if: ${{ github.run_attempt == 1 }}
        with:
          name: saved-workspace
      - name: Restore Workspace
        if: ${{ github.run_attempt == 1 }}
        run: |
          tar xf workspace.tar
          tar cf - .m2 | (cd ~ && tar xf -)
      - name: Compile and Install Flow
        if: ${{ github.run_attempt > 1 }}
        run: |
          ./scripts/computeMatrix.js set-version --version=999.99-SNAPSHOT
          cmd="mvn install -B -ntp -DskipTests  -pl \!flow-plugins/flow-gradle-plugin"
          eval $cmd -T 2C -q || eval $cmd
      - name: Set TB License
        run: |
          TB_LICENSE=${{secrets.TB_LICENSE}}
          mkdir -p ~/.vaadin/
          echo '{"username":"'`echo $TB_LICENSE | cut -d / -f1`'","proKey":"'`echo $TB_LICENSE | cut -d / -f2`'"}' > ~/.vaadin/proKey
      - name: Compile Shared modules
        run: |
          if [ ${{matrix.current}} -eq 2 -o ${{matrix.current}} -eq 3 ]; then
            cmd="mvn install -B -ntp -DskipTests -Pit-shared-modules -amd -pl flow-tests"
            $cmd -T 1C || $cmd
          fi
          if [ ${{matrix.current}} -eq 4 -o ${{matrix.current}} -eq 5 -o ${{matrix.current}} -eq 6 ]; then
            cmd="mvn install -B -ntp -DskipTests -Pit-shared-spring-modules -amd -pl flow-tests"
            $cmd -T 1C || $cmd
          fi
      - name: Run ITs
        run: |
          [ -n "${{matrix.module}}" ] && \
            ARGS="-Dfailsafe.forkCount=4 -pl ${{matrix.module}} -Dit.test=${{matrix.args}}" || \
            ARGS="-pl ${{matrix.args}}"
          cmd="mvn -V -B -ntp -e -fae -Dcom.vaadin.testbench.Parameters.testsInParallel=5 -Dfailsafe.rerunFailingTestsCount=2 -Dmaven.wagon.httpconnectionManager.ttlSeconds=25 -Dmaven.wagon.http.retryHandler.count=3 -Pbun $ARGS"
          set -x -e -o pipefail
          $cmd verify | tee -a mvn-it-tests-${{matrix.current}}.out
      - name: Package test-report files
        if: ${{ failure() || success() }}
        run: find . -name surefire-reports -o -name failsafe-reports -o -name error-screenshots -o -name "mvn-*.out" | tar -czf tests-report-it-${{matrix.current}}.tgz -T -
      - uses: actions/upload-artifact@v4
        if: ${{ failure() || success() }}
        with:
          name: tests-output-it-${{ matrix.current }}
          path: tests-report-*.tgz
  test-results:
    permissions:
      actions: write
      issues: read
      checks: write
      pull-requests: write
    if: ${{ failure() || success() }}
    needs: [unit-tests, it-tests]
    runs-on: ubuntu-24.04
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: tests-output
          pattern: tests-output-*
      - uses: actions/checkout@v4
        with:
          ref: ${{env.HEAD_SHA}}
      - uses: actions/download-artifact@v4
        with:
          name: tests-output
      - name: extract downloaded files
        run: for i in *.tgz; do tar xvf $i; done
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          junit_files: "**/target/*-reports/TEST*.xml"
          check_run_annotations: all tests, skipped tests
      - uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            saved-workspace
      - name: Compute Stats
        run: |
          ./scripts/computeMatrix.js test-results >> $GITHUB_STEP_SUMMARY
      - name: Set Failure Status
        if: ${{ always() && (needs.unit-tests.result != 'success' || needs.it-tests.result != 'success') }}
        run: |
            echo "ðŸš« THERE ARE TEST MODULES WITH FAILURES or BEEN CANCELLED" | tee -a $GITHUB_STEP_SUMMARY
            exit 1
