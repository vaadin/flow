name: Flow Validation
on: [pull_request, workflow_dispatch]
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      matrix-unit: ${{ steps.set-matrix.outputs.matrix-unit }}
      matrix-it: ${{ steps.set-matrix.outputs.matrix-it }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16.0'
      - uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Set flow version to 999.99-SNAPSHOT
        run: |
          ./scripts/computeMatrix.js set-version --version=999.99-SNAPSHOT
      - name: Generate matrices
        id: set-matrix
        run: |
          echo "::set-output name=matrix-unit::$(./scripts/computeMatrix.js unit-tests --parallel=2 current module args)"
          echo "::set-output name=matrix-it::$(./scripts/computeMatrix.js it-tests --parallel=11 current module args)"
      - name: Compile and Install Flow
        run: |
          cmd="mvn install -B -DskipTests -pl \!flow-plugins/flow-gradle-plugin"
          # run twice if fails, it might be a multithread failure
          eval $cmd -T 2C -q || eval $cmd
      - name: Save workspace
        run: |
          mv ~/.m2/ .
          tar cf workspace.tar .m2 `find . -name target -o -name "pom*.xml"`
      - uses: actions/upload-artifact@v2
        with:
          name: saved-workspace
          path: workspace.tar
  unit-tests:
    needs: build
    outputs:
      failure: ${{steps.set-failure.outputs.failure}}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.build.outputs.matrix-unit)}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - uses: actions/download-artifact@v2
        with:
          name: saved-workspace
      - name: Restore Workspace
        run: |
          tar xf workspace.tar
          rm -rf ~/.m2 && mv -f .m2 ~/
      - name: Unit Test
        run: |
          echo Running TESTS: ${{ strategy.job-index }} ${{matrix.module}} ${{ matrix.args }}
          [ -n "${{matrix.module}}" ] && \
            ARGS="-pl ${{matrix.module}} -Dtest=${{matrix.args}}" || \
            ARGS="-pl ${{matrix.args}}"
          cmd="mvn -B -T 1C $ARGS"
          set -x
          $cmd -T 1C verify ||Â $cmd -fae clean verify
      - name: Set build status flag
        id: set-failure
        if: ${{ failure() }}
        run: echo "::set-output name=failure::true"
      - uses: actions/upload-artifact@v2
        if: ${{ failure() || success() }}
        with:
          name: test-reports
          path: "**/target/*-reports/*"
  it-tests:
    needs: build
    outputs:
      failure: ${{steps.set-failure.outputs.failure}}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.build.outputs.matrix-it)}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable
      - uses: nanasess/setup-chromedriver@master
      - uses: actions/download-artifact@v2
        with:
          name: saved-workspace
      - name: Restore Workspace
        run: |
          tar xf workspace.tar
          rm -rf ~/.m2 && mv -f .m2 ~/
      - name: Set TB License
        run: |
          TB_LICENSE=${{secrets.TB_LICENSE}}
          mkdir -p ~/.vaadin/
          echo '{"username":"'`echo $TB_LICENSE | cut -d / -f1`'","proKey":"'`echo $TB_LICENSE | cut -d / -f2`'"}' > ~/.vaadin/proKey
      - name: Install required modules
        run: |
          if echo ${{matrix.args}} | grep -q test-fusion-csrf-context; then
            mvn -B -q install -DskipITs -pl flow-tests/test-fusion-csrf
          fi
      - name: Run ITs
        run: |
          echo TESTING: ${{ strategy.job-index }} ${{matrix.module}} ${{ matrix.args }}
          [ -n "${{matrix.module}}" ] && \
            ARGS="-Dfailsafe.forkCount=4 -pl ${{matrix.module}} -Dit.test=${{matrix.args}}" || \
            ARGS="-pl ${{matrix.args}}"
          cmd="mvn -V -B -e -Dcom.vaadin.testbench.Parameters.testsInParallel=5 $ARGS"
          set -x
          eval $cmd verify -fae -Dfailsafe.rerunFailingTestsCount=2 || eval $cmd clean verify
      - name: Set build status flag
        id: set-failure
        if: ${{ failure() }}
        run: echo "::set-output name=failure::true"
      - uses: actions/upload-artifact@v2
        if: ${{ failure() || success() }}
        with:
          name: test-reports
          path: |
            **/target/*-reports/*
            **/error-screenshots/*.png
  test-results:
    if: ${{ failure() || success() }}
    needs: [unit-tests, it-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: test-reports
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        with:
          files: "**/target/*-reports/TEST*.xml"
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: saved-workspace
      - name: Check Failure Status
        run: |
          fail="${{ needs.unit-tests.outputs.failure }}${{ needs.it-tests.outputs.failure }}"
          [ -n "$fail" ] && echo "!! THERE ARE TEST MODULES WITH FAILURES !!" >&2 && exit 1 || exit 0
