name: Flow Validation
on:
  push:
    branches: [master, '23.1', '23.0', '9.0']
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    outputs:
      matrix-unit: ${{ steps.set-matrix.outputs.matrix-unit }}
      matrix-it: ${{ steps.set-matrix.outputs.matrix-it }}
    steps:
      - uses: actions-cool/check-user-permission@v2
        id: check
        with:
          require: 'write'
      - name: Check Secrets
        run: |
          [ "${{ steps.check.outputs.require-result }}" != "true" ] \
            && echo "::error::!! NO USER PERMISSIONS FOR RUNNING VALIDATION: Check if the PR is from an external contributor !!" \
            && exit 1 || exit 0
          TB_LICENSE="${{secrets.TB_LICENSE}}"
          [ -z "$TB_LICENSE" ] \
            && echo "::error::!! ERROR NO TB_LICENSE: Check that this repo has a valid TB_LICENSE secret !!" \
            && exit 1 || exit 0
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Set flow version to 999.99-SNAPSHOT
        run: |
          ./scripts/computeMatrix.js set-version --version=999.99-SNAPSHOT
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Generate matrices
        id: set-matrix
        run: |
          echo "::set-output name=matrix-it::$(./scripts/computeMatrix.js it-tests --parallel=13 current module args)"
          echo "::set-output name=matrix-unit::$(./scripts/computeMatrix.js unit-tests --parallel=1 current module args)"
      - name: Compile and Install Flow
        run: |
          cmd="mvn install -B -ntp -DskipTests  -pl \!flow-plugins/flow-gradle-plugin"
          eval $cmd -T 2C -q || eval $cmd
      - name: Save workspace
        run: |
          tar cf workspace.tar -C ~/ $(cd ~/ && echo .m2/repository/com/vaadin/*/999.99-SNAPSHOT)
          tar rf workspace.tar $(find . -d -name target)
      - uses: actions/upload-artifact@v3
        with:
          name: saved-workspace
          path: workspace.tar
  unit-tests:
    needs: build
    timeout-minutes: 20
    outputs:
      failure: ${{steps.set-failure.outputs.failure}}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.build.outputs.matrix-unit)}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Set flow version to 999.99-SNAPSHOT
        run: |
          ./scripts/computeMatrix.js set-version --version=999.99-SNAPSHOT
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - uses: actions/download-artifact@v3
        with:
          name: saved-workspace
      - name: Restore Workspace
        run: |
          set -x
          tar xf workspace.tar
          tar cf - .m2 | (cd ~ && tar xf -)
      - name: Unit Test
        run: |
          echo Running TESTS: ${{ strategy.job-index }} ${{matrix.module}} ${{ matrix.args }}
          ARGS="-pl flow-plugins/flow-gradle-plugin -Pgradle -am"
          cmd="mvn -B -ntp -T 1C $ARGS"
          set -x -e -o pipefail
          $cmd verify | tee mvn-unit-tests-${{matrix.current}}.out
      - name: Set build status flag
        id: set-failure
        if: ${{ failure() || cancelled() }}
        run: echo "::set-output name=failure::true"
      - uses: actions/upload-artifact@v3
        if: ${{ failure() || success() }}
        with:
          name: saved-outputs
          path: |
            **/target/*-reports/*
            mvn-*.out
  test-results:
    if: ${{ failure() || success() }}
    needs: [unit-tests, it-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/download-artifact@v3
        with:
          name: saved-outputs
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: "**/target/*-reports/TEST*.xml"
          check_run_annotations: all tests, skipped tests
          check_run_annotations_branch: master, 9.0
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            saved-workspace
            saved-outputs
      - name: Compute Stats
        run: |
          ./scripts/computeMatrix.js test-results
          ./scripts/computeMatrix.js clean-success
      - uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-reports
          path: |
            **/target/*-reports/*
            **/error-screenshots/*.png
            mvn-*.out
      - name: Check Failure Status
        run: |
          fail="${{ needs.unit-tests.outputs.failure }}${{ needs.it-tests.outputs.failure }}"
          [ -n "$fail" ] && echo "::error::!! THERE ARE TEST MODULES WITH FAILURES !!" && exit 1 || exit 0
