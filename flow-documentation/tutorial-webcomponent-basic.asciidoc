ifdef::env-github[:outfilesuffix: .asciidoc]
= Basic Integration of a Polymer Web Component

This tutorial covers setting up a basic web component and importing needed resources. For related tutorials, see

* <<tutorial-webcomponent-attributes-and-properties#,Using Attributes and Properties with a Polymer Web Component>>
* <<tutorial-webcomponent-events#,Using Events with a Polymer Web Component>>
* <<deprecated/tutorial-template-webcomponents#, *Deprecated* Using Web Components in a Template>>

A web component is a reusable client-side component that you can use in the same way as regular HTML elements.
It has a custom HTML tag name and it's mainly configured by setting HTML attributes or properties.
The contents of the web component is defined by adding text or other DOM elements as children inside the component's own DOM element.

The Java class for integrating  https://elements.polymer-project.org/elements/paper-slider[`<paper-slider>`] can start out as follows:

[source,java]
----
@Tag("paper-slider")
@HtmlImport("bower_components/paper-slider/paper-slider.html")
public class PaperSlider extends Component {
    public PaperSlider() {
    }
}
----

You specify the tag name of the element using the `@Tag` annotation, just like you would with any built in element such as `<div>`. The actual implementation of the `<paper-slider>` element is in the `paper-slider.html` file, which you can  import using `@HtmlImport`.

The imported file `paper-slider.html` contains a client side code which needs to be available as a web resource. So it should be 
fetched and saved in some directory which is served by your server. 
If you use maven then just add  the following snippet in your `pom.xml` file inside your `plugins` section:

[source,xml]
----
    <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>1.4<</version>
        <configuration>
            <nodeVersion>v7.10.0</nodeVersion>
            <npmVersion>5.0.3</npmVersion>
        </configuration>
        <executions>
            <execution>
                <id>install-node-and-npm</id>
                <goals>
                    <goal>install-node-and-npm</goal>
                    <goal>npm</goal>
                    <goal>bower</goal>
                </goals>
                <configuration>
                    <workingDirectory>src/main/frontend</workingDirectory>
                </configuration>
            </execution>
        </executions>
    </plugin>
----

This plugin will install for you tools for webcomponents management (`npm` and `bower`) assuming you are using 
`src/main/frontend` directory as a web resource folder in your project. This directory should have files `bower.json` and
`package.json`.

The `bower.json` content is:

[source,json]
----
{
  "name": "your project name",
  "homepage": "",
  "authors": [],
  "description": "",
  "main": "",
  "license": "Apache2",
  "private": true,
  "ignore": [
    "**/.*",
    "node_modules",
    "bower_components",
    "test",
    "tests"
  ],
  "dependencies": {
    "polymer": "2.0.0",
    "paper-input": "2.0.0"
  }
}
----

The `package.json` content is:

[source,json]
----
{
  "name": "your project name",
  "version": "1.0.0",
  "description": "This file exists only to define the Bower version",
  "main": "",
  "dependencies": {
    "bower": "^1.8.0"
  },
  "devDependencies": {},
  "scripts": {
  },
  "author": "",
  "license": "Apache-2.0"
}
----

[NOTE]
You should take care explicitly about availability of your `src/main/frontend` folder 
as a _Web resource_ served by your Web server.  It means that some additional configuration
might be required. E.g. jetty requires this kind of configuration:

[source,json]
----
    <plugin>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>
        <configuration>
            <webAppConfig>
                <resourceBases>
                    <resourceBase>src/main/frontend</resourceBase>
                </resourceBases>
            </webAppConfig>
        </configuration>
    </plugin>
----

In case you don't use maven you should take care about webcomponent files by yourself.
In this example it is assumed that you are using bower and have a `bower_components` folder in the root of you `WAR` file.

You can set up the `bower_components` folder by running

[source,sh]
----
bower init
----

[NOTE]
To install `bower`, you first need to install _Node.js_ through a https://nodejs.org/en/download/package-manager/[package manager] or by https://nodejs.org/en/download/[downloading the installer].
You can then install `bower` by running `npm install -g bower`.

`bower init` will ask a you couple of questions and it creates the `bower.json` file.
The default answers for all the questions are suitable for this kind of integration, so you can simply proceed by pressing `enter` to accept each default answer.

The following command will install the `paper-slider` component.

[source,sh]
----
bower install paper-slider --save
----

You can do the same thing via editing the `bower.json` file in the same way as it's shown above and run `bower install`.

[NOTE]
You can edit the `bower.json` file directly and add there any number of components you need of course. 
The `bower install` command will install all of them based on the `bower.json` content for you.

With this basic integration, you can use add the `PaperSlider` class to a view to see that it works:
[source,java]
----
public class PaperSliderView extends Div implements View {
    public PaperSliderView() {
        add(new PaperSlider());
    }
}
----

For creating an API for attributes and properties, see
<<tutorial-webcomponent-attributes-and-properties#,Using Attributes and Properties with a Polymer Web Component>>.
For listening to events from a web component, see
<<tutorial-webcomponent-events#,Using Events with a Polymer Web Component>>.

[NOTE]
Web components implemented using Polymer should be used with Polymer's own https://www.polymer-project.org/1.0/docs/devguide/local-dom[DOM API]. Flow will automatically use the Polymer DOM API when appropriate.
s