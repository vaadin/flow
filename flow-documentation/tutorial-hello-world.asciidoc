= Building a Hello World Application

The simplest possible Hello World application displays the text "Hello world" on the screen and does nothing else. To accomplish this you need two things:

* A View containing our UI elements
* A servlet handling the rendering of the view

Let's start from the View class:

[source,java]
----
public class HelloWorld extends Div implements View {
    public HelloWorld() {
      setText("Hello world");
    }
}
----

The main purpose of the view class is to populate the UI with components. In this case the view extends the very simple `Div` component (corresponds to a `<div>` in the browser) and you can use its `setText` method to show the message.

[TIP]
The `com.vaadin.flow.html` package contains a number of commonly used components. You can also extend `HtmlComponent` to create any custom component.

To get the view to show up in the browser, you need to add a servlet and configure it to show the given view for the root URL:

[source,java]
----
@WebServlet(urlPatterns = "/*", name = "HelloWorldServlet")
@VaadinServletConfiguration(routerConfigurator = HelloWorldConfiguration.class, productionMode = false)
public class HelloWorldServlet extends VaadinServlet {
    public static class HelloWorldConfiguration implements RouterConfigurator {
        @Override
        public void configure(RouterConfiguration configuration) {
          configuration.setRoute("", HelloWorld.class);
        }
    }
}
----

Your servlet will listen for HTTP requests to all paths (`"/*"`) and serve the `HelloWorld` view when the root URL is requested (`setRoute("",...)`). Deploy the application to a servlet container, and open the URL (typically http://localhost:8080/<name-of-project>) to see the "Hello world" text.

For more information about defining routes, see  <<tutorial-routing#,Defining View Routes and Navigating>>.
