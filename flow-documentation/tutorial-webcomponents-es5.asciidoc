ifdef::env-github[:outfilesuffix: .asciidoc]
= Serving ECMAScript 5 webcomponents with Polymer 2

According to the native custom element specification, ECMAScript 6 is required
to define webcomponents. But when deploying an application to IE11 and Safari 9,
 you need to compile the files to ECMAScript 5 (ES5 for short), since those
browsers don't support ECMAScript 6. Luckily there's a library that can compile
and optimize the ES6 files to ES5, which is provided by the Polymer project:
polymer-build.

[TIP]
The same library can also be used to optimize ES6 scripts, by using minification.

== Project structure

To ease the process of compiling your project, you should avoid placing your
webcomponents at `src/main/webapp` or any other source directory. The source files
won't be used by the project, just the compiled ones.

The suggested project structure, which complies to the Maven standards, is the
following:

* project-root/
** src/main/
*** java/ - Your Java code
*** webapp/ - Static files not associated to webcomponents (such as images, favicon,
  files for download and so on)
*** frontend/ - Root path of your webcomponents
** src/test/java/ - Your tests
** target/ - Your output directory
** pom.xml - Your project definition Maven file

=== Javascript dependencies

In your `src/main/frontend` directory, you have to create 4 files:

==== package.json

This file defines the core versions of bower, gulp and polymer-build packages,
and what to run when the packages have been installed. Once created, you don't have
to change this file anymore.

[source,json]
----
{
  "name": "polymer-build",
  "version": "1.0.0",
  "main": "",
  "dependencies": {
    "bower": "~1.8.0",
    "gulp": "~3.9.1",
    "polymer-cli": "~1.5.2"
  },
  "scripts": {
    "prodMode": "bower install && polymer build",
    "devMode": "bower install"
  }
}
----

==== bower.json

This file defines the webcomponent dependencies you have in your project. Keep
this file updated every time you make changes in your javascript dependencies,
just like you do in your `pom.xml` with Java dependencies.

[source,json]
----
{
  "name": "my-project",
  "description": "",
  "main": "",
  "private": true,
  "ignore": [
    "**/.*",
    "node_modules",
    "bower_components",
    "test",
    "tests"
  ],
  "dependencies": {
    "polymer": "~2.0.2",
    "other-dependency" : "version"
  }
}
----

[NOTE]
The most important dependency in this file is the Polymer version.

==== polymer.json

This file defines how the project will be built. Here is where you set the
compilation parameters. The entire structure of the file is described
https://www.polymer-project.org/2.0/docs/tools/polymer-json[here].

[source,json]
----
{
  "entrypoint": "index.html",
  "sources": [
   "bower.json"
  ],
  "extraDependencies": [
    "bower_components/webcomponentsjs/webcomponents-lite.js"
  ],
  "builds": [{
    "name": "es5",
    "js": {"compile": true, "minify": true},
    "css": {"minify": true},
    "html": {"minify": true}
  },
  {
    "name": "es6",
    "js": {"minify": true},
    "css": {"minify": true},
    "html": {"minify": true}
  }]
}
----

[NOTE]
Change the `minify` property to `false` if you want to skip minification of your
files.

==== index.html

For pure Polymer applications without Flow, this file would be the entry point of
the application. It is sent to the browser before any other content. Polymer CLI
makes use of this fact and adds extra Javascript code into the entry point assuming
that it will be available for any script running at any other page of the application.

In Flow applications there is no `index.html` because Flow generates HTTP responses
dynamically. However, for ES5 support it is still necessary to add the same global
Javascript code before any other transpiled ES5 code.

If your application has a single root view (which is used as a super-parent in all
your views) then set its HTML file as the `entrypoint` here.

Otherwise create some HTML file (it can be `index.html`) and add an `@HtmlImport`
annotation with the reference to this file to your UI class. In this case this
file will be available on every page of your application since a UI component is the topmost.

[NOTE]
Normally you don't need to use your own custom `UI` class. But as described above you
may want to use it to have the `@HtmlImport` annotation with the `entrypoint` HTML file.
In this case here is an example of how you can enable your own `UI` in the application:

[source,java]
----
@WebServlet(urlPatterns = "/*", name = "UIServlet", asyncSupported = true)
@VaadinServletConfiguration(ui = MyUI.class, productionMode = false)
public class Servlet extends VaadinServlet {

}

@HtmlImport("index.html")
public class MyUI extends UI{

    private Router router;

    @Override
    public void doInit(VaadinRequest request, int uiId) {
        super.doInit(request, uiId);
        router = new Router();
        router.reconfigure(new MyRouterConfigurator());
        router.initializeUI(this, request);
    }

    @Override
    public Optional<RouterInterface> getRouter() {
        return Optional.ofNullable(router);
    }
}

public class MyRouterConfigurator implements RouterConfigurator {
    @Override
    public void configure(RouterConfiguration configuration) {
        // You router configuration code
    }
}

----

In the `index.html` file you only add your own dependencies, using HTML imports:

[source,xml]
----
<!-- Assuming your files are located at src/main/frontend/components -->
<link rel="import" href="components/my-component1.html">
<link rel="import" href="components/my-component2.html">
----

[WARNING]
When creating a new component, don't forget to declare its dependencies in the
`bower.json` file and the component location in the `index.html` file.

In summary, the distribution of files inside `src/main/frontend` should be:

* src/main/frontend/
** bower.json
** package.json
** polymer.json
** index.html
** components/ -> that's where you put your webcomponents

== Using Maven plugins to compile your project

Once properly structured, the project can be compiled using regular Maven
commands.

To do so, you need to add specific configuration to your `pom.xml` file. This
configuration is a one-time setup. You can copy-paste the example below it
directly to your `pom.xml`.

[TIP]
This configuration also prepares your project to properly run with the Maven
Jetty Plugin by using the `mvn jetty:run` command.

[source,xml]
----
<properties>
  <flow.version>FLOW VERSION HERE</flow.version>
  <jetty.version>9.4.5.v20170502</jetty.version>
  <frontend.working.directory>src/main/frontend</frontend.working.directory>
  <vaadin.frontend.path>VAADIN/static/frontend</vaadin.frontend.path>
</properties>

<build>
  <plugins>
      <!--1-->
      <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.0.0</version>
          <configuration>
              <filesets>
                  <fileset>
                      <directory>${frontend.working.directory}/bower_components</directory>
                  </fileset>
                  <fileset>
                      <directory>${frontend.working.directory}/build</directory>
                  </fileset>
                  <fileset>
                      <directory>${frontend.working.directory}/node</directory>
                  </fileset>
                  <fileset>
                      <directory>${frontend.working.directory}/node_modules</directory>
                  </fileset>
              </filesets>
          </configuration>
      </plugin>

      <!--2-->
      <plugin>
          <groupId>com.github.eirslett</groupId>
          <artifactId>frontend-maven-plugin</artifactId>
          <version>${frontend.maven.plugin.version}</version>
          <configuration>
              <nodeVersion>${node.version}</nodeVersion>
              <npmVersion>${npm.version}</npmVersion>
          </configuration>
          <executions>
              <execution>
                  <id>install-node-and-npm</id>
                  <goals>
                      <goal>install-node-and-npm</goal>
                      <goal>npm</goal> <!-- runs 'install' by default -->
                      <goal>bower</goal> <!-- runs 'install' by default -->
                  </goals>
                  <configuration>
                      <workingDirectory>${frontend.working.directory}</workingDirectory>
                  </configuration>
              </execution>
              <execution>
                  <id>npm run</id>
                  <goals>
                      <goal>npm</goal>
                  </goals>
                  <configuration>
                      <arguments>${npm.build.goal}</arguments>
                  </configuration>
              </execution>
          </executions>
      </plugin>

     <!--3-->
      <plugin>
          <groupId>org.eclipse.jetty</groupId>
          <artifactId>jetty-maven-plugin</artifactId>
          <version>${jetty.version}</version>
          <configuration>
              <webAppConfig>
                  <webInfIncludeJarPattern>.*/flow-.*.jar$|.*/test-resources-.*.jar$</webInfIncludeJarPattern>
                  <containerIncludeJarPattern>^$</containerIncludeJarPattern>
                  <resourceBases>
                      <resourceBase>${project.basedir}/src/main/webapp</resourceBase>
                      <resourceBase>${jetty.extra.resource.base}</resourceBase>
                  </resourceBases>
              </webAppConfig>
          </configuration>
      </plugin>
  </plugins>
</build>

<profiles>
  <profile>
    <id>productionMode</id>
    <activation>
        <property>
            <name>vaadin.productionMode</name>
        </property>
    </activation>

    <properties>
        <npm.build.goal>run prodMode</npm.build.goal>
        <jetty.extra.resource.base>${project.build.directory}/jetty-extra-resources</jetty.extra.resource.base>
    </properties>

    <!--4-->
    <dependencies>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>flow-server-production-mode</artifactId>
            <version>${flow.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--5-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven.war.plugin.version}</version>
                <configuration>
                    <webResources>
                        <resource>
                            <directory>${frontend.working.directory}/build</directory>
                            <targetPath>${vaadin.frontend.path}</targetPath>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>

            <!--6-->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven.resources.plugin.version}</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${jetty.extra.resource.base}/${vaadin.frontend.path}</outputDirectory>
                            <overwrite>true</overwrite>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/${frontend.working.directory}/build</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
  </profile>

  <profile>
      <id>debugMode</id>
      <activation>
          <property>
              <name>!vaadin.productionMode</name>
          </property>
      </activation>

      <properties>
          <npm.build.goal>run devMode</npm.build.goal>
          <jetty.extra.resource.base>${project.basedir}/${frontend.working.directory}</jetty.extra.resource.base>
      </properties>

      <build>
          <plugins>
              <!--7-->
              <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-war-plugin</artifactId>
                  <version>${maven.war.plugin.version}</version>
                  <configuration>
                      <webResources>
                          <resource>
                              <directory>${frontend.working.directory}</directory>
                              <excludes>
                                  <exclude>build/**</exclude>
                              </excludes>
                          </resource>
                      </webResources>
                  </configuration>
              </plugin>
          </plugins>
      </build>
  </profile>
</profiles>
----

<1> Configures the cleanup process for JS dependencies and build
<2> Configures the frontend plugin to compile the web components source
<3> Configures the Jetty plugin to use the right resource path when running in
either production or debug modes
<4> Makes the package run in production mode when deployed, without the need
of setting extra properties on the server
<5> Copies the files compiled by Polymer to a directory from where it can be
served (root of the WAR) when in production mode
<6> Copies the files compiled by Polymer to a directory where jetty:run can
use as resource folder
<7> Adds the files from src/main/frontend directly into the WAR when in
debug mode

[WARNING]
Don't forget to set the proper Flow version inside the `<flow.version>` property.

=== Production mode

By default, Flow applications run are packaged debug mode (or development mode),
which should be used during development. When packaging in debug mode, the
webcomponents are *not* complied, which allows the developer to change the
sources and see the changes right away upon refreshing the browser.

For example, when running the Jetty server from Maven, by using the
`mvn jetty:run` command, you can modify any webcomponent source file and just
refresh the browser to see the changes. No compilation is required.

[WARNING]
You can only develop in that way when using an ES6 compatible browser. Older
browsers such as Safari 9 and Internet Explorer 11 require compilation to work
properly with webcomponents.

To effectively compile and minify your resources for production deployment, you
must run the packaging using the `-Dvaadin.productionMode` flag. For example:

[source,bash]
----
mvn package -Dvaadin.productionMode
----

You can test your application in production mode with the Jetty plugin as well:

[source,bash]
----
mvn jetty:run -Dvaadin.productionMode
----

=== Directories created by the process

When resolving dependencies and compiling your components, several directories
and files are created inside your `src/main/frontend`. Those file can be
safely ignored in you SCM, since they are generated from the build.

Those files and directories are:

* bin/
* bower_components/
* build/
* etc/
* lib/
* node/
* node_modules/

== Manual compilation

If you don't want to use Maven to compile your components for you, you can use
the Polymer CLI directly (which uses polymer-build internally).

First step is to install the Polymer CLI tool. To do that, please
follow the steps mentioned at the https://www.polymer-project.org/2.0/docs/tools/polymer-cli[Polymer project]
page.

Using the same project structure and configuration files, you can run this
command from the `src/main/frontend` directory:

[source,bash]
----
polymer build
----

This will generate the `build` directory, which contains the compiled files.

== Linking both ES6 and ES5 files in your application

By using the `polymer.json` build configuration described above, two directories
are created: `build/es6` and `build/es5`. Those directories contain the ES6
optimized files and the ES5 optimized files respectively. You can serve both
build in your project, depending on the capabilities of the target browser.

To do that, in your component, you have to use the `frontend://` protocol when
declaring the path of your `HTMLImport`. For example:

[source,java]
----
@Tag("my-component")
@HtmlImport("frontend://components/my-component.html")
public class MyComponent extends PolymerTemplate<MyModel> {
----

In production, the Flow application will determine whether the browser supports ES6 or
not. When the browser supports ES6, the linked file will be served from
`(context)/VAADIN/static/frontend/es6/components/my-component.html`. When it
doesn`t, the served file will be
`(context)/VAADIN/static/frontend/es5/components/my-component.html`.

That way you can support ES5 browsers without compromising ES6 capable browsers.

[NOTE]
The differentiation between ES5 and ES6 paths only occur when `productionMode` is
`true`. When running in debug (or development) mode, the `frontend://` protocol
behaves exactly like the `context://` protocol, and the files are served directly
from `src/main/frontend`.

=== Changing the target of `frontend://` served files

If you want to serve your files from other directory, or even from other servers
(like a CDN), you can change a couple of system properties without changing your
code. You just need to set:

* `frontend.url.es6` for the ES6 files URL
* `frontend.url.es5` for the ES5 files URL

When setting those properties from the command line, you have to use the `vaadin`
prefix. For example:

[source,bash]
----
mvn jetty:run -Dvaadin.frontend.url.es6=http://mydomain.com/es6/ -Dvaadin.frontend.url.es5=http://mydomain.com/es5/
----

You can also set those properties as Servlet init params. You can use the
traditional `web.xml` file or the Servlet 3.0 `@WebServlet` annotation:

[source,java]
----
@WebServlet(urlPatterns = "/*", name = "myservlet", asyncSupported = true, initParams = {
        @WebInitParam(name = "frontend.url.es6", value = "http://mydomain.com/es6/"),
        @WebInitParam(name = "frontend.url.es5", value = "http://mydomain.com/es5/") })
@VaadinServletConfiguration(ui = MyUI.class, productionMode = false)
public class MyServlet extends VaadinServlet {
}
----

Or when using the `web.xml` file:

[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<web-app
  id="WebApp_ID" version="3.0"
  xmlns="http://java.sun.com/xml/ns/j2ee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

  <servlet>
    <servlet-name>myservlet</servlet-name>
    <servlet-class>
        com.vaadin.server.VaadinServlet
    </servlet-class>

    <init-param>
      <param-name>UI</param-name>
      <param-value>com.ex.myprj.MyUI</param-value>
    </init-param>

    <init-param>
      <param-name>frontend.url.es6</param-name>
      <param-value>http://mydomain.com/es6/</param-value>
    </init-param>

    <init-param>
      <param-name>frontend.url.es5</param-name>
      <param-value>http://mydomain.com/es5/</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>myservlet</servlet-name>
    <url-pattern>/*</url-pattern>
  </servlet-mapping>
</web-app>
----

When you set, for example, your `frontend.url.es6` property to
`http://mydomain.com/es6/`, the resulting URL for a component annotated with
`@HTMLImport("frontend://components/my-component.html")` will be
`http://mydomain.com/es6/components/my-component.html`.

[WARNING]
The base path defined by `frontend.url.es6` and `frontend.url.es5` properties
must end with a `/`.

[TIP]
You can also use the `context://` protocol in your `frontend.url.es6` and
`frontend.url.es5` properties. When doing so, the resulting URL will be relative
to the current context on the server.

[TIP]
Those properties are also used in debug mode (in other words, when
`productionMode = false`).
