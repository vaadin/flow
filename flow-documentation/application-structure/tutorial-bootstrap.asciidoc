---
title: Modifying the bootstrap page
order: 5
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Modifying the bootstrap page

The application bootstrap page is created for you by the framework and normally there is no need to modify it.
For instance FW includes its internal JavaScripts to be able to provide its core functionality.
Also it is possible to include additional JavaScripts, HTML imports and Style Sheets using annotations `@JavaScript`,
`HtmlImport` and `@StyleSheet` (see <<tutorial-include-css#,Including Style Sheets>> and <<tutorial-importing#,Importing html/javascript>>).

Sometimes you may want to customize the page header and add there some additional data, e.g. custom `meta` tags.
Such markup is required to enable your web page to become a rich object in a social graph using http://ogp.me/[OpenGraph protocol].

== Viewport annotation

Viewport meta-tag can be set to the initial page by annotating the navigation target with `@Route` or
the top most `RouterLayout` that builds the navigation target chain.

[source,java]
----
@Route("")
@Viewport("width=device-width")
public class MyApp extends Div {
  public MyApp() {
    setText("Hello world");
  }
}
----

[source,java]
----
@Route(value = "", layout = MyLayout.class)
public class MyView extends Div {
  public MyView() {
    setText("Hello world");
  }
}

@Viewport("width=device-width")
public class MyLayout extends Div implements RouterLayout {
}
----

[NOTE]
If the Viewport annotation is not on a `@Route` Component or a `RouterLayout` used from a route it will not be used.

== BootstrapListener

To be able to modify default bootstrap page and add your custom meta tags on the page you should use
your `BootstrapListener` implementation and add it to the `ServiceInitEvent` instance available
in a `VaadinServiceInitListener`.

Here is the code for the `BoostrapListener` implementation which modifies the header of the page:

[source,java]
----
public class CustomBootstrapListener implements BootstrapListener {

    public void modifyBootstrapPage(BootstrapPageResponse response) {
        Document document = response.getDocument();

        Element head = document.head();

        head.appendChild(createMeta(document, "og:title", "The Rock"));
            head.appendChild(createMeta(document, "og:type", "video.movie"));
            head.appendChild(createMeta(document, "og:url",
                    "http://www.imdb.com/title/tt0117500/"));
            head.appendChild(createMeta(document, "og:image",
                    "http://ia.media-imdb.com/images/rock.jpg"));
    }

    private Element createMeta(Document document, String property,
            String content) {
        Element meta = document.createElement("meta");
        meta.attr("property", property);
        meta.attr("content", content);
        return meta;
    }
}
----

Now this listener should be added to a `ServiceInitEvent` which is sent when a Vaadin service is initialized. Take a look on the <<../miscellaneous/tutorial-service-init-listener#,ServiceInitListener tutorial>> on how to configure it.
