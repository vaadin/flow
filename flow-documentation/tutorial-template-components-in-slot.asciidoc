ifdef::env-github[:outfilesuffix: .asciidoc]

= Server-side components in Polymer2 template

You can add child components to templates using the `Component` or `Element` API, but because PolymerTemplate uses the shadow DOM *the shadow tree is rendered instead of the elements children* that are in the light DOM.

This means that the template needs to have a `<slot></slot>` to mark the place where the light DOM elements should be rendered.

For example you could have the html template built something like this:
[source,html]
----
<link rel="import" href="/bower_components/polymer/polymer.html">

<dom-module id="component-container">
    <template>
        <div>
            <slot></slot>
        </div>
    </template>

    <script>
        class ComponentContainer extends Polymer.Element {
            static get is() {
                return 'component-container'
            }
        }
        customElements.define(ComponentContainer.is, ComponentContainer);
    </script>
</dom-module>
----

and the server-side template as:
[source,java]
----
@Tag("component-container")
@HtmlImport("/com/example/ComponentContainer.html")
public class ComponentContainer extends PolymerTemplate {

    public ComponentContainer() {
        Element label = ElementFactory.createLabel("Main layout header");
        getElement().appendChild(label);
    }
}

----

Without the *slot* tag in the template the added label would not be visible to the user even though it can be located in the DOM.

=== Default content slots and named slots in templates

The `<slot>` tag can contain "default" content if nothing is set from the light dom.

For example the template could be built as:
[source,html]
----
    <template>
        <div style="border: 1px solid black; padding: 10px; margin: 10px;">
            <slot>No components added</slot>
        </div>
    </template>
----

This would show at start 'No components added' in the slot which would then be replaced by the first added child element.

Slots can also be named so that only wanted content is added there. This is done by using the name attribute `<slot name="{name-here}">` for instance:
[source,html]
----
    <template>
        <h1><slot name="title"></slot></h1>

        <div style="border: 1px solid black; margin: 5px;padding: 5px;">
            <slot>No content given!</slot>
        </div>
    </template>
----

Now an element that could be for instance: `<label slot="title">Main header</label>` would not be positioned in the
slot with the default "No content given!" but into the `<h1><slot name="title">...`

Named slots can also be used as default by nesting them inside the main slot like:
[source,html]
----
    <template>
        <slot name="fullName">
            <slot name="firstName"></slot>, <slot name="lastName"></slot>
        </slot>
    </template>
----

This will make the slot show data for light dom `slot="firstName"` `slot="lastName"` elements if no `slot="fullName"` is available and when a `<element slot="fullName">` is
added it will "override/replace" the `firstName, lastName` data.

=== Using a PolymerTemplate as a Parent View

For general info about parent views, see <<tutorial-routing-view-hierarchy#,View Hierarchy and Nested Views>>. For general information about templates, see <<tutorial-template-basic#,Creating A Simple Component Using the Template API>>.

A `PolymerTemplate` class can be used as a parent view by using the `<slot></slot>` in the position where the child view should be displayed.

To define a parent view that shows the actual view below a heading a and a menu, `MainLayout.html` could look like this:
[source,html]
----
<link rel="import" href="/bower_components/polymer/polymer.html">

<dom-module id="main-layout">
    <template>
        <h1>Site title</h1>
        <div class="menu">...</div>

        <!-- child content comes here -->
        <slot></slot>
    </template>

    <script>
        class MainLayout extends Polymer.Element {
            static get is() {
                return 'main-layout'
            }
        }
        customElements.define(MainLayout.is, MainLayout);
    </script>
</dom-module>
----

To use the template file, you also need a basic template component class with an html import for the template file.
Right now you need to also extend the `HasChildView` interface and implement the `setChildView(View)` for example like this:
[source,java]
----
@Tag("main-layout")
@HtmlImport("/com/example/ComponentContainer.html")
public class MainLayout extends PolymerTemplate implements HasChildView {

    private View childView;

    @Override
    public void setChildView(View childView) {
        if(this.childView != null) {
            getElement().removeChild(this.childView.getElement());
        }
        getElement().appendChild(childView.getElement());
        this.childView = childView;
    }
}

----

[NOTE]
The `setChildView(View)` implementation could also be as simple as `getElement().setChild(0, childView.getElement())`, but then
every time the child view is set it would replace the first child element which could be confusing.
If you for instance add a Label element in the constructor it would then be replaced with the childView.

You can then register `MainLayout` as the parent view in your `RouterConfiguration`.

[source,java]
----
public class MyRouterConfigurator implements RouterConfigurator {
    @Override
    public void configure(RouterConfiguration configuration) {
        configuration.setRoute("", HomeView.class, MainLayout.class);
        configuration.setRoute("company", CompanyView.class, MainLayout.class);
    }
}
----
