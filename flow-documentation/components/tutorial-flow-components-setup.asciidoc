---
title: Using Vaadin Components
order: 1
layout: page
---

= Using Vaadin Components

There is a set of pre-built server-side components with Java API for https://vaadin.com/elements/browse[Vaadin Web Components],
such as `Button`, `TextField` and so on. Those components are part of the Vaadin 10 platform,
and are included as dependencies in the platform together with Flow.

The platform has the following components with Java API available:

- `Button` - https://vaadin.com/elements/vaadin-button/java-examples[Demos], https://github.com/vaadin/vaadin-button-flow[sources and issue tracking]
- `CheckBox` - https://vaadin.com/elements/vaadin-checkbox/java-examples[Demos], https://github.com/vaadin/vaadin-checkbox-flow[sources and issue tracking]
- `ComboBox` - https://vaadin.com/elements/vaadin-combo-box/java-examples[Demos], https://github.com/vaadin/vaadin-combo-box-flow[sources and issue tracking]
- `DatePicker` - https://vaadin.com/elements/vaadin-date-picker/java-examples[Demos], https://github.com/vaadin/vaadin-date-picker-flow[sources and issue tracking]
- `Dialog` - https://vaadin.com/elements/vaadin-dialog/java-examples[Demos], https://github.com/vaadin/vaadin-dialog-flow[sources and issue tracking]
- `FormLayout` - https://vaadin.com/elements/vaadin-form-layout/java-examples[Demos], https://github.com/vaadin/vaadin-form-layout-flow[sources and issue tracking]
- `Grid` - https://vaadin.com/elements/vaadin-grid/java-examples[Demos], <<tutorial-flow-grid#,Documentation>>, https://github.com/vaadin/vaadin-grid-flow[sources and issue tracking]
- `Icons` - https://vaadin.com/elements/vaadin-icons/java-examples[Demos], <<tutorial-flow-icon#,Documentation>>, https://github.com/vaadin/vaadin-icons-flow[sources and issue tracking]
- `IronList` - https://github.com/vaadin/vaadin-iron-list-flow[examples, sources and issue tracking]
// TODO enable demo link https://vaadin.com/elements/vaadin-notification/java-examples[Demos],
- `Notification` - https://github.com/vaadin/vaadin-notification-flow[sources and issue tracking]
// TODO enable demo link https://vaadin.com/elements/vaadin-ordered-layout/java-examples[Demos]
- `HorizontalLayout` & `VerticalLayout` & `FlexLayout` - https://github.com/vaadin/vaadin-ordered-layout-flow[sources and issue tracking]
- `ProgressBar` - https://vaadin.com/elements/vaadin-progress-bar/java-examples[Demos], https://github.com/vaadin/vaadin-progress-bar-flow[sources and issue tracking]
- `SplitLayout` - https://vaadin.com/elements/vaadin-split-layout/java-examples[Demos], https://github.com/vaadin/vaadin-split-layout-flow[sources and issue tracking]
// TODO enable demo link https://vaadin.com/elements/vaadin-tabs/java-examples[Demos],
- `Tabs` - https://github.com/vaadin/vaadin-tabs-flow[sources and issue tracking]
- `TextField` & `TextArea` & `PasswordField` - https://vaadin.com/elements/vaadin-text-field/java-examples[Demos], https://github.com/vaadin/vaadin-text-field-flow[sources and issue tracking]
- `Upload` - https://vaadin.com/elements/vaadin-upload/java-examples[Demos], https://github.com/vaadin/vaadin-upload-flow[sources and issue tracking]


When you use the Vaadin 10 platform dependency, you automatically get *ALL* available components.
Using the platform dependency guarantees that you'll get versions of Flow and the components that are compatible together.
[source,xml]
----
<repositories>
    <repository>
        <id>vaadin-prereleases</id>
        <url>https://maven.vaadin.com/vaadin-prereleases</url>
    </repository>
</repositories>

<dependencies>
    <!-- other dependencies -->
    <!-- component dependency -->
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin</artifactId>
        <version>${vaadin.platform.version}</version>
    </dependency>
</dependencies>
----
[NOTE]
`vaadin.platform` releases regularly and you can check the version number https://github.com/vaadin/platform/releases[here]

[NOTE]
The components are also provided as single dependencies per component. See https://github.com/vaadin/platform/blob/master/vaadin/pom.xml#L68[the platform pom.xml] for example.
If you are not using the Vaadin 10 platform dependency and wish to use the Flow components, make sure it is
properly configured to run with Polymer web components. Please refer to
<<../web-components/tutorial-webcomponent-basic#,Basic Integration of a Polymer Web Component>>
for more information.

The platform also contains ready made _theming_ for the components that help you tweak and tune the look and feel of the components.
See the <<../theme/tutorial-built-in-themes#,Component themes>> for more info.

For more ready-made Java APIs for Web Components, you should check the https://vaadin.com/directory/search?framework=Vaadin%2010[Vaadin Directory.]

= Flow Component Package Contents Explained

A Flow component package consists of two main sections:

* Java API classes
* Web Components' files (html, js, css etc)

All sections are used by Flow to display the components in web pages correctly.
By default, both sections are provided in the same jar.

Web components' files are provided as https://github.com/webjars/webjars/[webjars] â€“
jar files that contain webcomponents' files,
heavily influenced by current Polymer package manager: https://bower.io/[bower]
(not developed or maintained by Vaadin)

Webjars are designed to replace `bower` usage by using `Maven` for the same purposes.

`Flow` is able to resolve requests into webjars' contents (if intended by request),
imitating the regular web component's files.

Although currently enabled by default, webjars do not restrict users from using external
web components' files:

* webjar resolving can be turned off
* if no suitable webjar is found, request resolving falls back to configured
external web components' locations

[NOTE]
Due to current webjar https://github.com/webjars/webjars/issues[limitations],
extra maven configuration (extra repository + bom file declaration) is required.

== Maven configuration to use only single components

If you don't want to take everything provided by the `com.vaadin:vaadin` dependency,
you can also optionally declare single components as dependencies.

The first step is to add the `bom` and the wanted `flow-component` (e.g. `vaadin-button-flow`)
package to your project dependencies.

When using Maven you can add a the button component into your `pom.xml` as this:

[source,xml]
----
<repositories>
    <repository>
        <id>vaadin-prereleases</id>
        <url>https://maven.vaadin.com/vaadin-prereleases</url>
    </repository>
</repositories>

<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-bom</artifactId>
            <version>${vaadin.platform.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>

<dependencies>
    <!-- other dependencies -->

    <!-- component dependency -->
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin-button-flow</artifactId>
    </dependency>

    <!-- other dependencies -->
</dependencies>
----

== Maven configuration to exclude webjars

If webjar dependencies are not needed, they can be excluded from the project using standard Maven mechanism:
[source,xml]
----
<!-- No webjars == no bom needed and no extra repo needed, but you have to get webjars' files into the build yourself -->
<dependencies>
    <!-- other dependencies -->

    <!-- the dependency with webjars excluded -->
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin-button-flow</artifactId>
        <exclusions>
            <exclusion>
                <groupId>org.webjars.bower</groupId>
                <artifactId>*</artifactId>
            </exclusion>
        </exclusions>
    </dependency>

    <!-- other dependencies -->
</dependencies>
----

More documentation on webjars in can be found here: <<../web-components/tutorial-flow-webjars#,WebJars in Flow>>
General webJars usage manual is here: <<../web-components/tutorial-how-to-use-webjars#, How to use webjars>>
