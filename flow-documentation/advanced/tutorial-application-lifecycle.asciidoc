---
title: Application Lifecycle
order: 1
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

[[application.lifecycle]]
= Application Lifecycle

In this section, we look into more technical details of application deployment,
user sessions, and UI instance lifecycle. These details are not generally needed
for writing Vaadin applications, but may be useful for understanding how they
actually work and, especially, in what circumstances their execution ends.

[[application.lifecycle.deployment]]
== Deployment

Before a Vaadin application can be used, it has to be deployed to a Java web
server. Deploying reads the servlet classes annotated with the
[literal]#++@WebServlet++# annotation or the [filename]#web.xml#
deployment descriptor in the application to register servlets for
specific URL paths and loads the classes. Deployment does not yet normally run
any code in the application, although static blocks in classes are executed when
they are loaded.

There is no need to define your own servlet class (which should extend 
the `VaadinServlet` class) if you are using Servlet 3.0 specification. You just need 
to have at least one class annotated with `@Route` annotation and a 
`VaadinServlet` instance will be registered for you automatically.

[[application.lifecycle.deployment.redeployment]]
=== Undeploying and Redeploying

Applications are undeployed when the server shuts down, during redeployment, and
when they are explicitly undeployed. Undeploying a server-side Vaadin
application ends its execution, all application classes are unloaded, and the
heap space allocated by the application is freed for garbage-collection.

If any user sessions are open at this point, the client-side state of the UIs is
left hanging and an Out of Sync error is displayed on the next server request.

[[application.lifecycle.servlet-service]]
== Vaadin Servlet and Service

The [classname]#VaadinServlet#
receives all server requests mapped to it by its URL, as defined in the
deployment configuration, and associates them with sessions. The sessions
further associate the requests with particular UIs.

When servicing requests, the Vaadin servlet handles all tasks common
to servlets in a [classname]#VaadinService#. It manages
sessions, gives access to the deployment configuration information, handles
system messages, and does various other tasks. Any further servlet
specific tasks are handled in the corresponding
[classname]#VaadinServletService#. The
service acts as the primary low-level customization layer for processing
requests.

[[application.lifecycle.servlet-service.servletcustomization]]
=== Customizing Vaadin Servlet

Many common configuration tasks need to be done in the servlet class, which you
already have if you are using the [literal]#++@WebServlet++# annotation for
Servlet 3.0 to deploy the application. You can handle most customization by
overriding the [methodname]#servletInitialized()# method, where the
[classname]#VaadinService# object is available with [methodname]#getService()#
(it would not be available in a constructor). You should always call
[methodname]#super.servletInitialized()# in the beginning.


[source, java]
----
public class MyServlet extends VaadinServlet {
    @Override
    protected void servletInitialized() throws ServletException {
        super.servletInitialized();
        //...
    }
}
----

To add custom functionality around request handling, you can override the
[methodname]#service()# method.


[[application.lifecycle.servlet-service.servicecustomization]]
=== Customizing Vaadin Service

To customize [classname]#VaadinService#, you first need to extend the
[classname]#VaadinServlet# class and override the
[methodname]#createServletService()# to create a custom service object.


[[application.lifecycle.session]]
== User Session

((("session")))
A user session begins when a user first makes a request to a Vaadin servlet 
by opening the URL for a particular [classname]#UI#. All server requests
belonging to a particular UI class are processed by the
[classname]#VaadinServlet# class. When a new
client connects, it creates a new user session, represented by an instance of
[classname]#VaadinSession#. Sessions are tracked using cookies stored in the
browser.

You can obtain the [classname]#VaadinSession# of a [classname]#UI# with
[methodname]#getSession()# or globally with
[methodname]#VaadinSession.getCurrent()#. It also provides access to the
lower-level session objects, [interfacename]#HttpSession#, through a [classname]#WrappedSession#. You can
also access the deployment configuration through [classname]#VaadinSession#.

A session ends after the last [classname]#UI# instance expires or is closed, as
described later.

[[application.lifecycle.session.init]]
=== Handling Session Initialization and Destruction

((("[classname]#SessionInitListener#")))
((("[classname]#SessionDestroyListener#")))
((("[classname]#VaadinService#")))
You can handle session initialization and destruction by implementing a
[interfacename]#SessionInitListener# or [interfacename]#SessionDestroyListener#,
respectively, to the [classname]#VaadinService#.
((("[methodname]#servletInitialized()#")))
((("[classname]#VaadinServlet#")))
You can do that best by extending [classname]#VaadinServlet# and overriding the
[methodname]#servletInitialized()# method, as outlined in
<<application.lifecycle.servlet-service>>.


[source, java]
----
public class MyServlet extends VaadinServlet
    implements SessionInitListener, SessionDestroyListener {

    @Override
    protected void servletInitialized() throws ServletException {
        super.servletInitialized();
        getService().addSessionInitListener(this);
        getService().addSessionDestroyListener(this);
    }

    @Override
    public void sessionInit(SessionInitEvent event)
            throws ServiceException {
        // Do session start stuff here
    }

    @Override
    public void sessionDestroy(SessionDestroyEvent event) {
        // Do session end stuff here
    }
}
----


[[application.lifecycle.ui]]
== Loading a UI

((("UI", "loading")))
When a browser first accesses a URL mapped to the servlet of a particular UI
class, the Vaadin servlet generates a loader page. The page loads the
client-side engine (widget set), which in turn loads the UI in a separate
request to the Vaadin servlet.

A [classname]#UI# instance is created when the client-side engine makes its
first request.

((("[classname]#VaadinRequest#")))
((("[methodname]#init()#")))
Once a new UI is created, its [methodname]#init()# method is called. The method
gets the request as a [classname]#VaadinRequest#.

[[application.lifecycle.ui.loaderpage]]
=== Customizing the Loader Page

The HTML content of the loader page is generated as an HTML DOM object, which
can be customized by implementing a [interfacename]#BootstrapListener# that
modifies the DOM object. To do so, you need to extend the
[classname]#VaadinServlet# and add a [interfacename]#SessionInitListener# to the
service object, as outlined in <<application.lifecycle.session>>. You can then
add the bootstrap listener to a session with
[methodname]#addBootstrapListener()# when the session is initialized.

Loading the widget set is handled in the loader page with functions defined in a
separate [filename]#BootstrapHandler.js# script whose content is inlined into the page.

[[application.lifecycle.ui-expiration]]
== UI Expiration

((("UI", "expiration")))
[classname]#UI# instances are cleaned up if no communication is received from
them after some time. If no other server requests are made, the client-side
sends keep-alive heartbeat requests. A UI is kept alive for as long as requests
or heartbeats are received from it. It expires if three consecutive heartbeats
are missed.

The heartbeats occur at an interval of 5 minutes, which can be changed with the
[parameter]#heartbeatInterval# parameter of the servlet. You can configure the
parameter in [classname]#@VaadinServletConfiguration# or in [filename]#web.xml#.

When the UI cleanup happens, a [classname]#DetachEvent# is sent to all
[classname]#DetachListener#s added to the UI. When the [classname]#UI# is
detached from the session, [methodname]#detach()# is called for it.


[[application.lifecycle.ui-closing]]
== Closing UIs Explicitly

((("UI", "closing")))
((("[methodname]#close()#",
"UI")))
You can explicitly close a UI with [methodname]#close()#. The method marks the
UI to be detached from the session after processing the current request.
Therefore, the method does not invalidate the UI instance immediately and the
response is sent as usual.

Detaching a UI does not close the page or browser window in which the UI is
running and further server request will cause error. Typically, you either want
to close the window, reload it, or redirect it to another URL. If the page is a
regular browser window or tab, browsers generally do not allow closing them
programmatically, but redirection is possible. You can redirect the window to
another URL via JS execution.

If you close other UI than the one associated with the current request, they
will not be detached at the end of the current request, but after next request
from the particular UI. You can make that occur quicker by making the UI
heartbeat faster or immediately by using server push.


[[application.lifecycle.session-expiration]]
== Session Expiration

((("session", "expiration")))
A session is kept alive by server requests caused by user interaction with the
application as well as the heartbeat monitoring of the UIs. Once all UIs have
expired, the session still remains. It is cleaned up from the server when the
session timeout configured in the web application expires.

((("closeIdleSessions")))
If there are active UIs in an application, their heartbeat keeps the session
alive indefinitely. You may want to have the sessions timeout if the user is
inactive long enough, which is the original purpose of the session timeout
setting. ((("session",
"timeout")))
((("closeIdleSessions")))
If the [parameter]#closeIdleSessions# deployment configuration parameter 
of the servlet is set to [literal]#++true++# the session and all of its UIs are closed
when the timeout specified by the [parameter]#session-timeout# parameter of the
servlet expires after the last non-heartbeat request. Once the session is gone,
the browser will show an Out Of Sync error on the next server request.

See <<tutorial-flow-runtime-configuration,"Flow runtime configuration">> section
about setting configuration parameters.

((("[interfacename]#SessionDestroyListener#")))
You can handle session expiration on the server-side with a
[interfacename]#SessionDestroyListener#, as described in
<<application.lifecycle.session>>.


[[application.lifecycle.session-closing]]
== Closing a Session

((("session", "closing")))
((("[methodname]#close()#")))
You can close a session by calling [methodname]#close()# on the
[classname]#VaadinSession#. It is typically used when logging a user out and the
session and all the UIs belonging to the session should be closed. The session
is closed immediately and any objects related to it are not available after
calling the method.

((("logout")))

[source, java]
----
@Route("")
public class MainLayout extends Div {

    protected void onAttach(AttachEvent attachEvent) {
        UI ui = getUI().get(); 
        Button button = new Button("Logout", event -> {
            // Redirect this page immediately
            ui.getPage().executeJavaScript(
                        "window.location.href='logout.html'");

            // Close the session
            ui.getSession().close();
        });
        
        add(button);

        // Notice quickly if other UIs are closed
        ui.setPollInterval(3000);
    }
}
----

This is not enough. When a session is closed from one UI, any other UIs attached
to it are left hanging. When the client-side engine notices that a UI and the
session are gone on the server-side, it displays a "Session Expired" message
and, by default, reloads the UI when the message is clicked.
