---
title: Using sub-template from PolymerTemplate
order: 3
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Using sub-template from PolymerTemplate

You can use a custom element inside your HTML template file. If there is a Java
`PolymerTemplate` class defined for this element then this class will be
automatically instantiated for you and will be hooked up to use in the parent template.

Here is an example of parent HTML template file:

[source,html]
----
<link rel="import" href="/bower_components/polymer/polymer-element.html">
<link rel="import" href="/com/example/ChildTemplate.html">

<dom-module id="parent-template">
    <template>
        <div>Parent Template</div>
        <div>[[name]]</div>
        <child-template>
    </template>
    <script>
        class ParentTemplate extends Polymer.Element {
            static get is() { return 'parent-template' }
        }
        customElements.define(ParentTemplate.is, ParentTemplate);
    </script>
</dom-module>
----

The Java counterpart template is quite simple: it defines only its own model.

[source,java]
----
@Tag("parent-template")
@HtmlImport("/com/example/ParentTemplate.html")
public class ParentTemplate extends PolymerTemplate<Model> {
}

public interface Model extends TemplateModel {
    void setName(String name);

    String getName();
}
----

The HTML template has the `child-template` tag which is also a custom element imported from
another `ChildTemplate.html` file. Everything works for you on the client side if you don't have
a Java counterpart for this template on the server side. But if you have a `PolymerTemplate`
for the `child-template` custom element then you expect that it will be hooked up
and work in the same way as it would have been instantiated manually and added
somehow into a DOM structure of the parent template.

Here is the child template Java code:

[source,java]
----
@Tag("child-template")
@HtmlImport("/com/example/ChildTemplate.html")
public  class ChildTemplate extends PolymerTemplate<TemplateModel> {

    @EventHandler
    private void handleClick() {
        System.out.println("Click on Button in the child template");
    }
}
----

And it's the HTML template counterpart:

[source,html]
----
<link rel="import" href="/bower_components/polymer/polymer-element.html">

<dom-module id="child-template">
    <template>
        <button on-click="handleClick">Child Template</button>
    </template>
    <script>
        class ChildTemplate extends Polymer.Element {
            static get is() { return 'child-template' }
        }
        customElements.define(ChildTemplate.is, ChildTemplate);
    </script>
</dom-module>
----

This template delegates a click handler to the server side and the method `handleClick`
will be called on the `ChildTemplate` instance (not `ParentTemplate` instance).
