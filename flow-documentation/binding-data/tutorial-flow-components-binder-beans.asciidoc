---
title: Binding Beans to Forms
order: 4
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
== Binding Beans to Forms

The business objects used in an application are in most cases implemented as Java beans or POJOs.
There is special support for that kind of business object in `Binder`.
It can use reflection based on bean property names to bind values.
This reduces the amount of code you have to write when binding to fields in the bean.

[source, java]
----
Binder<Person> binder = new Binder<>(Person.class);

// Bind based on property name
binder.bind(nameField, "name");
// Bind based on sub property path
binder.bind(streetAddressField, "address.street");
// Bind using forField for additional configuration
binder.forField(yearOfBirthField)
  .withConverter(
    new StringToIntegerConverter("Please enter a number"))
  .bind("yearOfBirth");
----

[NOTE]
Code using strings to identify properties will cause exceptions during runtime if the string contains a typo or if the name of the setter and getter methods have been changed without also updating the string.

If you have a Bean Validation implementation available in your classpath and
want to use JSR 303 Bean Validation annotations then a `BeanValidationBinder` should be used.
`BeanValidationBinder` extends  `Binder` class so it has the same API but its implementation
automatically adds a bean validator which takes care of JSR 303 constraints.
Constraints defined for properties in the bean will work in the same way as if configured when the binding is created.

[source, java]
----
public class Person {
  @Max(2000)
  private int yearOfBirth;

  //Non-standard constraint provided by Hibernate Validator
  @NotEmpty
  private String name;

  // + other fields, constructors, setters, and getters
}
----

[source, java]
----
BeanValidationBinder<Person> binder = new BeanValidationBinder<>(Person.class);

binder.bind(nameField, "name");
binder.forField(yearOfBirthField)
  .withConverter(
    new StringToIntegerConverter("Please enter a number"))
  .bind("yearOfBirth");
----

Constraint annotations can also be defined on the bean level instead of being defined for any specific property.

There are some number of predefined constraint annotations that mark a bound field as required using `BeanValidationBinder.setRequiredIndicatorVisible`. By default `@NotNull`, `@NotEmpty` and `@Size` (if `min()` value is greater than 0)
configures the field as required. It's possible to change this behavior using
the `BeanValidationBinder.setRequiredConfigurator` method.

[NOTE]
Bean level validation can only be performed once the bean has been updated. This means that this functionality can only be used together with `setBean`. You need to trigger validation manually if using `readBean` and `writeBean`.

Validation errors caused by that bean level validation might not be directly associated with any field component shown in the user interface, so `Binder` cannot know where such messages should be displayed.

Similarly to how the `withStatusLabel` method can be used for defining where messages for a specific binding should be showed, we can also define a `Label` that is used for showing status messages that are not related to any specific field.

[source, java]
----
Label formStatusLabel = new Label();

Binder<Person> binder = new Binder<>(Person.class);

binder.setStatusLabel(formStatusLabel);

// Continue by binding fields
----

We can also define our own status handler to provide a custom way of handling statuses.

[source, java]
----
BinderValidationStatusHandler<Person> defaultHandler = binder
                .getValidationStatusHandler();

binder.setValidationStatusHandler(status -> {
    // create an error message on failed bean level validations
    List<ValidationResult> errors = status
            .getBeanValidationErrors();

    // collect all bean level error messages into a single string,
    // separating each message with a <br> tag
    String errorMessage = errors.stream()
            .map(ValidationResult::getErrorMessage)
            // sanitize the individual error strings to avoid code
            // injection
            // since we are displaying the resulting string as HTML
            .map(errorString -> Jsoup.clean(errorString,
                    Whitelist.simpleText()))
            .collect(Collectors.joining("<br>"));

    // finally, display all bean level validation errors in a single
    // label
    formStatusLabel.getElement().setProperty("innerHTML", errorMessage);
    setVisible(formStatusLabel, !errorMessage.isEmpty());

    // Let the default handler show messages for each field
    defaultHandler.statusChange(status);
});
----
