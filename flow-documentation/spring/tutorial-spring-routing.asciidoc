---
title: Routing with Spring
order: 2
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Routing with Spring

There is no any difference in using router with Spring. All routing features 
works in Spring application in the same way as they work without Spring.
To be able to handle the default route you just define a component with `@Route("")` annotation:

[source,java]
----
@Route("")
public class RootComponent extends Div {
    public RootComponent(){
        setText("Default path");
    }
}
----

In the same way you may define any other router path. See  
<<../routing/tutorial-routing-annotation#,Defining Routes with @Route>> 
tutorial and other router tutorials for more details about using router.

The only thing that is new here for Spring it's a possibility to use DI in the
components annotated with `@Route`. Such a component is instantiated by Spring
and becomes a Spring initialized bean. In particular it means that you may autowire
another Spring managed beans. Here is an example:

 [source,java]
----
@Route("")
public class RootComponent extends Div {
    
    @Autowired
    private DataBean dataBean;
    
    public RootComponent(){
        setText(dataBean.getMessage());
    }
}

public interface DataBean {
    String getMessage();
}

@Component
public class DataBeanImpl implements DataBean {

    public String getMessage(){
        return "message";
    }
}
----
