---
title: Vaadin Spring Scopes
order: 4
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Vaadin Spring Scopes

In addition to standard Spring scope the Spring add-on introduces two new scopes:
`VaadinSessionScope` and `UIScope`.

`VaadinSessionScope` manages the Spring beans during Vaadin Session lifecycle.
It means that the same bean instance will be used within the whole Vaadin session.

[source,java]
----
@Route("")
public class MainLayout extends Div {
    public MainLayout(@Autowired SessionService bean){
        setText(bean.getText());
    }
}

@Route("editor")
public class Editor extends Div {
    public Editor(@Autowired SessionService bean){
        setText(bean.getText());
    }
}

@Component
@VaadinSessionScope
public class SessionService {
    private String uid = UUID.randomUUID().toString();
    
    public String getText(){
        return "session "+uid;
    } 
}
----

In this example the same instance of `SessionService` will be used as long as 
we access the application from the same Vaadin session since it's session scoped. 
E.g. if you open the root target in one tab and the editor target in another tab, 
then the shown text will be the same for both. It happens because the session 
is the same even though the tabs (and `UI` instances) are different.

The `@UIScope` manages the Spring beans during the `UI` lifecycle. Similar to the example above
the `UIService` will be the same while we are in the same `UI` since it's ui scoped now.

[source,java]
----
@Route("")
public class MainLayout extends Div {
    public MainLayout(@Autowired UIService bean){
        setText(bean.getText());
    }
}

@Route("editor")
public class Editor extends Div {
    public Editor(@Autowired UIService bean){
        setText(bean.getText());
    }
}

@Component
@UIScope
public class UIService {
    private String uid = UUID.randomUUID().toString();
    
    public String getText(){
        return "ui " + uid;
    } 
}
----

Now if you open two browser tabs, the text in these will be different since the `UI` instances
are different. But if you navigate to the `Editor` instance via the router (or the `UI` instance which 
delegates navigation to the router) then the text will be the same.

[source,java]
----
public void edit() {
    getUI().get().navigateTo("editor");
}
----

So inside the same `UI` instance the same bean instance with `@UIScope` is used. 
