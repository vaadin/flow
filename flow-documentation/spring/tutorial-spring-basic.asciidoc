---
title: Use Flow with Spring
order: 1
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Use Flow with Spring

The Spring add-on allows you to use Flow with Spring in two ways: 
as a Spring Boot application and as a Spring Web application.

== Spring Boot 
The easiest way to use Spring is the Spring Boot application. 
To use the add-on, you only need to write one very simple class.

[NOTE]
Please refer to the https://projects.spring.io/spring-boot/[Spring Boot] 
project and its https://spring.io/docs[documentation page] for information about Spring Boot.

[NOTE]
There is another section <<tutorial-spring-basic-mvc#,Use Flow with Spring MVC>> in the tutorial which
describes how to write pure Spring Web application without Spring Boot.

[[example-servlet]]
[source,java]
----
@SpringBootApplication
public class ExampleServletInitializer extends SpringBootServletInitializer {

}
----

[NOTE]
This code looks like magic and you may wonder why it works. The `@SpringBootApplication` 
annotation makes all the job for you under the hood.

Thanks to Spring Boot auto-configuration you only need the Spring add-on 
in your classpath and no Flow classes are needed in the class declaration. 
Here is the code snippet from `pom.xml` which declares the necessary dependencies:

[source,xml]
----
<dependencies>
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>flow</artifactId>
        <version>${flow.version}</version>
    </dependency>

    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>flow-spring-addon</artifactId>
        <version>${flow.version}</version>
    </dependency>

    <!-- Spring -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
        <version>${spring-boot.version}</version>
        <exclusions>
            <exclusion>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-tomcat</artifactId>
            </exclusion>
        </exclusions>
    </dependency>
----

[NOTE] 
You can see the exclusion in the `spring-boot-starter-web` declaration. 
It's not relevant for this example but if you want to run your application as a 
deployable WAR then this helps you avoid classpath collisions.

[NOTE]
The Spring add-on doesn't declare compile dependency to Spring Boot (it doesn't appear transitively) 
so you should declare it by yourself. This is done to be able to use the add-on without Spring Boot.

Of course you need at least one Flow related class in your application to be able to handle URLs.
The minimal code would be:

[source,java]
----
@Route("")
public class HelloComponent extends Div {
    public HelloComponent(){
        setText("Hello world!");
    }
}
----

With the <<example-servlet,ExampleServletInitializer>> you can deploy the application as a WAR to a web server.
Spring Boot lets you speed up the development process and run the Spring Boot application as a plain Java Application.
For this you need to add a main method with the following content:

[source,java]
----
@SpringBootApplication
public class ExampleServletInitializer extends SpringBootServletInitializer {
    public static void main(String[] args) {
        SpringApplication.run(ExampleServletInitializer.class, args);
    }
}
----

No need to do anything in addition to that. Once you start this Java application,
Spring Boot will start its embedded web server and everything will work in the same way.

[NOTE]
You should remove exclusion from the `spring-boot-starter-web` dependency in 
the `pom.xml` snippet above.
