---
title: URL generation
order: 8
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
==== Work in progress

= Router Exception Handling

There is special support for navigation targets that are activated to show an error message to the user.

These targets generally work in the same way as regular navigation targets, although they do typically
not have any specific `@Route` as they are shown for arbitrary URLs.

Error navigation is resolved to a target based on the exception type thrown during navigation.

At startup all classes implementing the interface `HasErrorParameter<T extends Exception>`
will be collected to be used as exception targets during navigation.

For instance here is the default target for the `NotFoundException` that will
be shown when there is no target for the given url.

.RouteNotFoundError for NotFoundException during routing
[source, java]
----
@Tag(Tag.DIV)
public class RouteNotFoundError extends Component
        implements HasErrorParameter<NotFoundException> {

    @Override
    public int setErrorParameter(BeforeNavigationEvent event,
            ErrorParameter<NotFoundException> parameter) {
        getElement().setText(
                "Could not navigate to '" + event.getLocation().getPath() + "'");
        return 404;
    }
}
----

This will return an http response of 404 and show the set text to the user.

Exception matching will run first by exception cause and then by exception super type.

Default exceptions that are implemented are `RouteNotFoundError` for `NotFoundException` with a `404`
and `InternalServerError` for `java.lang.Exception` with a `500`.

The default exception handlers can be overridden by extending them like:

.Custom route not found
[source, java]
----
public class CustomNotFoundTarget extends RouteNotFoundError {

    @Override
    public int setErrorParameter(BeforeNavigationEvent event,
            ErrorParameter<NotFoundException> parameter) {
        getElement().setText("My custom not found class!");
        return 404;
    }
}
----

[NOTE]
Exception targets may define ParentLayouts and `BeforeNavigationEvent` and `AfterNavigationEvent`
will be sent as for normal navigation.

[NOTE]
One exception may only have one exception handler (only extending instances are allowed).

== Rerouting to an error view

It is possible to reroute to an error view registered for an exception from the `BeforeNavigationEvent`.

The rerouting is done by using one of the overloads for `BeforeNavigationEvent::rerouteToError` with only the
exception class to target or with an added custom error message.

.Reroute to error view
[source, java]
----
public class AuthenticationHandler implements BeforeNavigationListener {
    @Override
    public void beforeNavigation(BeforeNavigationEvent event) {
        Class<?> target = event.getNavigationTarget();
        if (!currentUserMayEnter(target)) {
            event.rerouteToError(AccessDeniedException.class);
        }
    }

    private boolean currentUserMayEnter(Class<?> target) {
        // implementation omitted
        return false;
    }
}
----

[NOTE]
In cases where the rerouting method catches an exception and there is a need to add a custom
message it is possible to use the `rerouteToError(Exception, String)` method to set a custom message.


