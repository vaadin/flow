---
title: View Hierarchy and Nested Views
order: 6
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

== View Hierarchy and Nested Views

For a basic routing tutorial, see <<tutorial-routing-router-configuration#,Defining Routes With RouterConfiguration>>.

When defining routes using `setRoute(String, Class)`, the view will be rendered inside the `<body>` tag on the page (the element returned by `View.getElement()` is attached to the `<body>`). You can define a parent view using `setRoute(String, Class<? extends View>, Class<? extends HasChildView>)`. To render `CompanyView` inside a view you would call `MainLayout` you would do:

[source,java]
----
@Override
public void configure(RouterConfiguration configuration) {
  configuration.setRoute("company", CompanyView.class, MainLayout.class);
}
----

All parent views must implement the `HasChildView` interface and override the method `setChildView(View childView)`. The purpose of this method is to attach the child view element to the parent view at an appropriate place in the DOM. Your MainLayout could e.g. look like:

[source,java]
----
public class MainLayout extends Div implements HasChildView {

  private Div childContainer;

  public MainLayout() {
    // Initialize the main layout DOM
    Div header = new Div();
    header.setText("This header will always be shown");

    childContainer = new Div();
    add(header, childContainer);
  }


  @Override
  public void setChildView(View childView) {
    childContainer.removeAll();
    childContainer.add((Component)childView);
  }
}
----

`CompanyView` will now always be attached inside the `childContainer` in the `MainLayout` view. If there are multiple views using the same parent view, then the parent view instances will remain the same when the user navigates between the child views.

[NOTE]
A parent view (`HasChildView`) is always a `View` itself.

To define multiple view levels, you can use the method `setParentView(Class<? extends View>, Class<? extends HasChildView>)` in the configuration class, e.g.

[source,java]
----
@Override
public void configure(RouterConfiguration configuration) {
  configuration.setRoute("company", CompanyView.class, CompanySideBarView.class);
  configuration.setParentView(CompanySideBarView.class, MainLayout.class);
}
----

This will render `CompanyView` nested inside `CompanySideBarView`, which in turn is nested inside `MainLayout`.

See also:

* <<tutorial-routing-view-parameters#,Using View Parameters>>
* <<tutorial-routing-view-titles#,Updating Page Title on Navigation>>
