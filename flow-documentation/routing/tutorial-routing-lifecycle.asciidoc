---
title: Navigation Lifecycle
order: 2
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
==== Work in progress

= Navigation Lifecycle

During the navigation lifecycle the activating and deactivating components will
get a number of different lifecycle state events.

== BeforeNavigationEvent

Any `Component` in the activating or deactivating navigation target chain will
receive a `BeforeNavigationEvent` if they extend the `BeforeNavigationListener` *interface*.

This holds also true for listener implementations in a node component found from the root target e.g.
[source,java]
----
@Route("")
@Tag("main-layout")
@HtmlImport("frontend://com/example//MainLayout.html")
public class MainLayout extends PolymerTemplate<TemplateModel> {

    public MainLayout() {
        SideElement side = new SideElement();
        getElement().appendChild(side.getElement());
    }
}

public class SideElement extends Div implements BeforeNavigationListener {
    @Override
    public void beforeNavigation(BeforeNavigationEvent event) {
        // Handle for instance before navigation clean up
    }
}
----


=== Reroute
The `BeforeNavigationEvent` can be used to reroute dynamically if there is a need
to show completely different information in some state.
Rerouting can happen from a listener in the detaching or the attaching chain.

In this example the reroute would happen on attach of `BlogList` when it receives no results.
[source,java]
----
@Route("no-items")
public class NoItemsView extends Div {
    public NoItemsView() {
        setText("No items found.");
    }
}

@Route("blog")
public class BlogList extends Div implements BeforeNavigationListener {
    @Override
    public void beforeNavigation(BeforeNavigationEvent event) {
        // implementation omitted
        Object record = getItem();

        if (record == null) {
            event.rerouteTo(NoItemsView.class);
        }
    }

    private Object getItem() {
        // no-op implementation
        return null;
    }
}
----
[NOTE]
`rerouteTo` has several overloads to serve different use cases.

=== Postpone
`BeforeNavigationEvent` has a `postpone` method, which can be used to postpone
the current navigational transition until a specific condition is met.
E.g. the client may request the user's confirmation before leaving the page:
[source,java]
----
public class SignupForm extends Div implements BeforeNavigationListener {
    @Override
    public void beforeNavigation(BeforeNavigationEvent event) {
        if (event.getActivationState() == ActivationState.DEACTIVATING
                && this.hasChanges()) {
            ContinueNavigationAction action = event.postpone();
            ConfirmDialog.build("Are you sure you want to leave this page?")
                    .ifAccept(action::proceed).show();
        }
    }

    private boolean hasChanges() {
        // no-op implementation
        return true;
    }
}
----
Postponing interrupts the process of notifying listeners. When the transition is
resumed, the remaining listeners after the one which initiated the postpone will be called.
As an example, let's assume the current page has 3 listeners __a__, __b__ and __c__,
which are being notified in this order. If __b__ calls `postpone`, the call to __c__,
as well as the rest of the transition process, is deferred. If the transition
postponed by __b__ is not resumed, __c__ will not get a notification about this
event at all and the transition never finishes. If, however, __b__ executes its
`ContinueNavigationAction` to resume the transition, it is continued from
where it was interrupted. Thus __a__ and __b__ are not called again, but __c__ is notified.

[NOTE]
Postpone may only be initiated while leaving (deactivating) a page; if the method
is called while entering / activating the new page, it will throw an `IllegalStateException`.
[NOTE]
At most one navigation event may be postponed at any time; starting a new
navigation transition while a previous one is in a postponed state obsoletes
the postponed state. After that, executing the `ContinueNavigationAction` kept
from earlier will have no effect.

== AfterNavigationEvent

A component can also listen to the `AfterNavigationEvent` that is sent when the
old state has been deactivated and the new state has been attached and configured.

A good use case for this event is when you need to update menu selections.
When this method is triggered, it is guaranteed that there will be no further redirects,
so you can safely use the location returned by the `AfterNavigationEvent`.

As with `BeforeNavigationEvent`, `AfterNavigationEvent` can be set to any `Component` in
the activating chain.

[source,java]
----
public class SideMenu extends Div implements AfterNavigationListener {
    Anchor blog = new Anchor("blog", "Blog");

    @Override
    public void afterNavigation(AfterNavigationEvent event) {
        boolean active = event.getLocation().getFirstSegment()
                .equals(blog.getHref());
        blog.getElement().getClassList().set("â‰¥active", active);
    }
}
----
