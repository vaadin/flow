---
title: Navigation Lifecycle
order: 2
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Navigation Lifecycle

During the navigation lifecycle the activating and deactivating components will
get a number of different lifecycle state events.

== BeforeNavigation

In this state of the navigation lifecycle we detach any existing components, collect
the components for the new view to be shown and inform component event listeners
of the navigation status.

During this lifecycle there is the possibility to reroute to another view, reroute to an
error view and even postpone navigation to get user confirmation.

=== Before navigation observers

Any `Component` implementing a before navigation observer will be informed when they
are being detached (<<detached>>) or attached (<<attached>>) to the UI. The components to inform of navigation
events will be collected from the root component and the children connected to it.

.Child component implementing BeforEnterObserver
[source,java]
----
@Route("")
@Tag("main-layout")
@HtmlImport("frontend://com/example//MainLayout.html")
public class MainLayout extends PolymerTemplate<TemplateModel> {

    public MainLayout() {
        SideElement side = new SideElement();
        getElement().appendChild(side.getElement());
    }
}

public class SideElement extends Div implements BeforeEnterObserver {
    @Override
    public void beforeEnter(BeforeEnterEvent event) {
        // Handle for instance before navigation clean up
    }
}
----

[#detached]
=== BeforeLeaveObserver
The `BeforeLeaveObserver` will only be
notified when the component will be detached from the UI.

During the `BeforeLeaveObserver` state postponing and rerouting is supported.

[#attached]
=== BeforeEnterObserver
The `BeforeLeaveObserver` will only be
notified when the component will be attached to the UI.

During the `BeforeEnterObserver` state only reroute is supported.

== BeforeEnterEvent and BeforeLeaveEvent

The `BeforeEnterEvent` and `BeforeLeaveEvent` classes contain information about the current navigation
state, and enables optional functions like <<reroute>> and <<postpone>>.

[#reroute]
=== Reroute
The `BeforeNavigationEvent` can be used to reroute dynamically if there is a need
to show completely different information in some state.
Rerouting can happen from an observer in the detaching or the attaching chain.

In this example the reroute would happen on attach of `BlogList` when it receives no results.
[source,java]
----
@Route("no-items")
public class NoItemsView extends Div {
    public NoItemsView() {
        setText("No items found.");
    }
}

@Route("blog")
public class BlogList extends Div implements BeforeEnterObserver {
    @Override
    public void beforeEnter(BeforeEnterEvent event) {
        // implementation omitted
        Object record = getItem();

        if (record == null) {
            event.rerouteTo(NoItemsView.class);
        }
    }

    private Object getItem() {
        // no-op implementation
        return null;
    }
}
----
[NOTE]
`rerouteTo` has several overloads to serve different use cases.

[#postpone]
=== Postpone
`BeforeLeaveEvent` has a `postpone` method, which can be used to postpone
the current navigational transition until a specific condition is met.

E.g. the client may request the user's confirmation before leaving the page:
[source,java]
----
public class SignupForm extends Div implements BeforeLeaveObserver {
    @Override
    public void beforeLeave(BeforeLeaveEvent event) {
        if (this.hasChanges()) {
            ContinueNavigationAction action = event.postpone();
            ConfirmDialog.build("Are you sure you want to leave this page?")
                    .ifAccept(action::proceed).show();
        }
    }

    private boolean hasChanges() {
        // no-op implementation
        return true;
    }
}
----
Postponing interrupts the process of notifying observers. When the transition is
resumed, the remaining observers after the one which initiated the postpone will be called.
As an example, let's assume the current page has 3 observers __a__, __b__ and __c__,
which are being notified in this order. If __b__ calls `postpone`, the call to __c__,
as well as the rest of the transition process, is deferred. If the transition
postponed by __b__ is not resumed, __c__ will not get a notification about this
event at all and the transition never finishes. If, however, __b__ executes its
`ContinueNavigationAction` to resume the transition, it is continued from
where it was interrupted. Thus __a__ and __b__ are not called again, but __c__ is notified.

[NOTE]
At most one navigation event may be postponed at any time; starting a new
navigation transition while a previous one is in a postponed state obsoletes
the postponed state. After that, executing the `ContinueNavigationAction` kept
from earlier will have no effect.

== AfterNavigationEvent

A component can also listen to the `AfterNavigationEvent` that is sent when the
old state has been deactivated and the new state has been attached and configured.

A good use case for this event is when you need to update menu selections.
When this method is triggered, it is guaranteed that there will be no further redirects,
so you can safely use the location returned by the `AfterNavigationEvent`.

As with `BeforeNavigationEvent`, `AfterNavigationEvent` can be set to any `Component` in
the activating chain.

[source,java]
----
public class SideMenu extends Div implements AfterNavigationObserver {
    Anchor blog = new Anchor("blog", "Blog");

    @Override
    public void afterNavigation(AfterNavigationEvent event) {
        boolean active = event.getLocation().getFirstSegment()
                .equals(blog.getHref());
        blog.getElement().getClassList().set("active", active);
    }
}
----
