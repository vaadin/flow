ifdef::env-github[:outfilesuffix: .asciidoc]
= Importing HTML and JavaScript 

There are two ways to import HTML and JavaScript with a component.

By using the annotations @JavaScript and @HtmlImport

[source,java]
----
@Tag("div")
@JavaScript("/js/script.js")
@HtmlImport("/html/htmlimport.html")
static class HtmlComponent extends Component implements HasText {
  // implementation omitted
}
----

Both annotations are repeatable and you can add multiple annotations for both
to the component.

[NOTE]
====
The execution order for the imports is not guaranteed and if for example the
JavaScript should be run after the HTML then you should import an html that has
the correct load order, eg.
[source, html]
----
<link rel="import" href="htmlimport4.html">
<script src="htmlimport4-js.js"></script>
----
[source, html]
====

Another way of adding imports are the `addHtmlImport(String url)` and
`addJavaScript(String url)` methods from the `Page` class.
The functionality is the same as for the annotations.

[source,java]
----
public class MyCustomUI extends UI {

  @Override
  protected void init(VaadinRequest request) {
    getPage().addHtmlImport("/html/htmlimport.html");
    getPage().addJavaScript("/js/script.js");
  }
}
----

You can place your static resources in any folder inside your WAR file except
for `/VAADIN` which is reserved for framework internal use.
`VaadinServlet` handles static resource requests if you have mapped it to `/*` .
Otherwise, the servlet container will take care of static resource requests.

By using relative URLs you are not dependent on whether the application is
deployed in the root context (e.g.  `http://mysite.com/`) or in a sub
context (e.g. `http://mysite.com/myapp/`).

Relative URLs are resolved using the page base URI, which is always set to
match the servlet URL.

[TIP]
====
If you are using a servlet path for the servlet, e.g. `http://mysite.com/myapp/myservlet/`
then you will need to take the servlet path into account when including resources.
This is needed because the base URI is `http://mysite.com/myapp/myservlet/` but
static resources are deployed in `http://mysite.com/myapp/`.

You can use the special protocol `context://` with e.g. `Page.addHtmlImport` to
ensure a URL relative to the context path but this is only supported when
including resources.

When you configure an element, e.g setting the `src` attribute for an `<img>`,
you cannot use the `context://` protocol. Your options are then:

* Cancel out the servlet path, e.g. `../images/logo.png`.
* Use an absolute URL, e.g. `/myapp/images/logo.png`
* Deploy your static resources in a directory matching the servlet path, e.g. `/myservlet/`.
====
