---
title: Vaadin Tutorial
order: 1
layout: page
subnav_auto_list_numbers: true
subnav:
  - title: Overview
    href: '#flow.tutorial.overview'
    subnav:
      - title: Installing the Development Tools
        href: '#flow.tutorial.overview.tools'
  - title: Creating a project using an archetype
    href: '#flow.tutorial.archetype'
  - title: Adding a demo "backend"
    href: '#flow.tutorial.backend'
  - title: Listing entities in a Grid
    href: '#flow.tutorial.grid'
  - title: Creating live filtering for entities
    href: '#flow.tutorial.filtering'
  - title: Creating a form to edit Customer objects
    href: '#flow.tutorial.form'
  - title: Connecting the form to the application
    href: '#flow.tutorial.form-connection'
  - title: Customizing the look and feel with CSS
    href: '#flow.tutorial.margin'
  - title: It works! What next?
    href: '#flow.tutorial.next'
---
:sectnums:

[[flow.tutorial]]
= Vaadin Flow Tutorial

This tutorial gives you an overview of how you can use https://vaadin.com/flow[Vaadin Flow]
to build single-page web UIs for your Java application. All you need to start
with it is JDK 8 and an https://en.wikipedia.org/wiki/Integrated_development_environment[IDE],
such as Eclipse. While this tutorial is written for Eclipse users, you can use
your IDE of choice. No extensive knowledge of Java is needed, only basic programming
skills are required.

[[flow.tutorial.overview]]
== Overview

You'll have your first Vaadin Flow app running in your IDE in a couple of minutes. To
complete the whole tutorial, you'll need about 20 to 60 minutes, depending on your
existing experience.

In this tutorial, we build a simple customer management system. It is not a real
application; we use an in-memory "back-end", so that you can understand how to
hook it to an existing Java based back-end. We cover the basic Vaadin Flow
development and you can use the result as a basis for more experiments with Vaadin
Flow, such as using add-ons, your own custom look-and-feel (aka. theme), adding
new views, or optimizing the result for mobile support.

//[[figure.flow.tutorial.final-ui]]
//.UI to be built in the tutorial
image:images/FinishedUI.png[UI to be built in the tutorial]

If you do not want to do the exercise at all, you can also just
https://github.com/hezamu/flow-tutorial/[download the final application] and play
around with it.

//[TIP]
//In addition to this written tutorial, we have recorded the steps as
//https://www.youtube.com/playlist?list=Alejandro[a series of videos]. You can just
//watch all the videos or watch the video of each step before you do the same step
//yourself.

[[flow.tutorial.overview.tools]]
=== Installing the Development Tools

The tutorial uses Java 8, so please ensure that you have an up-to-date JDK 8
installed. Most Linux distributions can use package managers to install JDK8.
Windows and Mac users should download it from http://www.oracle.com/technetwork/java/javase/downloads/index.html[Oracle's Java SE site].

Also make sure you have the latest version of your IDE. Eclipse is available in
various packages; be sure to download the *Eclipse IDE for Java EE Developers*
from http://www.eclipse.org/downloads/[eclipse.org].

[[flow.tutorial.archetype]]
== Creating a Project from an App Starter

// The following video shows how to do this step of the tutorial:

// video::Alejandro[youtube, width="640", height="400"]

As the starting point for the application, we use a Vaadin App Starter called
Skeleton Starter App. App Starters are project stubs that have dependencies set
up, and may include some example code.

. Start by pointing your browser at https://vaadin.com/start[Vaadin Start]

. Pick Vaadin 10 as the version

. Select the Skeleton Starter App by clicking it

. Enter the following values to as application parameters. You may have to
scroll down a bit to see the fields.
+
[guilabel]#Group ID#::
 Give `com.vaadin`
[guilabel]#Project name#::
 Give `my-app`

. Click [guilabel]#download# to, well, download the preconfigured project stub as
a ZIP file.

. The name of the downloaded ZIP package should be `my_app.zip`. Locate it from
your hard drive and extract it to a folder of your preference.

. Fire up Eclipse and import the project as an existing Maven project.

If this is your first Vaadin app, opening the project might take a while,
depending on the speed of your network, as Vaadin libraries and other
dependencies are being downloaded. Maven caches them on your local file system.
Creating your next Maven-based Vaadin project will be much faster.

Right click on the newly created project in [guilabel]#Project Explorer" and choose
"Run as > Maven Install". This initiates a full build of your application and
finally creates a https://en.wikipedia.org/wiki/WAR_(file_format)[WAR] file into
the [filename]#target# directory. You can deploy the WAR file to your application
server. The first build might take a while, as Maven might need to download
some additional modules.

[TIP]
For the Maven compilation to work you need a JDK to be configured in your
Eclipse in "Window > Preferences > Java > Installed JREs > Add...".
This step is necessary at least on Windows, if you are using a fresh installation
of Eclipse or for some other reason haven't configured a JDK to your Eclipse.
The JDK by default installs to [filename]#\Program Files\Java# on Windows.
You can make JDK the default JRE for your Eclipse.

While the build is running, let us have a look at what you got from the App Starter.
You can browse your project resources from the tree structure in the
[guilabel]#Project Explorer#. Maven's [filename]#pom.xml# on top level contains
settings for building your project and declares the used dependencies. Open
[guilabel]#Java Resources# and below it [filename]#src/main/java#, the main source
directory, and [packagename]#com.vaadin.flow.demo.helloworkd#, the main Java
package that will contain your Vaadin UI code.

[TIP]
Eclipse shows all project files in the Project Explorer. In this case, you
can also find your [filename]#.java# files from under the top-level [filename]#src#
node. However, the suggested method is to access them from under the
[guilabel]#Java Resources# node, which is optimized for editing Java source code.

The Java code of the application stub main view can be found in the
[filename]#MainView.java# file. Let us take a look at it to see how it works.

[source,java]
----
@HtmlImport("styles.html")
@Route("")
public class MainView extends VerticalLayout {
    public MainView() {
        ExampleTemplate template = new ExampleTemplate();

        Button button = new Button("Click me", event -> template.setValue("Clicked!"));

        add(button, template);
    }
}
----

The [classname]#@HtmlImport("styles.html")# annotation specifies the HTML file which
includes the look and feel of the application. You can find this file in the folder
[filename]#src/main/webapp/frontend#. There is also a second annotation,
[classname]#@Route("")#, which tells Vaadin Flow to direct all requests to this view.
A default Vaadin servlet is registered behind the scenes based on this annotation.
You can define your own servlet if you need one, but the default one is usually
sufficient.

The servlet instantiates this class when a user enters your web app. When this
happens, the constructor initialises the UI structure. In this case, the main view
inherits from [classname]#VerticalLayout# which is one of the most used layout
components. Layouts are used to position and display other components.

In the main view we have a template (more on it in a bit) that shows
some text, and a button that, when clicked, modifies the value displayed by the
template. The logic is attached to the button with a simple Java 8 lambda
expression, and finally both the button and the template are added into the
main view.

[TIP]
Vaadin Flow is allows you to use and mix HTML templates and Java-generated
UI components as you wish. It would be equally easy to build our UI completely
with templates or just with Java components.

Let's take a look at [classname]#ExampleTemplate.java# next.

[source,java]
----
@Tag("example-template")
@HtmlImport("ExampleTemplate.html")
public class ExampleTemplate extends PolymerTemplate<ExampleModel> {
    /**
     * Template model which defines the single "value" property.
     */
    public interface ExampleModel extends TemplateModel {
        void setValue(String value);
    }

    public ExampleTemplate() {
        // Set the initial value to the "value" property.
        getModel().setValue("Not clicked");
    }

    public void setValue(String value) {
        getModel().setValue(value);
    }
}
----

This Java class will serve as the server side controller of a Polymer template
that will live in the browser. We again start with some annotations. The first one,
[classname]#@Tag("example-template")# specifies the tag name for the custom
element representing the template. The next one,
[classname]#@HtmlImport("ExampleTemplate.html")# tells Vaadin Flow where the
corresponding HTML file can be found from. Again, the file can be found in the
[filename]#src/main/webapp/frontend# folder.

The Java template inherits from [classname]#PolymerTemplate#. It needs to be
parametrised with a [classname]#Model# that describes all properties that are
passed to the HTML template to be used in the client side. Our model,
[classname]#ExampleModel# is specified in the template class, and it just contains
one [classname]#String# value.

To test your first Vaadin application, right-click on the project and choose
"Debug as > Maven build...". The debug mode is slightly slower than the basic run
mode, but it often helps you to figure out what is happening in your application.

In the run configuration dialog, type `Debug in Jetty` to the [guilabel]#Name#
input and `jetty:run` to the [guilabel]#Goals# input.

[[figure.flow.tutorial.jetty-run]]
.Generating a Maven launch for `jetty:run` target
image:images/DebugAsMavenBuild.png[Generating a Maven launch for `jetty:run` target]

Before clicking debug, to make sure debugging works properly, add your Java
project to the source lookup path from the [guilabel]#Source# tab:

[[figure.tutorial.creating.add-sources]]
.Adding sources for debugging
image:images/DebugAsMavenProjectAddSources.png[Adding sources for debugging]

Now click [guibutton]#Debug# to continue. This will download Jetty, a small Java
web server (if not cached to your local Maven repository), and use it to host your
application. Once the server has started, point your browser to the URL
http://localhost:8080/[http://localhost:8080] to see the application in action!

If you make changes to the code, Jetty will notice the changes and in a couple of
seconds most changes are automatically deployed. Reloading the page in your browser
will show the changes.

[TIP]
In some cases your JVM might not allow injecting changes on the fly. In these
cases, Eclipse will complain about "Hot code replacement error". Just choose to
restart the server to get the latest changes. Many Java developers use a
commercial tool called http://zeroturnaround.com/software/jrebel/[JRebel] to make
code replacement work better.

Mastering the usage of the Java debugger is also handy to better understand how
your application actually works and fixing bugs that all developers write at some
point. As Vaadin Flow is "only" Java code, you can use all of Java's debugging
tools. Double-click on the line number in the Java editor, for example of the
following line in the main view constructor:

[source,java]
----
Button button = new Button("Click me", event -> template.setValue("Clicked!"));
----

Doing so adds a breakpoint to the selected line. If you then reload the page in
your browser, the execution of the application will stop on that line. Eclipse will
ask you to enter to _Debugging perspective_. That way you can step through the
execution and inspect the variables. Clicking on the _play_ icon in the toolbar
will continue the execution. Double-click the same line again to remove the
breakpoint.

[[figure.flow.tutorial.breakpoint]]
.Execution in a break point in the button click listener
image:images/DebugInBreakPointVariable.png[Execution in a break point in the button click listener]

Clicking the red square in the [guilabel]#Console# view will terminate the Jetty
server process. You can restart it easily form the run/debug history. You can
find that from the small down arrow next to the green play button or bug button
(for the debug mode) in the tool bar. Alternatively, you can use the main menu
"Run > Run history/Debug history > Debug in Jetty".

To get back to the _Java EE Perspective_, an Eclipse mode designed for editing
Java web app code, click the [guibutton]#Java EE# button in the toolbar.

[[flow.tutorial.backend]]
== Adding a demo "backend"

Before getting more into real Vaadin development, let us introduce some domain
objects and a dummy backend. In a real-world application, you will most likely
have something similar, implemented with, for example, JPA and EJB or a
Spring-based service.

// The following video shows how to do this step of the tutorial:

// video::Alejandro[youtube, width="640", height="400"]

Copy the following three classes from github to your project. Class names point
to the classes hosted in Github. Copying classes can be done in many ways.

[TIP]
The fastest way to copy classes using Eclipse is to use your good old
clipboard. Select the text content of the whole class from your browser, choose
"Edit > Copy", focus the node representing the [packagename]#com.vaadin.flow.demo.helloworld#
Java package in Eclipse's Java Resources view and choose "Edit > Paste". Eclipse
is smart enough to automatically create a properly named Java file for the class.

 * https://raw.githubusercontent.com/hezamu/flow-tutorial/master/src/main/java/com/vaadin/flow/demo/helloworld/CustomerStatus.java[CustomerStatus.java] -
 this is a simple enum class
 * https://raw.githubusercontent.com/hezamu/flow-tutorial/master/src/main/java/com/vaadin/flow/demo/helloworld/Customer.java[Customer.java] -
 this is the main domain object, a basic Java bean that we will be using in our example
 * https://raw.githubusercontent.com/hezamu/flow-tutorial/master/src/main/java/com/vaadin/flow/demo/helloworld/CustomerService.java[CustomerService.java] -
 this is a simple facade via which you can request and modify [classname]#Customer#
 instances. You can think of this class as your entry point to your dummy database.

In the next steps, we will be using these classes and build a UI around them. The
actual implementation of these classes is not relevant for this tutorial, but feel
free to have a look around.

[[flow.tutorial.grid]]
== Listing entities in a Grid

Often when you start building a UI for a data-centric application, the first
thing you want to do is to list your data from your back-end. There are several
components and ways in Vaadin to do this. In this example, we will use the Grid
component for tabular presentation of our customers.

// The following video shows how to do this step of the tutorial:

// video::Alejandro[youtube, width="640", height="400"]

We start by introducing a [classname]#Grid# in [classname]#MainView#. We could of
course just introduce the grid as a variable in the constructor, but we most
likely want to refer to it later. Also, let us get a reference to our
[classname]#CustomerService#.

[source, java]
----
@HtmlImport("styles.html")
@Route("")
public class MainView extends VerticalLayout {
    // Add the next two lines:
    private CustomerService service = CustomerService.getInstance();
    private Grid<Customer> grid = new Grid<>();

    // The rest is already there...
    public MainView() {
----

[TIP]
If you are new to Java development, you probably do not feel comfortable
with the red compilation error for the line where the [classname]#Grid# got
introduced, because of a missing import. This is easily fixed in Eclipse by using
the menu:Source[Organize Imports] command. Learn its shortcut (kbd:[Ctrl-Shift-O]
or kbd:[CMD-Shift-O] on Macs), you will be using it a lot in Java development. In
possible class name collisions, always choose the appropriate class from the
`com.vaadin.ui` package if you want to import core Vaadin FLow UI components like
the Grid.

To list all properties of all Customer objects from the backend service,
replace the [classname]#MainView# constructor with the following:

[source,java]
----
public MainView() {
    grid.setSizeFull();

    grid.addColumn(Customer::getFirstName).setHeader("First name");
    grid.addColumn(Customer::getLastName).setHeader("Last name");
    grid.addColumn(Customer::getStatus).setHeader("Status");

    add(grid);

    updateList();
}
----

As we'll want to refresh the listing from various places in our application,
we put the customer listing part into its own "updateList" method with the
*public* modifier. The public modifier is handy later when we want to update the
listing from other classes. The method looks like this:

[source,java]
----
public void updateList() {
    grid.setItems(service.findAll());
}
----

If you try the application now, you'll see a Grid with a bunch of customers, but
the look and feel is very drab. Vaadin Flow comes with a powerful theme engine
called Valo, so let's use its look and feel. Open the style file
[filename]#src/main/webapp/frontend/styles.html# and add the following line at
the head of the file:

[source,html]
----
<link rel="import" href="bower_components/vaadin-valo-theme/vaadin-grid.html">
----

At this point the body of the MainView class should look like this:

[source,java]
----
private CustomerService service = CustomerService.getInstance();
private Grid<Customer> grid = new Grid<>();

public MainView() {
    grid.setSizeFull();

    grid.addColumn(Customer::getFirstName).setHeader("First name");
    grid.addColumn(Customer::getLastName).setHeader("Last name");
    grid.addColumn(Customer::getStatus).setHeader("Status");

    add(grid);

    updateList();
}

public void updateList() {
    grid.setItems(service.findAll());
}
----

You can now save your changes and verify the changes from your browser. You can
do this at any point during the rest of the tutorial as well.

[[flow.tutorial.filtering]]
== Creating live filtering for entities

A search functionality is expected in every modern application and it is also a
nice Vaadin development exercise. Let's add a filtering functionality to our
Customer listing we created in the previous step.

// The following video shows how to do this step of the tutorial:

// video::Alejandro[youtube, width="640", height="400"]

We'll start by introducing a [classname]#TextField# component as a field to our
[classname]#MainView# class:

[source,java]
----
private TextField filterText = new TextField();
----

In the constructor, configure the text field to contain a helpful input prompt
and add a text change listener to the field. The exact place of these lines is
not important, but add them, for example, at the beginning of the constructor.

[source,java]
----
filterText.setPlaceholder("filter by name...");
filterText.addValueChangeListener(e -> updateList());
----

[TIP]
To keep your code more readable, you can use autoformat after you write or
copy paste code snippets. The default keyboard shortcut in Eclipse is
kbd:[Ctrl+Shift+F] or kbd:[Cmd+Shift+F]

As its name implies, the value change listener allows you to react to changes in
the value contained in the text field. It is configured so that the event is fired
lazily while the user is typing, when there is a small pause in the typing.
This makes it perfect for this kind of automatic filtering. When the
user has changed the text, we'll just update the listing calling the `updateList`
method.

To keep the `updateList` method functional, it should take into consideration
the possible value in the filterText field. Change the body of the method into
this:

[source,java]
----
grid.setItems(service.findAll(filterText.getValue()));
----

Before adding the text field to the UI, let's improve the usability a bit
and make a short exercise to compose better components from lower level UI
components. The search field can naturally be cleared with the keyboard, but let's
add a clear button next to the text field. Start by adding the following lines
to the init method, for example right after your `filterText` configuration:

[source,java]
----
Button clearFilterTextBtn = new Button(new Icon(VaadinIcons.CLOSE_CIRCLE));
clearFilterTextBtn.addClickListener(e -> filterText.clear());
----

Vaadin Flow includes a set of built in icons, from which we use the "X" icon,
`VaadinIcons.CLOSE_CIRCLE` here, which most users will recognise as a functionality
to clear a value. In the click listener, we simply clear the text from the field.

Vaadin Flow contains lots of different kinds of layouts. The simplest way to align
the text field and the button next to each other is to use a
[classname]#HorizontalLayout#. Add this line to the init method right after you
configured the `clearFilterTextBtn`:

[source,java]
----
HorizontalLayout filtering = new HorizontalLayout(filterText, clearFilterTextBtn);
----

Finally, *change* the line in the init method that currently adds only the grid,
to add both `filtering` composition and the grid to the main view.

[source,java]
----
add(filtering, grid);
----

As the last step, let's give the awesome Valo looks to our text field. Add to the
following to [filename]#src/main/webapp/frontend/styles.html# as before:

[source,html]
----
<link rel="import" href="bower_components/vaadin-valo-theme/vaadin-text-field.html">
----

Now it is a good time to save your changes and try them out in your browser!

[[framework.tutorial.form]]
== Creating a form using plain Java

To edit and add Customer objects we need to create a form that edits the
values in our domain objects.

// The following video shows how to create a form using plain Java:

// video::Alejandro[youtube, width="640", height="400"]

Start by creating a new Java class with the name CustomerForm. In Eclipse right
click on the "com.vaadin.flow.demo.helloworld" package and choose menu:New[Class].
Type in the name `CustomerForm`, define the superclass as `com.vaadin.ui.FormLayout`
and click `finish`.

In the form, we'll need editor fields for each property in our [classname]#Customer#
domain class. There are different kinds of fields in Vaadin for editing different
kinds of properties. In this example, we'll use a [classname]#TextField# and a
[classname]#ComboBox#. Add the following field declarations and action buttons
as Java fields to [classname]#CustomerForm#:

[source,java]
----
private TextField firstName = new TextField("First name");
private TextField lastName = new TextField("Last name");
private ComboBox<CustomerStatus> status = new ComboBox<>("Status");
private Button save = new Button("Save");
private Button delete = new Button("Delete");
----

Also, we will later need a reference to the currently edited [classname]#Customer#
instance, [classname]#CustomerService# and the [classname]#MainView#. Add these
fields and a basic constructor that accepts [classname]#MainView# as a parameter
to [classname]#CustomerForm#:

[source,java]
----
private CustomerService service = CustomerService.getInstance();
private Customer customer;
private MainView view;

public CustomerForm(MainView view) {
    this.view = view;

    HorizontalLayout buttons = new HorizontalLayout(save, delete);

    setSizeUndefined();

    add(firstName, lastName, status, buttons);
}
----

In the constructor we add the fields to the [classname]#CustomerForm# and add
action buttons to the bottom - side-by-side using a [classname]#HorizontalLayout#.
Although the form is not yet fully functional, you might want to see what it looks
like at this point. Add it as a field to [classname]#MainView# class:

[source,java]
----
private CustomerForm form = new CustomerForm(this);
----

Now let's modify [classname]#MainView# to show the form. Let's wrap both the
[classname]#Grid# and the [classname]#CustomerForm# in a horizontal layout. Replace
the line *add(filtering, grid);* with the following:

[source,java]
----
HorizontalLayout main = new HorizontalLayout(grid, form);
main.setAlignItems(Alignment.START);
main.setSizeFull();

add(filtering, main);
----

The `main.setAlignItems(Alignment.START);` is there to make sure that the
contents are aligned to the top of the layout. When you now save your changes and
reload your application page in your browser, you should see your form next to
the grid that lists your existing entities.

Let's get back to [classname]#CustomerForm#. The first thing we'll need to do is
to populate the options for the [classname]#ComboBox#. To add all enum values as
valid selections, add the following line to the constructor:

[source,java]
----
status.setItems(CustomerStatus.values());
----

Let's also improve the UX a bit. The most common thing your users will want to
do with this kind of form is to save it. Let's decorate the button with a style
name that makes it more prominent in the UI:

[source,java]
----
save.getElement().setAttribute("theme", "primary");
----

To finish our form, we need to create a public API that we will use in the next
part from the [classname]#MainView#, to pass in a [classname]#Customer# object
that the form should edit. We will also add some logic to actually save the
changes. We'll start by adding a [classname]#Binder# as a field to our form:

[source,java]
----
private Binder<Customer> binder = new Binder<>(Customer.class);
----

In the form constructor add the following line to configure the binder:

[source,java]
----
binder.bindInstanceFields(this);
----

This configures the binder to use all the similary named editor fields in
this form to bind their values with their counterpart in the [classname]#Customer#
class. For example, the `CustomerForm.firstName` [classname]#TextField# will be
bound to the `Customer.firstName` property.

Create a setter method for the customer field. Just type `setCus` in the body of
the form class and hit autocomplete (kbd:[Ctrl+Space]) and Eclipse will create a
method stub for you. Complete it with the following implementation:

[source,java]
----
public void setCustomer(Customer customer) {
    this.customer = customer;
    binder.setBean(customer);
}
----

In addition to saving the reference of the currently edited Customer instance, we
are calling the `Binder.setBean` method. This will initialise all fields in the
form and automatically update the values in the domain objects as the corresponding
field value changes in the user interface.

[TIP]
If the naming convention based databinding doesn't fit your needs, you can
use https://www.vaadin.com/api/com/vaadin/annotations/PropertyId.html[PropertyId]
annotation on fields to explicitly declare the edited property.

We'll also want to ensure the form is visible and that the focus goes to the
firstName` field to improve the user experience.

The last thing we need to do is to handle `save` and `delete` button clicks. Add
the following methods to the [classname]#CustomerForm# class:

[source,java]
----
private void delete() {
    service.delete(customer);
    view.updateList();
    setCustomer(null);
}

private void save() {
    service.save(customer);
    view.updateList();
    setCustomer(null);
}
----

Finally, we'll add listeners to the buttons to call these methods. Adding these
simple lambda expressions to the constructor will take care of that:

[source,java]
----
save.addClickListener(e -> this.save());
delete.addClickListener(e -> this.delete());
----

[TIP]
For a truly re-usable form component in a real life project, you'd want to
introduce an interface to replace the MainView field or, event better, use an event
system like https://vaadin.com/wiki/-/wiki/main/Events+and+contexts[CDI events]
to completely decouple the components. We'll leave that out of this tutorial for
simplicity.

[[framework.tutorial.form-connection]]
== Connecting the form to the application

In this part, we'll use the [classname]#CustomerForm# class, which we created in
the previous step, from the [classname]#MainView# class. We will use it for both
editing the existing customers and creating new ones.

// The following video shows how to do this step of the tutorial:

// video::Alejandro[youtube, width="640", height="400"]

To edit the customer chosen from the grid, add the following selection listener to
the end of the [classname]#MainView# constructor:

[source,java]
----
grid.asSingleSelect().addValueChangeListener(event -> {
    if (event.getValue() != null) {
        form.setCustomer(event.getValue());
    } else {
        form.setCustomer(null);
    }
});
----

In the listener, we simply take the [classname]#Customer# object of the selected
row and pass it to the [classname]#CustomerForm# for editing. In the previous step,
we added a side effect to the `setCustomer` method that will bind the domain object
to the corresponding fields.

To allow users to also create new customer records, we'll create a simple "Add
customer button" to the top of the UI, right next to the `filtering` composition
we have already built in a previous step. Introduce a new [classname]#Button# with
a click listener, by adding the following lines to the constructor, right after
where you introduced the `filtering` composition:

[source,java]
----
Button addCustomerBtn = new Button("Add new customer");
addCustomerBtn.addClickListener(e -> {
    grid.asSingleSelect().clear();
    form.setCustomer(new Customer());
});
----

In the click listener, we first clear a possible selection from the grid and then
instantiate a new customer object and pass that to the form for editing.

To add it beside our `filtering` composition, we can use a `HorizontalLayout` to
create a toolbar where we place both components. First, introduce a toolbar like
this after the previously created `addCustomerBtn`:

[source,java]
----
HorizontalLayout toolbar = new HorizontalLayout(filtering, addCustomerBtn);
----

And, again, *replace* the line that populates your main layout to add the
toolbar instead of just the `filtering` composition, which we just moved to the
`toolbar` layout.

[source,java]
----
add(toolbar, main);
----

All planned features are now done. You can save the changes and play around with
the application. You can also download
https://github.com/hezamuy/flow-tutorial[the final application] from Github.

[[framework.tutorial.margin]]
== Customizing the look and feel with CSS

Styling Vaadin Flow applications is easy, we can just add whatever CSS directives
we wish into the style file [filename]#src/main/webapp/frontend/styles.html#. For
example, to make the UI feel a bit more airy, add the following lines just before
`</style>` closing tag:

[source,css]
----
vaadin-vertical-layout, vaadin-form-layout {
    margin: 7px;
    padding-right: 7px;
}
----

[[framework.tutorial.next]]
== It works! What next?

Congratulations! Users can now create, read, update and delete customer records
stored in the demo backend using the app you created with Vaadin Flow.

If you are an experienced Java developer, you are probably already full of ideas
of how you can use your existing skills and create new UIs apps for your
existing Java apps. If you want more ideas of how to create full stack applications,
you might, for example, go through the http://spring.io/guides/gs/crud-with-vaadin/[Creating CRUD UI with Vaadin]
guide and create a bit similar UI with a real database backend implemented with
Spring Data JPA. We have also collected a couple of other resources for an easy
start in your Vaadin developer career.

 * https://vaadin.com/start#vaadin10[Vaadin 10 app starters]
 * http://vaadin.com/directory[Directory] - a vast source of awesome Vaadin add-ons
