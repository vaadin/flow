---
title: Building a Hello World Application
order: 2
layout: page
---

= Building a Hello World Application

The simplest possible Hello World application displays the text "Hello world" on the screen and does nothing else.
To accomplish this you only need one thing:

* A Component with `@Route` annotation to mapping it to a url

Flow will automatically detect this _Navigation Target_ specified with the annotation, and map a servlet for the application to the context root ("/*").
Here is an example of such a component:

[source,java]
----
@Route("")
public class HelloWorld extends Div {
    public HelloWorld() {
      setText("Hello world");
    }
}
----

The main purpose of this class is to populate the UI. In this case the class extends the very simple `Div` component (corresponds to a `<div>` in the browser) and you can use its `setText` method to show the message.
This is all that is needed, as both the servlet and the navigation target are registered automatically by Flow.

[TIP]
The `com.vaadin.flow.html` package contains a number of commonly used components. You can also extend `HtmlComponent` to create any custom component.

=== Defining a Servlet

It is also possible to manually define a servlet and configure it:

[source,java]
----
@WebServlet(urlPatterns = "/*", name = "HelloWorldServlet")
@VaadinServletConfiguration(productionMode = false)
public class HelloWorldServlet extends VaadinServlet {
}
----

Your servlet will listen for HTTP requests to all paths (`"/*"`) and serve the `HelloWorld` view when the root URL is requested (`setRoute("",...)`). Deploy the application to a servlet container, and open the URL (typically http://localhost:8080/<name-of-project>) to see the "Hello world" text.

For more information about defining routes, see  <<../routing/tutorial-routing-annotation#,Defining Routes With @Route>>.
