== Navigating Between Routes

You can use the `RouterLink` component to create links that lead to route targets in the application.

[source,java]
----
Div menu = new Div();
menu.add(new RouterLink("Home", HomeView.class));
menu.add(new RouterLink("Company", CompanyView.class));
----

It is also possible to navigate with normal `<a href="company">` type links but these will cause a page reload.
Navigation with `RouterLink` instead fetches the contents of the new component, which is updated in place without reloading the page.

[TIP]
By adding a `router-link` attribute to a regular link, you tell the framework that it should handle navigation without reloads, e.g. `<a router-link href="company">Go to the company page</a>`.

To trigger navigation from the server side, use `UI.navigateTo(String)`, where the string parameter is the location to navigate to, e.g. to navigate to the `company` route target when clicking a button:

[source,java]
----
NativeButton button = new NativeButton("Navigate to company");
button.addClickListener( e-> {
     button.getUI().ifPresent(ui -> ui.navigateTo("company"));
});
----

[NOTE]
Router links will work even if the session has expired so you should prefer to use those instead of handling navigation server side.

See also:

* <<tutorial-routing-view-hierarchy#,View Hierarchy and Nested Views>>
* <<tutorial-routing-view-parameters#,Using View Parameters>>
* <<tutorial-routing-view-titles#,Updating Page Title on Navigation>>
