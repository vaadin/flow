---
title: Grid
order: 2
layout: page
---

= Grid

== Overview

`Grid` is for displaying and editing tabular data laid out in rows
and columns. At the top, a __header__ can be shown, and a __footer__ at the
bottom. In addition to plain text, the header and footer can contain HTML and
components. Having components in the header allows implementing filtering
easily. The grid data can be sorted by clicking on a column header;
shift-clicking a column header enables secondary sorting criteria.

The data area can be scrolled both vertically and horizontally. The leftmost
columns can be frozen, so that they are never scrolled out of the view. The data
is loaded lazily from the server, so that only the visible data is loaded. The
smart lazy loading functionality gives excellent user experience even with low
bandwidth, such as mobile devices.

== Binding to Data

`Grid` is normally used by binding it to a data provider,
described in <<../data-provider/tutorial-flow-data-provider#,Data Providers>>.
By default, it is bound to List of items. You can set the items with the `setItems()` method.

For example, if you have a list of beans, you show them in a `Grid` as follows


[source, java]
----
// Have some data
List<Person> people = Arrays.asList(
        new Person("Nicolaus Copernicus", 1543),
        new Person("Galileo Galilei", 1564),
        new Person("Johannes Kepler", 1571));

// Create a grid bound to the list
Grid<Person> grid = new Grid<>();
grid.setItems(people);
grid.addColumn("Name", Person::getName);
grid.addColumn("Year of birth",
        person -> Integer.toString(person.getYearOfBirth()));

layout.add(grid);
----

== Handling Selection Changes

Selection in `Grid` is handled a bit differently from other selection
components, as it is not a `HasValue`. Grid supports
single, multiple, or no-selection, each defined by a specific selection model. Each
selection model has a specific API depending on the type of the selection.

For basic usage, switching between the built-in selection models is possible by using the `setSelectionMode(SelectionMode)`. Possible options are `++SINGLE++` (default), `++MULTI++`, or `++NONE++`.

Listening to selection changes in any selection model is possible with a `SelectionListener`,
which provides a generic `SelectionEvent` for getting the selected value or values.
Note that the listener is actually attached to the selection model and not the grid,
and will stop getting any events if the selection mode is changed.

[source, java]
----
Grid<Person> grid = new Grid<>();

// switch to multiselect mode
grid.setSelectionMode(SelectionMode.MULTI);

grid.addSelectionListener(event -> {
    Set<Person> selected = event.getAllSelectedItems();
    message.setText(selected.size() + " items selected");
});
----

Programmatically selecting the value is possible via `select(T)`.
In multiselect mode, this will add the given item to the selection.

[source, java]
----
// in single-select, only one item is selected
grid.select(defaultItem);

// switch to multi select, clears selection
grid.setSelectionMode(SelectionMode.MULTI);
// Select items 2-4
people.subList(2,3).forEach(grid::select);
----

The current selection can be obtained from the `Grid` by `getSelectedItems(), and the returned `Set` contains either only one item (in single-selection mode) or several items (in multi-selection mode).

[WARNING]
====
If you change selection mode for a grid, it will clear the selection
and fire a selection event. To keep the previous selection you must
reset the selection afterwards using the `select()` method.
====

[WARNING]
====
If you change the grid's items with `setItems()` or the used
`DataProvider`, it will clear the selection and fire a selection event.
To keep the previous selection you must reset the selection afterwards
using the `select()` method.
====

=== Selection Models

For more control over the selection, you can access the used selection model with
`getSelectionModel()`. The return type is `GridSelectionModel`
which has generic selection model API, but you can cast that to the specific selection model type,
typically either `SingleSelectionModel` or `MultiSelectionModel`.

The selection model is also returned by the `setSelectionMode(SelectionMode)` method.

[source, java]
----
// the default selection model
GridSingleSelectionModel<Person> defaultModel =
      (GridSingleSelectionModel<Person>) grid.getSelectionModel();

// Use multi-selection mode
GridMultiSelectionModel<Person> selectionModel =
      (GridMultiSelectionModel<Person>) grid.setSelectionMode(SelectionMode.MULTI);
----

==== Single Selection Model

By obtaining a reference to the `SingleSelectionModel`,
you can access more fine grained API for the single-select case.

The `addSingleSelect(SingleSelectionListener)` method provides access to `SingleSelectionEvent`, which has some extra API for more convenience.

In single-select mode, it is possible to control whether the empty (null) selection is allowed.
By default it is enabled, but can be disabled with `setDeselectAllowed()`.

[source, java]
----
// preselect value
grid.select(defaultItem);

GridSingleSelectionModel<Person> singleSelect =
      (GridSingleSelectionModel<Person>) grid.getSelectionModel();
// disallow empty selection
singleSelect.setDeselectAllowed(false);
----

=== Multi-Selection Model

In the multi-selection mode, a user can select multiple items by clicking on
the checkboxes in the leftmost column, or by using the space bar to select/deselect the currently focused row.
Space bar is the default key for toggling the selection, but it can be customized.

By obtaining a reference to the `MultiSelectionModel`,
you can access more fine grained API for the multi-select case.

The `MultiSelectionModel` provides `addMultiSelectionListener(MultiSelectionListener)`
access to `MultiSelectionEvent`, which allows to easily access differences in the selection change.

[source, java]
----
// Grid in multi-selection mode
Grid<Person> grid = new Grid<>();
grid.setItems(people);
GridMultiSelectionModel<Person> selectionModel =
        (GridMultiSelectionModel<Person>) grid.setSelectionMode(SelectionMode.MULTI);

selectionModel.selectAll();

selectionModel.addMultiSelectionListener(event -> {
    message.setText(String.format("%s items added, %s removed.",
            event.getAddedSelection().size(),
            event.getRemovedSelection().size()));

    // Allow deleting only if there's any selected
    deleteSelected.setDisabled(event.getNewSelection().isEmpty());
});
----

== Configuring Columns

The `addColumn()` method can be used to add columns to `Grid`.

Column configuration is defined in `Grid.Column` objects, which are returned by `addColumn`.
// NOT IMPLEMENTED YET: and can also be obtained from the grid with `getColumns()`.

The setter methods in `Column` have _fluent API_, so you can easily chain the configuration calls for columns if you want to.

[source, java]
----
Column<Person> nameColumn = grid.addColumn("Name", Person::getName)
    .setFlexGrow(0)
    .setWidth("100px")
    .setResizable(false);
----

In the following, we describe the basic column configuration.

=== Column Order

You can enable drag and drop user reordering of columns with `setColumnReorderingAllowed()`.

[source, java]
----
grid.setColumnReorderingAllowed(true);
----

////
NOT IMPLEMENTED YET

You can set the order of columns with `setColumnOrder()` for the
grid. Columns that are not given for the method are placed after the specified
columns in their natural order.


[source, java]
----
grid.setColumnOrder(firstnameColumn, lastnameColumn,
                    bornColumn, birthplaceColumn,
                    diedColumn);
----

Note that the method can not be used to hide columns. You can hide columns with
the `removeColumn()`, as described later.
////

=== Hiding and Removing Columns

Columns can be hidden by calling `setHidden()` in `Column`.
Furthermore, you can set the columns user hidable using method `setHidable()`.

////
NOT IMPLEMENTED YET

=== Removing Columns
Columns can be removed with `removeColumn()` and
`removeAllColumns()`. To restore a previously removed column,
you can call `addColumn()`.

////

////
NOT IMPLEMENTED YET

=== Column Captions

Column captions are displayed in the grid header. You can set the header caption
explicitly through the column object with `setCaption()`.

[source, java]
----
Column<Date> bornColumn = grid.addColumn(Person::getBirthDate);
bornColumn.setCaption("Born date");
----

This is equivalent to setting it with `setText()` for the header
cell; the `HeaderCell` also allows setting the caption in HTML or as
a component, as well as styling it, as described later in
<<components.grid.headerfooter>>.
////


[[components.grid.columns.width]]
=== Column Widths

Columns have by default undefined width, which causes automatic sizing based on the widths of the displayed data.
You can set column widths relatively using flex grow ratios with `setFlexGrow()`, or explicitly by a CSS string value with `setWidth()` when flex grow has been set to 0.

When `setResizable()` is enabled the user can resize a column by dragging its separator with the mouse.

=== Frozen Columns

You can set columns to be frozen with the `setFrozen()` method in `Column`, so that they are not scrolled off when scrolling horizontally.
Additionally, user reordering of frozen columns is disabled.

[source, java]
----
nameColumn.setFrozen(true);
----

== Using Templates

You can define the contents of the grid cells with HTML markup and use Polymer notation for data binding
and event handling. This is done by providing a `TemplateRenderer` for the appropriate `Column`.

The following example simply bolds the names of the persons.

[source, java]
----
Grid<Person> grid = new Grid<>();
grid.setItems(people);

grid.addColumn("Name",
        TemplateRenderer.<Person> of("<b>[[item.name]]</b>")
                .withProperty("name", Person::getName));
----

As you can see, the template-string is passed for the static `TemplateRenderer.of()` method,
and every property used in that template needs to be defined with the `withProperty()` method.

[NOTE]
The `\[[item.name]]` is Polymer syntax for binding properties for a list of items.
Using this notation in this context is pretty straightforward, but you can refer to
https://www.polymer-project.org/2.0/docs/api/elements/Polymer.DomRepeat[Polymer documentation]
for more details.

=== Using Custom Properties

You can also create and display new properties that the item doesn't originally contain.

For example, based on the year of birth, you could roughly compute the age of each person and
add a new column to display that.

[source, java]
----
grid.addColumn("Age",
        TemplateRenderer.<Person> of("[[item.age]] years old")
                .withProperty("age", person -> Year.now().getValue()
                        - person.getYearOfBirth()));
----

=== Binding Beans

If the object contains a bean property that has properties of it's own, you only need to make the bean
accessible by calling `withProperty()`, and the sub-properties become accessible as well.

For example, suppose that `Person` has a field for `Address` bean, and `Address` has fields `street`,
`number` and `postalCode` with corresponding getter and setter methods. You can use all of those
properties in your template with only one `withProperty()` call, as you can see in the following snippet.

[source, java]
----
grid.addColumn("Address", TemplateRenderer.<Person> of(
        "<div>[[item.address.street]], number [[item.address.number]]<br><small>[[item.address.postalCode]]</small></div>")
        .withProperty("address", Person::getAddress));
----

=== Handling Events

You can define event handlers for the elements inside your template, and hook them to server-side code by
calling `withEventHandler()` method on your `TemplateRenderer`. This is useful for editing the items in the
grid.

The following example adds a new column with two buttons: one for editing a property of the item, and another
one for removing the item. Both buttons define a method to call for `on-click` events, and `withEventHandler()`
is used to map those method-names to server-side code.

[source, java]
----
grid.addColumn("Actions", TemplateRenderer.<Person> of(
        "<button on-click='handleUpdate'>Update</button><button on-click='handleRemove'>Remove</button>")
        .withEventHandler("handleUpdate", person -> {
            person.setName(person.getName() + " Updated");
            grid.getDataProvider().refreshItem(person);
        }).withEventHandler("handleRemove", person -> {
            ListDataProvider<Person> dataProvider = (ListDataProvider<Person>) grid
                    .getDataProvider();
            dataProvider.getItems().remove(person);
            dataProvider.refreshAll();
        }));
----

After editing the server-side data used by the grid, you need to refresh the grid's `DataProvider` to make
those changes show up in the element. After editing an item you just need to call the `refreshItem()` method.
When an item is removed, you need to update all of the data with `refreshAll()`.

[NOTE]
You need to use Polymer notation for event handlers, so `on-click` (with a dash) instead of the native `onclick`.

[NOTE]
`TemplateRenderer` has fluent API, so you can chain the commands, like
`TemplateRenderer.of().withProperty().withProperty().withEventHandler()...`
