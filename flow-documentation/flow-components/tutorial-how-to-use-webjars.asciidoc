---
title: How to use WebJars
order: 5
layout: page
---

This page explains webjars usage basics independent of Flow project.
Keep in mind that Flow provides a way to deal with most of the webjars' issues with the way
described in <<tutorial-flow-components-setup#,Flow components setup>> document.

It is assumed that the reader is familiar with Maven or any other Java dependency manager.
For clarity, bower webjars and Maven are considered only, but most of the actions are the same for
any build system of package type chosen.

= Adding a webjar to the project

In order to add a webjar into the project, you have to simply specify a project dependency.
Maven example:

[source,xml]
----
<dependency>
    <groupId>org.webjars.bower</groupId>
    <artifactId>github-com-polymerelements-paper-button</artifactId>
    <version>2.0.0</version>
</dependency>
----

= WebJar usage in the project

After WebJars are added as a dependency, those need to be used somehow.
One way is to treat those jars as simple archives and unpack the web components' files from them.
It can be done the same way as with any other jar file and won't be covered here.

Another option is to access their contents in runtime. A helper library was made for this purpose:
https://github.com/webjars/webjars-locator-core[webjars-locator-core]

After this dependency is added into the project, it can be used to locate any WebJar on any file in it.
Basic usage examples are described in README.md

= How to pick web components to add as a dependency

https://www.webcomponents.org/[Web components] website can be used as a reference to pick the correct components.
The website pages contain package github url, name and package version list.

After that you can try and add
----
<dependency>
    <groupId>org.webjars.bower</groupId>
    <!-- replace %BOWER_NAME% with bower name of the package selected -->
    <artifactId>github-com-polymerelements-%BOWER_NAME%</artifactId>
    <!-- replace %BOWER_VERSION% with the version of the package selected -->
    <version>%BOWER_VERSION%</version>
</dependency>
----

There are two things that may go wrong:
* Artifact won't be present in the repository
* Artifact will be present in the repository, but there would be a conflict among different versions of the package

Future sections describe troubleshooting this kind of situations.

= Troubleshooting

All current issues with WebJars are related to dependency resolution.
Currently, the more webjars are added as a dependencies, the greater is the probability of the dependency resolution going wrong.

Main issues with WebJars are described in <<tutorial-flow-webjars#,WebJars in Flow>> document,
some will be considered here also.

As mentioned before, there are only two ways they can break the system: no artifact or version conflict.

== Missing WebJar

WebJars are published manually, on demand currently.
This means that for every WebJar is missing, you have to publish it using https://www.webjars.org/

First, new WebJars are published to intermediate BinTray repo (https://dl.bintray.com/webjars/maven)
and only after some amount of time they are deployed to Maven Central repo.

webjars.org displays artifacts available in BinTray, so if you see an artifact in search results, it is not
necessary in the Maven Central repo.

Due to Maven caching mechanism, by default, after Maven fails to find an artifact, it caches this result for 24 hours.
Using `-U` flag in `mvn` runs forces it to redownload the dependencies and usually fixes the problem.
It can be used the following way:
`mvn clean install -U` or `mvn dependency:tree -U`

=== WebJar is not in BinTray

Trick here is how to add it. Let's consider `paper-button` dependency.
Here's how dependency results look like for it:
image:../images/webjars_ui.png[WebJars UI]

You may notice one of the biggest issues with webjars: three different names for same entity.
More details are in the https://github.com/webjars/webjars/issues/1452[corresponding issue]

In order to add a build with simple name without prefixes (`paper-button` in this case), you should use `+` button.
Even if you click the different `+` button, the name will be in short form.

If you need to add a long name, use `Add a WebJar` button.
You will need to specify GitHub url, for paper-button it is `https://github.com/PolymerElements/paper-button`.
Depending ot the case of the url string the long name would be resolved either into `github-com-PolymerElements-paper-button`
for the example above or into `github-com-polymerelements-paper-button` for `https://github.com/polymerelements/paper-button`.

It is recommended to publish new artifacts in `github-com-polymerelements-paper-button`-alike form, meaning
that you should use `Add a WebJar` button with lower cased GitHub url.
Reasons for this are described in the webjars ticket above.

Some dependencies will require a different name as a transitive dependencies, those should be published via different ways.
It's relatively fine since they are the same from the binary point of view and the issue will be solved by WebJars' developers.

=== Webjar is not in Maven Central
Easiest way to avoid this is to add extra repository url to the project:
[source,xml]
----
<repositories>
    <repository>
        <!-- Limitation: Not all webjars are synced into Maven Central now -->
        <id>webjars</id>
        <url>https://dl.bintray.com/webjars/maven</url>
    </repository>
</repositories>
----
This repository is an intermediate one, where all WebJars are published initially.

Alternatively, you can republish missing artifacts.

== WebJar version conflict

After all of the missing dependencies are resolved, final issue may appear: dependency resolution fails.
This happens because

* resulting WebJars specify their dependencies in version range
* some WebJars contain version number prefixed with `v` (https://github.com/webjars/webjars/issues/1656)
* some WebJars contain incorrect version number (https://github.com/webjars/webjars/issues/1636)

Those issues can be fixed by using Maven `dependencyManagement` mechanism or by excluding some transitive dependencies.

A big help in resolving those kind of issues is a command that prints dependency tree for the project:
[source,maven]
----
mvn dependency:tree
----

You may want to check the output of this command even if the project compiles and see if there any WebJars that may
be not-fixed because of the ranges and specify their versions explicitly.

== Alternative ways with WebJars

Currently no better webjars' analog was found, but Flow eases the pain by providing a bom and the dependency
with all Flow components' webjars already resolved.
More details can be found in <<tutorial-flow-webjars#,WebJars in Flow>>
and <<tutorial-flow-components-setup#,Flow components setup>> documents.

== Alternative ways in general

Refer to <<tutorial-flow-components-setup#,Flow components setup>> document to learn how to
turn WebJars off and use standalone web components tools like bower.
