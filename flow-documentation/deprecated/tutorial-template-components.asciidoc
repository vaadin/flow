ifdef::env-github[:outfilesuffix: .asciidoc]
= Adding Components to a AngularTemplate

You can add child components to templates using the `Component` or `Element` API as long as the template element does not have any children.
If you want to include other templates inside a template, you should see <<tutorial-template-include#,Including AngularTemplates in AngularTemplates>>.

Here is the content of the HTML template file which has a placeholder `div` element with a `"content"` identifier. This element is mapped to a `Div` component in Java code below to set a `Component` as a child for it.

[source,html]
----
<div>
    <div id="header">Main page</div>
    <div id="content"></div>
    <hr>
    <div id="footer">
        <a href="mailto:someone@example.com?Subject=Hello%20again" target="_top">Send Mail</a>
    </div>
</div>
----

You can implement the method that sets a `Component` as the content for your template component.

[source,java]
----
public class MainPage extends AngularTemplate {

    @Id("content")
    private Div container;

    public void setContent(Component content) {
        container.removeAll();
        container.add(content);
    }
}
----

The `@Id` annotation is used here to map a component to an element defined in the template with the `"content"` identifier.
A component instance of the declared type is created automatically and injected into the 'container' field.
Now you can set any `Component` as a content for the `MainPage` class:

[source,java]
----
MainPage page = new MainPage();
page.setContent(new Label("Hello!"));
----

[NOTE]
An alternative way of implementing `MainPage` would be to iterate the Element tree and using `Element.appendChild`. Mapping an element to a `Component` is in many cases easier and has insignificant overhead.

[NOTE]
The declared type used in an `@Id` injection declaration must have a default constructor to be able to instantiate it.

[TIP]
You can only add new elements to template elements without children or text content. In the example above the `"content"` element is eligible for modification but the `"header"` element is not as it contains text.

[TIP]
The `@Id` annotation can also be used to inject an `Element` instance instead of a `Component` instance in case you want to use low level API or there is no appropriate HTML component available.
