ifdef::env-github[:outfilesuffix: .asciidoc]
= Creating A Simple Component Using the AngularTemplate API

There are multiple ways you can create a component. This tutorial uses the `AngularTemplate` API with no additional elements or components. For other component tutorials, see:

* <<../tutorial-component-many-elements#,Creating a Component Based on Many Elements>>
* <<../tutorial-component-composite#,Creating a Component Using Existing Components>>
* <<../tutorial-component-container#,Creating a Component Which Can Contain Other Components>>

For tutorials about how to use different template features, see:

* <<tutorial-template-bindings#,Binding Model Data in a Template>>
* <<tutorial-template-include#,Including Templates in Templates>>
* <<tutorial-template-event-handlers#,Handling User Events in a Template>>
* <<tutorial-template-for#,Creating AngularTemplate Contents Dynamically Based on a List of Items>>
* <<tutorial-template-webcomponents#,Using Web Components in a Template>>

You can use a template to create a simple greeting component in this way:

[source,html]
----
<div>
  Hello, <span class="greeting-name">{{name}}</span>
</div>
----

The template engine will replace `{{name}}` in the HTML with the value of the `name` property from the component's model.

[NOTE]
Updating the model property value will automatically update what is shown in the browser.
The template engine optimizes performance by updating only the changed parts.

[WARNING]
The model of a template component should not be confused with domain model objects defined for the application's business logic.
Data from the domain model might be used in the template model, but they are still separate concepts.

To use this template and set model values, you need to create a model class which extends `TemplateModel` and a template class which extends `Template`. Each instance of a `Template` component has its own model instance that holds values used by different types of bindings in the template file (i.e. the `.html` file). The template instance is a component which you can add to your view.

[source,java]
----
public interface GreetingModel extends TemplateModel {
  public void setName(String name);
  public String getName();
}

public class Greeting extends AngularTemplate {

  @Override
  public GreetingModel getModel() {
      return (GreetingModel) super.getModel();
  }

  public void setName(String name) {
    getModel().setName(name);
  }

  public String getName() {
    return getModel().getName();
  }
}
----

The last thing you need to do is to make sure the name of the template file has the same name as the Java file, except that the file extension should be `.html` instead of `.java`.
The template file should also be in the same package as the corresponding class.

[TIP]
You can use the `@HtmlTemplate` annotation to specify any HTML file path in the classpath.
[TIP]
With Maven, the template files should by default be located in `src/main/resources`. So if the `Greeting` class is in the `com.example` package, then `Greeting.html` should be in `src/main/resources/com/example/`.

You can use `Greeting` like any other component.

[source,java]
----
Greeting greeting = new Greeting();
greeting.setName("John Doe");

Div layout = new Div();
layout.add(greeting);
----
