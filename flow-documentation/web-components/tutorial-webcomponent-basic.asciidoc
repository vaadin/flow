---
title: Basic Integration of a Polymer Web Component
order: 1
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Basic Integration of a Polymer Web Component

This tutorial covers setting up a basic web component and importing needed resources. For related tutorials, see

* <<tutorial-webcomponent-attributes-and-properties#,Using Attributes and Properties with a Polymer Web Component>>
* <<tutorial-webcomponent-events#,Using Events with a Polymer Web Component>>

A web component is a reusable client-side component that you can use in the same way as regular HTML elements.
It has a custom HTML tag name and it's mainly configured by setting HTML attributes or properties.
The contents of the web component is defined by adding text or other DOM elements as children inside the component's own DOM element.

The Java class for integrating  https://elements.polymer-project.org/elements/paper-slider[`<paper-slider>`] can start out as follows:

[source,java]
----
@Tag("paper-slider")
@HtmlImport("bower_components/paper-slider/paper-slider.html")
public class PaperSlider extends Component {
    public PaperSlider() {
    }
}
----

You specify the tag name of the element using the `@Tag` annotation, just like you would with any built in element such as `<div>`. The actual implementation of the `<paper-slider>` element is in the `paper-slider.html` file, which you can  import using `@HtmlImport`.

== Configuring the Project

[NOTE]
If you are using some skeleton project or a demo such as https://github.com/vaadin/flow-application-skeleton[`flow-application-skeleton`] as a starting point, you probably have everything already configured. In this case, you can skip to <<Installing the Web Component>>.

The imported file `paper-slider.html` contains a client side code which needs to be available as a web resource. So it should be
fetched and saved in some directory which is served by your server.
If you use maven then just add  the following snippet in your `pom.xml` file inside your `plugins` section:

[source,xml]
----
    <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>${frontend.maven.plugin.version}</version>
        <configuration>
            <nodeVersion>${node.version}</nodeVersion>
            <npmVersion>${npm.version}</npmVersion>
        </configuration>
        <executions>
            <execution>
                <id>install-node-and-npm</id>
                <goals>
                    <goal>install-node-and-npm</goal>
                    <goal>npm</goal> <!-- runs 'install' by default -->
                    <goal>bower</goal> <!-- runs 'install' by default -->
                </goals>
                <configuration>
                    <workingDirectory>${frontend.working.directory}</workingDirectory>
                </configuration>
            </execution>
        </executions>
    </plugin>
----

This plugin will install for you tools for webcomponents management (`npm` and `bower`) assuming you are using
`${frontend.working.directory}` directory as a web resource directory in your project.

[NOTE]
The default for `${frontend.working.directory}` is `src/main/webapp/frontend`, but you can pick any directory you want.

This directory should have files `bower.json` and `package.json`.

The `bower.json` content is a file where you list all the dependencies you need from the frontend part of the application:

[source,json]
----
{
  "name": "your project name",
  "homepage": "",
  "authors": [],
  "description": "",
  "main": "",
  "license": "Apache2",
  "private": true,
  "ignore": [
    "**/.*",
    "node_modules",
    "bower_components",
    "test",
    "tests"
  ],
  "dependencies": {
    "polymer": "~2.0.2",
    "paper-slider": "~2.0.0"
  }
}
----

[NOTE]
This file is processed with `bower` utility to download web components. If you have it preinstalled, you may want to skip the next step.
For further info on the file contents, please refer to https://github.com/bower/spec/blob/master/json.md[bower.json file specification]

To download `bower`, another file is used: `package.json`
The file contents looks the following way:

[source,json]
----
{
  "name": "your project name",
  "version": "1.0.0",
  "main": "",
  "dependencies": {
    "bower": "~1.8.2"
  },
  "scripts": {
  },
  "author": "",
  "license": "Apache-2.0"
}
----

[NOTE]
Current situation (using different files for downloading dependencies) will be different in future, when https://www.polymer-project.org/blog/2017-08-23-hands-on-30-preview[Polymer 3.0] will be released.
For further info on the file contents, please refer to https://docs.npmjs.com/files/package.json[package.json file specification]

[NOTE] Workflows not using Maven are not supported at the moment. If your project doesn't use Maven, you will need to install and run `bower` directly, which is described bellow.

In this example it is assumed that you are using bower and have a `bower_components` directory in the root of you `WAR` file.

You can set up the `bower_components` and `bower.json` manually by running

[source,sh]
----
bower init
----

[NOTE]
To install `bower`, you first need to install _Node.js_ through a https://nodejs.org/en/download/package-manager/[package manager] or by https://nodejs.org/en/download/[downloading the installer].
You can then install `bower` by running `npm install -g bower`.

`bower init` will ask a you couple of questions and it creates the `bower.json` file.
The default answers for all the questions are suitable for this kind of integration, so you can simply proceed by pressing `enter` to accept each default answer.

== Installing the Web Component

Running the following command in `${frontend.working.directory}` will install the `paper-slider` component.

[source,sh]
----
bower install paper-slider --save
----

[NOTE]
You can also install web components by manually adding dependencies to the `bower.json` file and running `bower install`, which will download all the dependencies declared in the file.

With this basic integration, you can use add the `PaperSlider` class to a view to see that it works:
[source,java]
----
public class PaperSliderView extends Div implements View {
    public PaperSliderView() {
        add(new PaperSlider());
    }
}
----

For creating an API for attributes and properties, see
<<tutorial-webcomponent-attributes-and-properties#,Using Attributes and Properties with a Polymer Web Component>>.
For listening to events from a web component, see
<<tutorial-webcomponent-events#,Using Events with a Polymer Web Component>>.

[NOTE]
Web components implemented using Polymer should be used with Polymer's own https://www.polymer-project.org/1.0/docs/devguide/local-dom[DOM API]. Flow will automatically use the Polymer DOM API when appropriate.

== Preparing downloaded dependencies for production release

This topic is covered in <<tutorial-webcomponents-es5#,Serving ES5 Web Components to older browsers with Polymer 2>>
